
TB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  00002ada  00002b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000055a  008002bc  008002bc  00002c2a  2**0
                  ALLOC
  3 .debug_aranges 000007a0  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000132b  00000000  00000000  000033ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b0c6  00000000  00000000  000046f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d11  00000000  00000000  0000f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004961  00000000  00000000  000114cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000dc0  00000000  00000000  00015e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000259c  00000000  00000000  00016bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004d82  00000000  00000000  0001918c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000758  00000000  00000000  0001df0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return android.isConnected();
}

int Usb::sizeData() {
	return android.available();
}
       0:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__ctors_end>
/* does nothing, returns TRUE. Left for compatibility with old sketches               */
/* will be deleted eventually                                           */
///* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
///* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
///* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
boolean MAX3421E::vbusPwr ( boolean action )
       4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    dev0ep.rcvToggle = bmRCVTOG0;
}
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}
       c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      18:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      1c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      20:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      24:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      28:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      30:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      34:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      38:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      3c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      40:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      44:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      50:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      54:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      58:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      5c:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__vector_23>
      60:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      64:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_25>
      68:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_26>
      6c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      70:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      74:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      78:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      7c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      80:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      84:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      88:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      8c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      90:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_36>
      94:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_37>
      98:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      9c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      ac:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      bc:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      cc:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__vector_51>
      d0:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__vector_52>
      d4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      d8:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__vector_54>
      dc:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_55>
      e0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

000000e4 <_ZZN16AndroidAccessory11isConnectedEvE3__c_4>:
      e4:	64 69 73 63 6f 6e 6e 65 63 74 65 64 20 75 73 62     disconnected usb
      f4:	20 64 65 76 69 63 65 0a 00                           device..

000000fd <_ZZN16AndroidAccessory11isConnectedEvE3__c_3>:
      fd:	66 6f 75 6e 64 20 70 6f 73 73 69 62 6c 65 20 64     found possible d
     10d:	65 76 69 63 65 2e 0a 20 73 77 69 74 63 68 69 6e     evice.. switchin
     11d:	67 20 74 6f 20 73 65 72 69 61 6c 20 6d 6f 64 65     g to serial mode
     12d:	0a 00                                               ..

0000012f <_ZZN16AndroidAccessory11isConnectedEvE3__c_2>:
     12f:	66 6f 75 6e 64 20 61 6e 64 72 6f 69 64 20 61 63     found android ac
     13f:	65 73 73 6f 72 79 20 64 65 76 69 63 65 0a 00        essory device..

0000014e <_ZZN16AndroidAccessory11isConnectedEvE3__c_1>:
     14e:	0a 44 65 76 69 63 65 20 64 65 73 63 72 69 70 74     .Device descript
     15e:	6f 72 20 63 61 6e 6e 6f 74 20 62 65 20 72 65 74     or cannot be ret
     16e:	72 69 65 76 65 64 2e 20 54 72 79 69 6e 67 20 61     rieved. Trying a
     17e:	67 61 69 6e 0a 00                                   gain..

00000184 <_ZZN16AndroidAccessory11isConnectedEvE3__c_0>:
     184:	52 65 71 75 65 73 74 69 6e 67 20 64 65 76 69 63     Requesting devic
     194:	65 20 64 65 73 63 72 69 70 74 6f 72 2e 0a 00        e descriptor...

000001a3 <_ZZN16AndroidAccessory11isConnectedEvE3__c>:
     1a3:	0a 44 65 76 69 63 65 20 61 64 64 72 65 73 73 65     .Device addresse
     1b3:	64 2e 2e 2e 20 00                                   d... .

000001b9 <_ZZN16AndroidAccessory16configureAndroidEvE3__c>:
     1b9:	43 61 6e 27 74 20 73 65 74 20 63 6f 6e 66 69 67     Can't set config
     1c9:	20 74 6f 20 31 0a 00                                 to 1..

000001d0 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_5>:
     1d0:	63 61 6e 27 74 20 66 69 6e 64 20 61 63 63 65 73     can't find acces
     1e0:	73 6f 72 79 20 65 6e 64 70 6f 69 6e 74 73 00        sory endpoints.

000001ef <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_4>:
     1ef:	75 6e 6b 6f 77 6e 20 64 65 73 63 20 74 79 70 65     unkown desc type
     1ff:	20 00                                                .

00000201 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_3>:
     201:	69 6e 74 65 72 66 61 63 65 20 64 65 73 63 0a 00     interface desc..

00000211 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_2>:
     211:	63 6f 6e 66 69 67 20 64 65 73 63 0a 00              config desc..

0000021e <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_1>:
     21e:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     22e:	20 64 65 73 63 72 69 70 74 6f 72 0a 00               descriptor..

0000023b <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_0>:
     23b:	63 6f 6e 66 69 67 20 64 65 73 63 72 69 70 74 6f     config descripto
     24b:	72 20 74 6f 6f 20 6c 61 72 67 65 0a 00              r too large..

00000258 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c>:
     258:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     268:	20 64 65 73 63 72 69 70 74 6f 72 20 6c 65 6e 67      descriptor leng
     278:	74 68 0a 00                                         th..

0000027c <_ZZN16AndroidAccessory12switchDeviceEhE3__c_0>:
     27c:	0a 00                                               ..

0000027e <_ZZN16AndroidAccessory12switchDeviceEhE3__c>:
     27e:	64 65 76 69 63 65 20 73 75 70 70 6f 72 74 73 20     device supports 
     28e:	70 72 6f 74 63 6f 6c 20 00                          protcol .

00000297 <port_to_mode_PGM>:
     297:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2a7:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002b1 <port_to_output_PGM>:
     2b1:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2c1:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002cb <port_to_input_PGM>:
     2cb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2db:	00 01 00 00 03 01 06 01 09 01                       ..........

000002e5 <digital_pin_to_port_PGM>:
     2e5:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2f5:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     305:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     315:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     325:	0b 0b 0b 0b 0b 0b                                   ......

0000032b <digital_pin_to_bit_mask_PGM>:
     32b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     33b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     34b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     35b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     36b:	04 08 10 20 40 80                                   ... @.

00000371 <digital_pin_to_timer_PGM>:
     371:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     39d:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b8 <__ctors_start>:
     3b8:	72 02       	muls	r23, r18
     3ba:	d0 10       	cpse	r13, r0

000003bc <__ctors_end>:
     3bc:	11 24       	eor	r1, r1
     3be:	1f be       	out	0x3f, r1	; 63
     3c0:	cf ef       	ldi	r28, 0xFF	; 255
     3c2:	d1 e2       	ldi	r29, 0x21	; 33
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	0c bf       	out	0x3c, r16	; 60

000003cc <__do_copy_data>:
     3cc:	12 e0       	ldi	r17, 0x02	; 2
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b2 e0       	ldi	r27, 0x02	; 2
     3d2:	ea ed       	ldi	r30, 0xDA	; 218
     3d4:	fa e2       	ldi	r31, 0x2A	; 42
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	0b bf       	out	0x3b, r16	; 59
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <__do_copy_data+0x14>
     3dc:	07 90       	elpm	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	ac 3b       	cpi	r26, 0xBC	; 188
     3e2:	b1 07       	cpc	r27, r17
     3e4:	d9 f7       	brne	.-10     	; 0x3dc <__do_copy_data+0x10>
     3e6:	1b be       	out	0x3b, r1	; 59

000003e8 <__do_clear_bss>:
     3e8:	18 e0       	ldi	r17, 0x08	; 8
     3ea:	ac eb       	ldi	r26, 0xBC	; 188
     3ec:	b2 e0       	ldi	r27, 0x02	; 2
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <.do_clear_bss_start>

000003f0 <.do_clear_bss_loop>:
     3f0:	1d 92       	st	X+, r1

000003f2 <.do_clear_bss_start>:
     3f2:	a6 31       	cpi	r26, 0x16	; 22
     3f4:	b1 07       	cpc	r27, r17
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <.do_clear_bss_loop>

000003f8 <__do_global_ctors>:
     3f8:	13 e0       	ldi	r17, 0x03	; 3
     3fa:	cc eb       	ldi	r28, 0xBC	; 188
     3fc:	d3 e0       	ldi	r29, 0x03	; 3
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <.do_global_ctors_start>

00000400 <.do_global_ctors_loop>:
     400:	22 97       	sbiw	r28, 0x02	; 2
     402:	fe 01       	movw	r30, r28
     404:	0e 94 67 15 	call	0x2ace	; 0x2ace <__tablejump__>

00000408 <.do_global_ctors_start>:
     408:	c8 3b       	cpi	r28, 0xB8	; 184
     40a:	d1 07       	cpc	r29, r17
     40c:	c9 f7       	brne	.-14     	; 0x400 <.do_global_ctors_loop>
     40e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <main>
     412:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <_exit>

00000416 <__bad_interrupt>:
     416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041a <_ZN3Usb11isConnectedEv>:
	}
	return true;
}

bool Usb::isConnected() {
	return android.isConnected();
     41a:	8e 5f       	subi	r24, 0xFE	; 254
     41c:	9e 4f       	sbci	r25, 0xFE	; 254
     41e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <_ZN16AndroidAccessory11isConnectedEv>
}
     422:	08 95       	ret

00000424 <_ZN3Usb9reconnectEv>:
		amountSendBytes = 0;
	}
}

void Usb::reconnect() {
	android.powerOn();
     424:	8e 5f       	subi	r24, 0xFE	; 254
     426:	9e 4f       	sbci	r25, 0xFE	; 254
     428:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN16AndroidAccessory7powerOnEv>
}
     42c:	08 95       	ret

0000042e <_ZN3Usb4sendEv>:

u_char Usb::read() {
	return android.read();
}

void Usb::send() {
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
	if (amountSendBytes > 0) {
     436:	88 81       	ld	r24, Y
     438:	88 23       	and	r24, r24
     43a:	31 f1       	breq	.+76     	; 0x488 <_ZN3Usb4sendEv+0x5a>
		if (putPointer < sendOffset) //buffer overflow
     43c:	69 81       	ldd	r22, Y+1	; 0x01
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	86 17       	cp	r24, r22
     442:	90 f4       	brcc	.+36     	; 0x468 <_ZN3Usb4sendEv+0x3a>
				{
			byte sendBytes = 255 - sendOffset;
     444:	16 2f       	mov	r17, r22
     446:	10 95       	com	r17
			android.write(&sendBuf[sendOffset], sendBytes);
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	6d 5f       	subi	r22, 0xFD	; 253
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	6c 0f       	add	r22, r28
     450:	7d 1f       	adc	r23, r29
     452:	ce 01       	movw	r24, r28
     454:	8e 5f       	subi	r24, 0xFE	; 254
     456:	9e 4f       	sbci	r25, 0xFE	; 254
     458:	41 2f       	mov	r20, r17
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	0e 94 a2 09 	call	0x1344	; 0x1344 <_ZN16AndroidAccessory5writeEPhj>
			sendOffset = 0;
     460:	19 82       	std	Y+1, r1	; 0x01
			amountSendBytes -= sendBytes;
     462:	88 81       	ld	r24, Y
     464:	81 1b       	sub	r24, r17
     466:	88 83       	st	Y, r24
		}
		android.write(&sendBuf[sendOffset], amountSendBytes);
     468:	69 81       	ldd	r22, Y+1	; 0x01
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	6d 5f       	subi	r22, 0xFD	; 253
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	6c 0f       	add	r22, r28
     472:	7d 1f       	adc	r23, r29
     474:	48 81       	ld	r20, Y
     476:	ce 01       	movw	r24, r28
     478:	8e 5f       	subi	r24, 0xFE	; 254
     47a:	9e 4f       	sbci	r25, 0xFE	; 254
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	0e 94 a2 09 	call	0x1344	; 0x1344 <_ZN16AndroidAccessory5writeEPhj>
		sendOffset = putPointer;
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	89 83       	std	Y+1, r24	; 0x01
		amountSendBytes = 0;
     486:	18 82       	st	Y, r1
	}
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <_ZN3Usb4readEv>:
				APPLICATION_NAME, ACCESSORY_NAME, VERSIONN_NUMBER, URL,
				SERIAL_NUMBER) {
}

u_char Usb::read() {
	return android.read();
     490:	8e 5f       	subi	r24, 0xFE	; 254
     492:	9e 4f       	sbci	r25, 0xFE	; 254
     494:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN16AndroidAccessory4readEv>
}
     498:	08 95       	ret

0000049a <_ZN3UsbC1Ev>:
#define VERSIONN_NUMBER "1.0"
#define SERIAL_NUMBER "1"
#define URL "http://labs.arduino.cc/adk/ADK_count" // the URL of your app online
Usb usb;

Usb::Usb() :
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	fc 01       	movw	r30, r24
		amountSendBytes(0), sendOffset(0), putPointer(0), android(COMPANY_NAME,
				APPLICATION_NAME, ACCESSORY_NAME, VERSIONN_NUMBER, URL,
				SERIAL_NUMBER) {
     4a8:	10 82       	st	Z, r1
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	12 82       	std	Z+2, r1	; 0x02
     4ae:	8e 5f       	subi	r24, 0xFE	; 254
     4b0:	9e 4f       	sbci	r25, 0xFE	; 254
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	72 e0       	ldi	r23, 0x02	; 2
     4b6:	4b e0       	ldi	r20, 0x0B	; 11
     4b8:	52 e0       	ldi	r21, 0x02	; 2
     4ba:	2b e1       	ldi	r18, 0x1B	; 27
     4bc:	32 e0       	ldi	r19, 0x02	; 2
     4be:	04 e2       	ldi	r16, 0x24	; 36
     4c0:	12 e0       	ldi	r17, 0x02	; 2
     4c2:	f8 e2       	ldi	r31, 0x28	; 40
     4c4:	ef 2e       	mov	r14, r31
     4c6:	f2 e0       	ldi	r31, 0x02	; 2
     4c8:	ff 2e       	mov	r15, r31
     4ca:	ed e4       	ldi	r30, 0x4D	; 77
     4cc:	ce 2e       	mov	r12, r30
     4ce:	e2 e0       	ldi	r30, 0x02	; 2
     4d0:	de 2e       	mov	r13, r30
     4d2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>
}
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	08 95       	ret

000004e4 <_GLOBAL__I_usb>:

// make up anything you want for these
#define VERSIONN_NUMBER "1.0"
#define SERIAL_NUMBER "1"
#define URL "http://labs.arduino.cc/adk/ADK_count" // the URL of your app online
Usb usb;
     4e4:	8c eb       	ldi	r24, 0xBC	; 188
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN3UsbC1Ev>
	return android.isConnected();
}

int Usb::sizeData() {
	return android.available();
}
     4ec:	08 95       	ret

000004ee <_ZN12StateMachine4InitEv>:
#include "common/StateMachine.h"
#include "network/Usb.h"

StateMachine stateMachine; //Global StateMachine Object

void StateMachine::Init() {
     4ee:	fc 01       	movw	r30, r24
	currentState = PhoneDisconnected;
     4f0:	8b e2       	ldi	r24, 0x2B	; 43
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	91 83       	std	Z+1, r25	; 0x01
     4f6:	80 83       	st	Z, r24
}
     4f8:	08 95       	ret

000004fa <_ZN12StateMachine12requireStateE7TBState>:
		break;
	}
	this->postHandle();
}

TBState StateMachine::requireState(TBState state) {
     4fa:	fc 01       	movw	r30, r24
	switch (currentState) {
     4fc:	20 81       	ld	r18, Z
     4fe:	31 81       	ldd	r19, Z+1	; 0x01
     500:	2b 32       	cpi	r18, 0x2B	; 43
     502:	31 05       	cpc	r19, r1
     504:	69 f0       	breq	.+26     	; 0x520 <_ZN12StateMachine12requireStateE7TBState+0x26>
     506:	2c 32       	cpi	r18, 0x2C	; 44
     508:	31 05       	cpc	r19, r1
     50a:	89 f4       	brne	.+34     	; 0x52e <_ZN12StateMachine12requireStateE7TBState+0x34>
		return currentState;
	case PositionReached:
		return currentState;

	case PhoneConnect: {
		switch (state) {
     50c:	61 15       	cp	r22, r1
     50e:	71 05       	cpc	r23, r1
     510:	21 f0       	breq	.+8      	; 0x51a <_ZN12StateMachine12requireStateE7TBState+0x20>
     512:	6b 32       	cpi	r22, 0x2B	; 43
     514:	71 05       	cpc	r23, r1
     516:	49 f4       	brne	.+18     	; 0x52a <_ZN12StateMachine12requireStateE7TBState+0x30>
     518:	06 c0       	rjmp	.+12     	; 0x526 <_ZN12StateMachine12requireStateE7TBState+0x2c>
		case Idle:
			currentState = Idle;
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
     51e:	05 c0       	rjmp	.+10     	; 0x52a <_ZN12StateMachine12requireStateE7TBState+0x30>
		}
		return currentState;
	}

	case PhoneDisconnected: {
		switch (state) {
     520:	6c 32       	cpi	r22, 0x2C	; 44
     522:	71 05       	cpc	r23, r1
     524:	11 f4       	brne	.+4      	; 0x52a <_ZN12StateMachine12requireStateE7TBState+0x30>
		case PhoneConnect:
			currentState = PhoneConnect;
     526:	71 83       	std	Z+1, r23	; 0x01
     528:	60 83       	st	Z, r22
			break;
		default:
			//TODO: Log Error
			break;
		}
		return currentState;
     52a:	20 81       	ld	r18, Z
     52c:	31 81       	ldd	r19, Z+1	; 0x01
	case Error:
		return currentState;
	default:
		return currentState;
	}
}
     52e:	c9 01       	movw	r24, r18
     530:	08 95       	ret

00000532 <_ZN12StateMachine10postHandleEv>:
	if (currentState != PhoneDisconnected) {
		usb.read();
	}
}

void StateMachine::postHandle() {
     532:	fc 01       	movw	r30, r24
	if (currentState != PhoneDisconnected) {
     534:	80 81       	ld	r24, Z
     536:	91 81       	ldd	r25, Z+1	; 0x01
     538:	8b 97       	sbiw	r24, 0x2b	; 43
     53a:	21 f0       	breq	.+8      	; 0x544 <_ZN12StateMachine10postHandleEv+0x12>
		usb.send();
     53c:	8c eb       	ldi	r24, 0xBC	; 188
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Usb4sendEv>
     544:	08 95       	ret

00000546 <_ZN12StateMachine9preHandleEv>:

void StateMachine::Init() {
	currentState = PhoneDisconnected;
}

void StateMachine::preHandle() {
     546:	fc 01       	movw	r30, r24
	if (currentState != PhoneDisconnected) {
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	8b 97       	sbiw	r24, 0x2b	; 43
     54e:	21 f0       	breq	.+8      	; 0x558 <_ZN12StateMachine9preHandleEv+0x12>
		usb.read();
     550:	8c eb       	ldi	r24, 0xBC	; 188
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 48 02 	call	0x490	; 0x490 <_ZN3Usb4readEv>
     558:	08 95       	ret

0000055a <_ZN12StateMachine4CallEv>:
	if (currentState != PhoneDisconnected) {
		usb.send();
	}
}

void StateMachine::Call() {
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24
	this->preHandle();
     560:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN12StateMachine9preHandleEv>
	switch (currentState) {
     564:	88 81       	ld	r24, Y
     566:	99 81       	ldd	r25, Y+1	; 0x01
     568:	8b 32       	cpi	r24, 0x2B	; 43
     56a:	91 05       	cpc	r25, r1
     56c:	a1 f0       	breq	.+40     	; 0x596 <_ZN12StateMachine4CallEv+0x3c>
     56e:	8c 97       	sbiw	r24, 0x2c	; 44
     570:	e9 f4       	brne	.+58     	; 0x5ac <_ZN12StateMachine4CallEv+0x52>
		break;
	case PositionReached:
		break;

	case PhoneConnect: {
		usb.reconnect();
     572:	8c eb       	ldi	r24, 0xBC	; 188
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	0e 94 12 02 	call	0x424	; 0x424 <_ZN3Usb9reconnectEv>
		if (!usb.isConnected())
     57a:	8c eb       	ldi	r24, 0xBC	; 188
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN3Usb11isConnectedEv>
     582:	88 23       	and	r24, r24
     584:	21 f4       	brne	.+8      	; 0x58e <_ZN12StateMachine4CallEv+0x34>
			requireState(PhoneDisconnected);
     586:	ce 01       	movw	r24, r28
     588:	6b e2       	ldi	r22, 0x2B	; 43
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	0d c0       	rjmp	.+26     	; 0x5a8 <_ZN12StateMachine4CallEv+0x4e>
		else
			requireState(Idle);
     58e:	ce 01       	movw	r24, r28
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	09 c0       	rjmp	.+18     	; 0x5a8 <_ZN12StateMachine4CallEv+0x4e>
		break;
	}

	case PhoneDisconnected: {
		delay(1000);
     596:	68 ee       	ldi	r22, 0xE8	; 232
     598:	73 e0       	ldi	r23, 0x03	; 3
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <delay>
		this->requireState(PhoneConnect);
     5a2:	ce 01       	movw	r24, r28
     5a4:	6c e2       	ldi	r22, 0x2C	; 44
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN12StateMachine12requireStateE7TBState>
	}
		break;
	case Error:
		break;
	}
	this->postHandle();
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 99 02 	call	0x532	; 0x532 <_ZN12StateMachine10postHandleEv>
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <_ZN8MAX3421E12getVbusStateEv>:
}

byte MAX3421E::getVbusState( void )
{ 
    return( vbusState );
}
     5b8:	80 91 59 05 	lds	r24, 0x0559
     5bc:	08 95       	ret

000005be <_ZN8MAX3421E7bytesRdEhhPc>:
    digitalWrite(MAX_SS,HIGH); 
    return( SPDR );
}
/* multiple-bytes register read                             */
/* returns a pointer to a memory position after last read   */
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	16 2f       	mov	r17, r22
     5c8:	04 2f       	mov	r16, r20
     5ca:	e9 01       	movw	r28, r18
{
    digitalWrite(MAX_SS,LOW);
     5cc:	85 e3       	ldi	r24, 0x35	; 53
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
    SPDR = reg;      
     5d4:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));    //wait
     5d6:	0d b4       	in	r0, 0x2d	; 45
     5d8:	07 fe       	sbrs	r0, 7
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <_ZN8MAX3421E7bytesRdEhhPc+0x18>
     5dc:	90 2f       	mov	r25, r16
     5de:	fe 01       	movw	r30, r28
     5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <_ZN8MAX3421E7bytesRdEhhPc+0x32>
    while( nbytes ) {
      SPDR = 0; //send empty byte
     5e2:	1e bc       	out	0x2e, r1	; 46
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <_ZN8MAX3421E7bytesRdEhhPc+0x26>
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
      SPDR = 0; //send empty byte
      nbytes--;
     5ea:	91 50       	subi	r25, 0x01	; 1
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
     5ec:	8e b5       	in	r24, 0x2e	; 46
     5ee:	81 93       	st	Z+, r24
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
     5f0:	99 23       	and	r25, r25
     5f2:	b9 f7       	brne	.-18     	; 0x5e2 <_ZN8MAX3421E7bytesRdEhhPc+0x24>
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
      data++;
    }
    digitalWrite(MAX_SS,HIGH);
     5f4:	85 e3       	ldi	r24, 0x35	; 53
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
     5fc:	9e 01       	movw	r18, r28
     5fe:	20 0f       	add	r18, r16
     600:	31 1d       	adc	r19, r1
    return( data );   
}
     602:	c9 01       	movw	r24, r18
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret

0000060e <_ZN8MAX3421E5regRdEh>:
    regWr( rIOPINS2, val );
    
    return;     
}
/* Single host register read        */
byte MAX3421E::regRd( byte reg )    
     60e:	1f 93       	push	r17
     610:	16 2f       	mov	r17, r22
{
  byte tmp;
    digitalWrite(MAX_SS,LOW);
     612:	85 e3       	ldi	r24, 0x35	; 53
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
    SPDR = reg;
     61a:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));
     61c:	0d b4       	in	r0, 0x2d	; 45
     61e:	07 fe       	sbrs	r0, 7
     620:	fd cf       	rjmp	.-6      	; 0x61c <_ZN8MAX3421E5regRdEh+0xe>
    SPDR = 0; //send empty byte
     622:	1e bc       	out	0x2e, r1	; 46
    while(!( SPSR & ( 1 << SPIF )));
     624:	0d b4       	in	r0, 0x2d	; 45
     626:	07 fe       	sbrs	r0, 7
     628:	fd cf       	rjmp	.-6      	; 0x624 <_ZN8MAX3421E5regRdEh+0x16>
    digitalWrite(MAX_SS,HIGH); 
     62a:	85 e3       	ldi	r24, 0x35	; 53
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
    return( SPDR );
     632:	8e b5       	in	r24, 0x2e	; 46
}
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <_ZN8MAX3421E10GpxHandlerEv>:
    regWr( rHIRQ, HIRQ_sendback );
    return( HIRQ_sendback );
}
byte MAX3421E::GpxHandler()
{
 byte GPINIRQ = regRd( rGPINIRQ );          //read GPIN IRQ register
     638:	60 eb       	ldi	r22, 0xB0	; 176
     63a:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
//        delay( 1000 );
//        vbusPwr( ON );
//        regWr( rGPINIRQ, bmGPINIRQ7 );
//    }       
    return( GPINIRQ );
}
     63e:	08 95       	ret

00000640 <_ZN8MAX3421E7bytesWrEhhPc>:
      digitalWrite(MAX_SS,HIGH);
      return;
}
/* multiple-byte write */
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	16 2f       	mov	r17, r22
     64a:	04 2f       	mov	r16, r20
     64c:	e9 01       	movw	r28, r18
{
    digitalWrite(MAX_SS,LOW);
     64e:	85 e3       	ldi	r24, 0x35	; 53
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
    SPDR = ( reg | 0x02 );
     656:	12 60       	ori	r17, 0x02	; 2
     658:	1e bd       	out	0x2e, r17	; 46
     65a:	fe 01       	movw	r30, r28
     65c:	90 2f       	mov	r25, r16
     65e:	06 c0       	rjmp	.+12     	; 0x66c <_ZN8MAX3421E7bytesWrEhhPc+0x2c>
    while( nbytes-- ) {
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
     660:	0d b4       	in	r0, 0x2d	; 45
     662:	07 fe       	sbrs	r0, 7
     664:	fd cf       	rjmp	.-6      	; 0x660 <_ZN8MAX3421E7bytesWrEhhPc+0x20>
      SPDR = ( *data );               // send next data byte
     666:	81 91       	ld	r24, Z+
     668:	8e bd       	out	0x2e, r24	; 46
      data++;                         // advance data pointer
     66a:	91 50       	subi	r25, 0x01	; 1
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = ( reg | 0x02 );
    while( nbytes-- ) {
     66c:	99 23       	and	r25, r25
     66e:	c1 f7       	brne	.-16     	; 0x660 <_ZN8MAX3421E7bytesWrEhhPc+0x20>
     670:	c0 0f       	add	r28, r16
     672:	d1 1d       	adc	r29, r1
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
      SPDR = ( *data );               // send next data byte
      data++;                         // advance data pointer
    }
    while(!( SPSR & ( 1 << SPIF )));
     674:	0d b4       	in	r0, 0x2d	; 45
     676:	07 fe       	sbrs	r0, 7
     678:	fd cf       	rjmp	.-6      	; 0x674 <_ZN8MAX3421E7bytesWrEhhPc+0x34>
    digitalWrite(MAX_SS,HIGH);
     67a:	85 e3       	ldi	r24, 0x35	; 53
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
    return( data );
}
     682:	ce 01       	movw	r24, r28
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <_ZN8MAX3421E5regWrEhh>:
//{
//    digitalWrite( pin, HIGH );
//    digitalWrite( pin, LOW );
//}
/* Single host register write   */
void MAX3421E::regWr( byte reg, byte val)
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	18 2f       	mov	r17, r24
     694:	06 2f       	mov	r16, r22
{
      digitalWrite(MAX_SS,LOW);
     696:	85 e3       	ldi	r24, 0x35	; 53
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
      SPDR = ( reg | 0x02 );
     69e:	12 60       	ori	r17, 0x02	; 2
     6a0:	1e bd       	out	0x2e, r17	; 46
      while(!( SPSR & ( 1 << SPIF )));
     6a2:	0d b4       	in	r0, 0x2d	; 45
     6a4:	07 fe       	sbrs	r0, 7
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <_ZN8MAX3421E5regWrEhh+0x14>
      SPDR = val;
     6a8:	0e bd       	out	0x2e, r16	; 46
      while(!( SPSR & ( 1 << SPIF )));
     6aa:	0d b4       	in	r0, 0x2d	; 45
     6ac:	07 fe       	sbrs	r0, 7
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <_ZN8MAX3421E5regWrEhh+0x1c>
      digitalWrite(MAX_SS,HIGH);
     6b0:	85 e3       	ldi	r24, 0x35	; 53
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
      return;
}
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <_ZN8MAX3421E8busprobeEv>:
//        return( false );
//    }                      
    return( true );                                             // power on/off successful                       
}
/* probe bus to determine device presense and speed and switch host to this speed */
void MAX3421E::busprobe( void )
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
{
 byte bus_sample;
    bus_sample = regRd( rHRSL );            //Get J,K status
     6c4:	68 ef       	ldi	r22, 0xF8	; 248
     6c6:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
    bus_sample &= ( bmJSTATUS|bmKSTATUS );      //zero the rest of the byte
    switch( bus_sample ) {                          //start full-speed or low-speed host 
     6ca:	80 7c       	andi	r24, 0xC0	; 192
     6cc:	80 34       	cpi	r24, 0x40	; 64
     6ce:	89 f0       	breq	.+34     	; 0x6f2 <_ZN8MAX3421E8busprobeEv+0x34>
     6d0:	81 34       	cpi	r24, 0x41	; 65
     6d2:	18 f4       	brcc	.+6      	; 0x6da <_ZN8MAX3421E8busprobeEv+0x1c>
     6d4:	88 23       	and	r24, r24
     6d6:	19 f1       	breq	.+70     	; 0x71e <_ZN8MAX3421E8busprobeEv+0x60>
     6d8:	28 c0       	rjmp	.+80     	; 0x72a <_ZN8MAX3421E8busprobeEv+0x6c>
     6da:	80 38       	cpi	r24, 0x80	; 128
     6dc:	19 f0       	breq	.+6      	; 0x6e4 <_ZN8MAX3421E8busprobeEv+0x26>
     6de:	80 3c       	cpi	r24, 0xC0	; 192
     6e0:	21 f5       	brne	.+72     	; 0x72a <_ZN8MAX3421E8busprobeEv+0x6c>
     6e2:	19 c0       	rjmp	.+50     	; 0x716 <_ZN8MAX3421E8busprobeEv+0x58>
        case( bmJSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
     6e4:	ce 01       	movw	r24, r28
     6e6:	68 ed       	ldi	r22, 0xD8	; 216
     6e8:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     6ec:	81 fd       	sbrc	r24, 1
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <_ZN8MAX3421E8busprobeEv+0x40>
     6f0:	0c c0       	rjmp	.+24     	; 0x70a <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST);        //start low-speed host
                vbusState = LSHOST;
            }
            break;
        case( bmKSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
     6f2:	ce 01       	movw	r24, r28
     6f4:	68 ed       	ldi	r22, 0xD8	; 216
     6f6:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     6fa:	81 fd       	sbrc	r24, 1
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST );       //start low-speed host
     6fe:	88 ed       	ldi	r24, 0xD8	; 216
     700:	6b ec       	ldi	r22, 0xCB	; 203
     702:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
                vbusState = LSHOST;
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	07 c0       	rjmp	.+14     	; 0x718 <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            else {
                regWr( rMODE, MODE_FS_HOST );       //start full-speed host
     70a:	88 ed       	ldi	r24, 0xD8	; 216
     70c:	69 ec       	ldi	r22, 0xC9	; 201
     70e:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
                vbusState = FSHOST;
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	01 c0       	rjmp	.+2      	; 0x718 <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            break;
        case( bmSE1 ):              //illegal state
            vbusState = SE1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 59 05 	sts	0x0559, r24
     71c:	06 c0       	rjmp	.+12     	; 0x72a <_ZN8MAX3421E8busprobeEv+0x6c>
            break;
        case( bmSE0 ):              //disconnected state
            regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ);
     71e:	88 ed       	ldi	r24, 0xD8	; 216
     720:	61 ed       	ldi	r22, 0xD1	; 209
     722:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
            vbusState = SE0;
     726:	10 92 59 05 	sts	0x0559, r1
            break;
        }//end switch( bus_sample )
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <_ZN8MAX3421E10IntHandlerEv>:
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
byte MAX3421E::IntHandler()
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	ec 01       	movw	r28, r24
{
 byte HIRQ;
 byte HIRQ_sendback = 0x00;
    HIRQ = regRd( rHIRQ );                  //determine interrupt source
     738:	68 ec       	ldi	r22, 0xC8	; 200
     73a:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
    //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
    //    HIRQ_sendback |= bmFRAMEIRQ;
    //}//end FRAMEIRQ handling
    if( HIRQ & bmCONDETIRQ ) {
     73e:	85 fd       	sbrc	r24, 5
     740:	02 c0       	rjmp	.+4      	; 0x746 <_ZN8MAX3421E10IntHandlerEv+0x16>
     742:	10 e0       	ldi	r17, 0x00	; 0
     744:	04 c0       	rjmp	.+8      	; 0x74e <_ZN8MAX3421E10IntHandlerEv+0x1e>
        busprobe();
     746:	ce 01       	movw	r24, r28
     748:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN8MAX3421E8busprobeEv>
     74c:	10 e2       	ldi	r17, 0x20	; 32
        HIRQ_sendback |= bmCONDETIRQ;
    }
    /* End HIRQ interrupts handling, clear serviced IRQs    */
    regWr( rHIRQ, HIRQ_sendback );
     74e:	88 ec       	ldi	r24, 0xC8	; 200
     750:	61 2f       	mov	r22, r17
     752:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    return( HIRQ_sendback );
}
     756:	81 2f       	mov	r24, r17
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	08 95       	ret

00000760 <_ZN8MAX3421E4TaskEv>:
    busprobe();                                                             //check if anything is connected
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
}
/* MAX3421 state change task and interrupt handler */
byte MAX3421E::Task( void )
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_INT );    
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
     768:	66 9b       	sbis	0x0c, 6	; 12
     76a:	0a c0       	rjmp	.+20     	; 0x780 <_ZN8MAX3421E4TaskEv+0x20>
     76c:	10 e0       	ldi	r17, 0x00	; 0

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_GPX );
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
     76e:	80 91 03 01 	lds	r24, 0x0103
     772:	83 ff       	sbrs	r24, 3
     774:	09 c0       	rjmp	.+18     	; 0x788 <_ZN8MAX3421E4TaskEv+0x28>
    if( pinvalue == LOW ) {
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
     776:	81 2f       	mov	r24, r17
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
#endif
    if( pinvalue  == LOW ) {
        rcode = IntHandler();
     780:	0e 94 98 03 	call	0x730	; 0x730 <_ZN8MAX3421E10IntHandlerEv>
     784:	18 2f       	mov	r17, r24
     786:	f3 cf       	rjmp	.-26     	; 0x76e <_ZN8MAX3421E4TaskEv+0xe>
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
#endif
    if( pinvalue == LOW ) {
        GpxHandler();
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN8MAX3421E10GpxHandlerEv>
     78e:	f3 cf       	rjmp	.-26     	; 0x776 <_ZN8MAX3421E4TaskEv+0x16>

00000790 <_ZN8MAX3421E5resetEv>:
    tmpbyte &= 0xf0;                        //clean lower nibble
    tmpbyte |= ( regRd( rIOPINS1 ) >>4 ) ;  //shift low bits and OR with upper from previous operation. Upper nibble zeroes during shift, at least with this compiler
    return( tmpbyte );
}
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
boolean MAX3421E::reset()
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	8c 01       	movw	r16, r24
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
     79a:	88 e7       	ldi	r24, 0x78	; 120
     79c:	60 e2       	ldi	r22, 0x20	; 32
     79e:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
     7a2:	88 e7       	ldi	r24, 0x78	; 120
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
     7aa:	c0 e0       	ldi	r28, 0x00	; 0
     7ac:	d0 e0       	ldi	r29, 0x00	; 0
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <_ZN8MAX3421E5resetEv+0x28>
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
     7b0:	21 97       	sbiw	r28, 0x01	; 1
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) {
     7b2:	11 f4       	brne	.+4      	; 0x7b8 <_ZN8MAX3421E5resetEv+0x28>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <_ZN8MAX3421E5resetEv+0x36>
boolean MAX3421E::reset()
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
     7b8:	c8 01       	movw	r24, r16
     7ba:	68 e6       	ldi	r22, 0x68	; 104
     7bc:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     7c0:	80 ff       	sbrs	r24, 0
     7c2:	f6 cf       	rjmp	.-20     	; 0x7b0 <_ZN8MAX3421E5resetEv+0x20>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
        if( tmp == 0 ) {
            return( false );
        }
    }
    return( true );
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <_ZN8MAX3421E7powerOnEv>:
            vbusState = SE0;
            break;
        }//end switch( bus_sample )
}
/* MAX3421E initialization after power-on   */
void MAX3421E::powerOn()
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
{
    /* Configure full-duplex SPI, interrupt pulse   */
    regWr( rPINCTL,( bmFDUPSPI + bmINTLEVEL + bmGPXB ));    //Full-duplex SPI, level interrupt, GPX
     7d6:	88 e8       	ldi	r24, 0x88	; 136
     7d8:	6a e1       	ldi	r22, 0x1A	; 26
     7da:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    if( reset() == false ) {                                //stop/start the oscillator
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN8MAX3421E5resetEv>
     7e4:	88 23       	and	r24, r24
     7e6:	31 f4       	brne	.+12     	; 0x7f4 <_ZN8MAX3421E7powerOnEv+0x24>
        Serial.println("Error: OSCOKIRQ failed to assert");
     7e8:	81 e9       	ldi	r24, 0x91	; 145
     7ea:	97 e0       	ldi	r25, 0x07	; 7
     7ec:	6f e4       	ldi	r22, 0x4F	; 79
     7ee:	72 e0       	ldi	r23, 0x02	; 2
     7f0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN5Print7printlnEPKc>
    }

    /* configure host operation */
    regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ );      // set pull-downs, Host, Separate GPIN IRQ on GPX
     7f4:	88 ed       	ldi	r24, 0xD8	; 216
     7f6:	61 ed       	ldi	r22, 0xD1	; 209
     7f8:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    regWr( rHIEN, bmCONDETIE|bmFRAMEIE );                                             //connection detection
     7fc:	80 ed       	ldi	r24, 0xD0	; 208
     7fe:	60 e6       	ldi	r22, 0x60	; 96
     800:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    /* check if device is connected */
    regWr( rHCTL,bmSAMPLEBUS );                                             // sample USB bus
     804:	88 ee       	ldi	r24, 0xE8	; 232
     806:	64 e0       	ldi	r22, 0x04	; 4
     808:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHCTL ) & bmSAMPLEBUS ));                                //wait for sample operation to finish
     80c:	ce 01       	movw	r24, r28
     80e:	68 ee       	ldi	r22, 0xE8	; 232
     810:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     814:	82 ff       	sbrs	r24, 2
     816:	fa cf       	rjmp	.-12     	; 0x80c <_ZN8MAX3421E7powerOnEv+0x3c>
    busprobe();                                                             //check if anything is connected
     818:	ce 01       	movw	r24, r28
     81a:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN8MAX3421E8busprobeEv>
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
     81e:	88 ec       	ldi	r24, 0xC8	; 200
     820:	60 e2       	ldi	r22, 0x20	; 32
     822:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
     826:	80 e8       	ldi	r24, 0x80	; 128
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <_ZN8MAX3421E8spi_initEv>:
        byte Task();
    private:
      static void spi_init() {
        uint8_t tmp;
        // initialize SPI pins
        pinMode(SCK_PIN, OUTPUT);
     834:	84 e3       	ldi	r24, 0x34	; 52
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	0e 94 3e 14 	call	0x287c	; 0x287c <pinMode>
        pinMode(MOSI_PIN, OUTPUT);
     83c:	83 e3       	ldi	r24, 0x33	; 51
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 3e 14 	call	0x287c	; 0x287c <pinMode>
        pinMode(MISO_PIN, INPUT);
     844:	82 e3       	ldi	r24, 0x32	; 50
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	0e 94 3e 14 	call	0x287c	; 0x287c <pinMode>
        pinMode(SS_PIN, OUTPUT);
     84c:	85 e3       	ldi	r24, 0x35	; 53
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	0e 94 3e 14 	call	0x287c	; 0x287c <pinMode>
        digitalWrite( SS_PIN, HIGH ); 
     854:	85 e3       	ldi	r24, 0x35	; 53
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
        /* mode 00 (CPOL=0, CPHA=0) master, fclk/2. Mode 11 (CPOL=11, CPHA=11) is also supported by MAX3421E */
        SPCR = 0x50;
     85c:	80 e5       	ldi	r24, 0x50	; 80
     85e:	8c bd       	out	0x2c, r24	; 44
        SPSR = 0x01;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	8d bd       	out	0x2d, r24	; 45
        /**/
        tmp = SPSR;
     864:	8d b5       	in	r24, 0x2d	; 45
        tmp = SPDR;
     866:	8e b5       	in	r24, 0x2e	; 46
    }
     868:	08 95       	ret

0000086a <_ZN8MAX3421EC1Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
{
    spi_init();  
     86e:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
     872:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
     874:	04 e0       	ldi	r16, 0x04	; 4
     876:	11 e0       	ldi	r17, 0x01	; 1
     878:	f8 01       	movw	r30, r16
     87a:	80 81       	ld	r24, Z
     87c:	87 7f       	andi	r24, 0xF7	; 247
     87e:	80 83       	st	Z, r24
#endif
    pinMode( MAX_SS, OUTPUT );
     880:	85 e3       	ldi	r24, 0x35	; 53
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 3e 14 	call	0x287c	; 0x287c <pinMode>
    digitalWrite(MAX_SS,HIGH);   
     888:	85 e3       	ldi	r24, 0x35	; 53
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
     890:	f8 01       	movw	r30, r16
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	80 83       	st	Z, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
     898:	e5 e0       	ldi	r30, 0x05	; 5
     89a:	f1 e0       	ldi	r31, 0x01	; 1
     89c:	80 81       	ld	r24, Z
     89e:	84 60       	ori	r24, 0x04	; 4
     8a0:	80 83       	st	Z, r24
#endif
}
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	08 95       	ret

000008a8 <_ZN8MAX3421EC2Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
{
    spi_init();  
     8ac:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
     8b0:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
     8b2:	04 e0       	ldi	r16, 0x04	; 4
     8b4:	11 e0       	ldi	r17, 0x01	; 1
     8b6:	f8 01       	movw	r30, r16
     8b8:	80 81       	ld	r24, Z
     8ba:	87 7f       	andi	r24, 0xF7	; 247
     8bc:	80 83       	st	Z, r24
#endif
    pinMode( MAX_SS, OUTPUT );
     8be:	85 e3       	ldi	r24, 0x35	; 53
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 3e 14 	call	0x287c	; 0x287c <pinMode>
    digitalWrite(MAX_SS,HIGH);   
     8c6:	85 e3       	ldi	r24, 0x35	; 53
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 81       	ld	r24, Z
     8d2:	84 60       	ori	r24, 0x04	; 4
     8d4:	80 83       	st	Z, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
     8d6:	e5 e0       	ldi	r30, 0x05	; 5
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	80 81       	ld	r24, Z
     8dc:	84 60       	ori	r24, 0x04	; 4
     8de:	80 83       	st	Z, r24
#endif
}
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <_ZN3USB15getUsbTaskStateEv>:
byte USB::getUsbTaskState( void )
{
    return( usb_task_state );
}
     8e6:	80 91 6a 05 	lds	r24, 0x056A
     8ea:	08 95       	ret

000008ec <_ZN3USB15setUsbTaskStateEh>:
void USB::setUsbTaskState( byte state )
{
    usb_task_state = state;
     8ec:	60 93 6a 05 	sts	0x056A, r22
}     
     8f0:	08 95       	ret

000008f2 <_ZN3USB16getDevTableEntryEhh>:
EP_RECORD* USB::getDevTableEntry( byte addr, byte ep )
{
  EP_RECORD* ptr;
    ptr = devtable[ addr ].epinfo;
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	fb 01       	movw	r30, r22
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e6 0f       	add	r30, r22
     8fc:	f7 1f       	adc	r31, r23
     8fe:	e6 5a       	subi	r30, 0xA6	; 166
     900:	fa 4f       	sbci	r31, 0xFA	; 250
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	48 9f       	mul	r20, r24
     90a:	a0 01       	movw	r20, r0
     90c:	11 24       	eor	r1, r1
     90e:	24 0f       	add	r18, r20
     910:	35 1f       	adc	r19, r21
    ptr += ep;
    return( ptr );
}
     912:	c9 01       	movw	r24, r18
     914:	08 95       	ret

00000916 <_ZN3USB16setDevTableEntryEhP9EP_RECORD>:
/* set device table entry */
/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
void USB::setDevTableEntry( byte addr, EP_RECORD* eprecord_ptr )
{
    devtable[ addr ].epinfo = eprecord_ptr;
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	fb 01       	movw	r30, r22
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	e6 0f       	add	r30, r22
     920:	f7 1f       	adc	r31, r23
     922:	e6 5a       	subi	r30, 0xA6	; 166
     924:	fa 4f       	sbci	r31, 0xFA	; 250
     926:	51 83       	std	Z+1, r21	; 0x01
     928:	40 83       	st	Z, r20
    //return();
}
     92a:	08 95       	ret

0000092c <_ZN3USB11dispatchPktEhhj>:
/* dispatch usb packet. Assumes peripheral address is set and relevant buffer is loaded/empty       */
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
byte USB::dispatchPkt( byte token, byte ep, unsigned int nak_limit )
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	78 2e       	mov	r7, r24
     948:	a9 2e       	mov	r10, r25
     94a:	16 2f       	mov	r17, r22
     94c:	b4 2e       	mov	r11, r20
     94e:	49 01       	movw	r8, r18
{
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
     950:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	88 e8       	ldi	r24, 0x88	; 136
     95a:	93 e1       	ldi	r25, 0x13	; 19
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	c8 0e       	add	r12, r24
     962:	d9 1e       	adc	r13, r25
     964:	ea 1e       	adc	r14, r26
     966:	fb 1e       	adc	r15, r27
     968:	c0 e0       	ldi	r28, 0x00	; 0
     96a:	d0 e0       	ldi	r29, 0x00	; 0
     96c:	00 e0       	ldi	r16, 0x00	; 0
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
     96e:	b1 2a       	or	r11, r17
     970:	30 c0       	rjmp	.+96     	; 0x9d2 <_ZN3USB11dispatchPktEhhj+0xa6>
     972:	80 ef       	ldi	r24, 0xF0	; 240
     974:	6b 2d       	mov	r22, r11
     976:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
     97a:	17 c0       	rjmp	.+46     	; 0x9aa <_ZN3USB11dispatchPktEhhj+0x7e>
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
      tmpdata = regRd( rHIRQ );
     97c:	87 2d       	mov	r24, r7
     97e:	9a 2d       	mov	r25, r10
     980:	68 ec       	ldi	r22, 0xC8	; 200
     982:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
      if( tmpdata & bmHXFRDNIRQ ) {
     986:	87 ff       	sbrs	r24, 7
     988:	10 c0       	rjmp	.+32     	; 0x9aa <_ZN3USB11dispatchPktEhhj+0x7e>
        regWr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
     98a:	88 ec       	ldi	r24, 0xC8	; 200
     98c:	60 e8       	ldi	r22, 0x80	; 128
     98e:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
      }//if( tmpdata & bmHXFRDNIRQ
    }//while ( millis() < timeout
    if( rcode != 0x00 ) {                //exit if timeout
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
     992:	87 2d       	mov	r24, r7
     994:	9a 2d       	mov	r25, r10
     996:	68 ef       	ldi	r22, 0xF8	; 248
     998:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     99c:	18 2f       	mov	r17, r24
     99e:	1f 70       	andi	r17, 0x0F	; 15
    switch( rcode ) {
     9a0:	14 30       	cpi	r17, 0x04	; 4
     9a2:	61 f0       	breq	.+24     	; 0x9bc <_ZN3USB11dispatchPktEhhj+0x90>
     9a4:	1e 30       	cpi	r17, 0x0E	; 14
     9a6:	e1 f4       	brne	.+56     	; 0x9e0 <_ZN3USB11dispatchPktEhhj+0xb4>
     9a8:	11 c0       	rjmp	.+34     	; 0x9cc <_ZN3USB11dispatchPktEhhj+0xa0>
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
     9aa:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
     9ae:	6c 15       	cp	r22, r12
     9b0:	7d 05       	cpc	r23, r13
     9b2:	8e 05       	cpc	r24, r14
     9b4:	9f 05       	cpc	r25, r15
     9b6:	10 f3       	brcs	.-60     	; 0x97c <_ZN3USB11dispatchPktEhhj+0x50>
     9b8:	1f ef       	ldi	r17, 0xFF	; 255
     9ba:	12 c0       	rjmp	.+36     	; 0x9e0 <_ZN3USB11dispatchPktEhhj+0xb4>
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
    switch( rcode ) {
      case hrNAK:
        nak_count ++;
     9bc:	21 96       	adiw	r28, 0x01	; 1
        if( nak_limit && ( nak_count == nak_limit )) {
     9be:	81 14       	cp	r8, r1
     9c0:	91 04       	cpc	r9, r1
     9c2:	39 f0       	breq	.+14     	; 0x9d2 <_ZN3USB11dispatchPktEhhj+0xa6>
     9c4:	c8 15       	cp	r28, r8
     9c6:	d9 05       	cpc	r29, r9
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <_ZN3USB11dispatchPktEhhj+0xa6>
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <_ZN3USB11dispatchPktEhhj+0xb4>
          return( rcode );
        }
        break;
      case hrTIMEOUT:
        retry_count ++;
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
        if( retry_count == USB_RETRY_LIMIT ) {
     9ce:	03 30       	cpi	r16, 0x03	; 3
     9d0:	39 f0       	breq	.+14     	; 0x9e0 <_ZN3USB11dispatchPktEhhj+0xb4>
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
     9d2:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
     9d6:	6c 15       	cp	r22, r12
     9d8:	7d 05       	cpc	r23, r13
     9da:	8e 05       	cpc	r24, r14
     9dc:	9f 05       	cpc	r25, r15
     9de:	48 f2       	brcs	.-110    	; 0x972 <_ZN3USB11dispatchPktEhhj+0x46>
      default:
        return( rcode );
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
     9e0:	81 2f       	mov	r24, r17
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	08 95       	ret

000009fe <_ZN3USB10ctrlStatusEhhj>:
    rcode = ctrlStatus( ep, direction );                //status stage
    return( rcode );
}
/* Control transfer with status stage and no data stage */
/* Assumed peripheral address is already set */
byte USB::ctrlStatus( byte ep, boolean direction, unsigned int nak_limit )
     9fe:	56 2f       	mov	r21, r22
{
  byte rcode;
    if( direction ) { //GET
     a00:	44 23       	and	r20, r20
     a02:	29 f0       	breq	.+10     	; 0xa0e <_ZN3USB10ctrlStatusEhhj+0x10>
        rcode = dispatchPkt( tokOUTHS, ep, nak_limit );
     a04:	60 ea       	ldi	r22, 0xA0	; 160
     a06:	45 2f       	mov	r20, r21
     a08:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3USB11dispatchPktEhhj>
     a0c:	08 95       	ret
    }
    else {
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
     a0e:	60 e8       	ldi	r22, 0x80	; 128
     a10:	45 2f       	mov	r20, r21
     a12:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3USB11dispatchPktEhhj>
    }
    return( rcode );
}
     a16:	08 95       	ret

00000a18 <_ZN3USB11outTransferEhhjPcj>:

/* OUT transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */
/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
/* major part of this function borrowed from code shared by Richard Ibbotson    */
byte USB::outTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     a18:	2f 92       	push	r2
     a1a:	3f 92       	push	r3
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	2c 97       	sbiw	r28, 0x0c	; 12
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	8d 83       	std	Y+5, r24	; 0x05
     a4e:	9e 83       	std	Y+6, r25	; 0x06
     a50:	4a 83       	std	Y+2, r20	; 0x02
     a52:	82 2e       	mov	r8, r18
     a54:	3f 83       	std	Y+7, r19	; 0x07
     a56:	91 2e       	mov	r9, r17
     a58:	fc 82       	std	Y+4, r15	; 0x04
     a5a:	eb 82       	std	Y+3, r14	; 0x03
{
 byte rcode, retry_count;
 char* data_p = data;   //local copy of the data pointer
 unsigned int bytes_tosend, nak_count;
 unsigned int bytes_left = nbytes;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     a5c:	46 2e       	mov	r4, r22
     a5e:	55 24       	eor	r5, r5
     a60:	87 e0       	ldi	r24, 0x07	; 7
     a62:	48 9f       	mul	r20, r24
     a64:	10 01       	movw	r2, r0
     a66:	11 24       	eor	r1, r1
     a68:	32 01       	movw	r6, r4
     a6a:	66 0c       	add	r6, r6
     a6c:	77 1c       	adc	r7, r7
     a6e:	64 0c       	add	r6, r4
     a70:	75 1c       	adc	r7, r5
     a72:	8a e5       	ldi	r24, 0x5A	; 90
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	68 0e       	add	r6, r24
     a78:	79 1e       	adc	r7, r25
     a7a:	d3 01       	movw	r26, r6
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	e2 0d       	add	r30, r2
     a82:	f3 1d       	adc	r31, r3
     a84:	12 81       	ldd	r17, Z+2	; 0x02
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
     a86:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
     a8a:	5b 01       	movw	r10, r22
     a8c:	6c 01       	movw	r12, r24
     a8e:	88 e8       	ldi	r24, 0x88	; 136
     a90:	93 e1       	ldi	r25, 0x13	; 19
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	a8 0e       	add	r10, r24
     a98:	b9 1e       	adc	r11, r25
     a9a:	ca 1e       	adc	r12, r26
     a9c:	db 1e       	adc	r13, r27
 
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
     a9e:	11 23       	and	r17, r17
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <_ZN3USB11outTransferEhhjPcj+0x90>
     aa2:	5e ef       	ldi	r21, 0xFE	; 254
     aa4:	f5 2e       	mov	r15, r21
     aa6:	ac c0       	rjmp	.+344    	; 0xc00 <_ZN3USB11outTransferEhhjPcj+0x1e8>
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
     aa8:	d3 01       	movw	r26, r6
     aaa:	ed 91       	ld	r30, X+
     aac:	fc 91       	ld	r31, X
     aae:	e2 0d       	add	r30, r2
     ab0:	f3 1d       	adc	r31, r3
     ab2:	88 ee       	ldi	r24, 0xE8	; 232
     ab4:	65 81       	ldd	r22, Z+5	; 0x05
     ab6:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
     aba:	20 2f       	mov	r18, r16
     abc:	39 2d       	mov	r19, r9
     abe:	c9 01       	movw	r24, r18
     ac0:	3c 01       	movw	r6, r24
     ac2:	28 2d       	mov	r18, r8
     ac4:	3f 81       	ldd	r19, Y+7	; 0x07
     ac6:	c9 01       	movw	r24, r18
     ac8:	4c 01       	movw	r8, r24
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
     aca:	e1 2f       	mov	r30, r17
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	f9 87       	std	Y+9, r31	; 0x09
     ad0:	e8 87       	std	Y+8, r30	; 0x08
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     ad2:	fa 81       	ldd	r31, Y+2	; 0x02
     ad4:	f0 62       	ori	r31, 0x20	; 32
     ad6:	fa 87       	std	Y+10, r31	; 0x0a
     ad8:	77 c0       	rjmp	.+238    	; 0xbc8 <_ZN3USB11outTransferEhhjPcj+0x1b0>
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
     ada:	9c 86       	std	Y+12, r9	; 0x0c
     adc:	8b 86       	std	Y+11, r8	; 0x0b
     ade:	88 85       	ldd	r24, Y+8	; 0x08
     ae0:	99 85       	ldd	r25, Y+9	; 0x09
     ae2:	88 15       	cp	r24, r8
     ae4:	99 05       	cpc	r25, r9
     ae6:	10 f4       	brcc	.+4      	; 0xaec <_ZN3USB11outTransferEhhjPcj+0xd4>
     ae8:	9c 87       	std	Y+12, r25	; 0x0c
     aea:	8b 87       	std	Y+11, r24	; 0x0b
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
     aec:	9b 85       	ldd	r25, Y+11	; 0x0b
     aee:	99 83       	std	Y+1, r25	; 0x01
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	60 e1       	ldi	r22, 0x10	; 16
     af6:	4b 85       	ldd	r20, Y+11	; 0x0b
     af8:	93 01       	movw	r18, r6
     afa:	0e 94 20 03 	call	0x640	; 0x640 <_ZN8MAX3421E7bytesWrEhhPc>
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
     afe:	88 e3       	ldi	r24, 0x38	; 56
     b00:	6b 85       	ldd	r22, Y+11	; 0x0b
     b02:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     b06:	80 ef       	ldi	r24, 0xF0	; 240
     b08:	6a 85       	ldd	r22, Y+10	; 0x0a
     b0a:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
     b0e:	8d 81       	ldd	r24, Y+5	; 0x05
     b10:	9e 81       	ldd	r25, Y+6	; 0x06
     b12:	68 ec       	ldi	r22, 0xC8	; 200
     b14:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     b18:	87 ff       	sbrs	r24, 7
     b1a:	f9 cf       	rjmp	.-14     	; 0xb0e <_ZN3USB11outTransferEhhjPcj+0xf6>
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
     b1c:	88 ec       	ldi	r24, 0xC8	; 200
     b1e:	60 e8       	ldi	r22, 0x80	; 128
     b20:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
    rcode = ( regRd( rHRSL ) & 0x0f );
     b24:	8d 81       	ldd	r24, Y+5	; 0x05
     b26:	9e 81       	ldd	r25, Y+6	; 0x06
     b28:	68 ef       	ldi	r22, 0xF8	; 248
     b2a:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     b2e:	4f e0       	ldi	r20, 0x0F	; 15
     b30:	f4 2e       	mov	r15, r20
     b32:	f8 22       	and	r15, r24
     b34:	ee 24       	eor	r14, r14
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	10 e0       	ldi	r17, 0x00	; 0
     b3a:	34 c0       	rjmp	.+104    	; 0xba4 <_ZN3USB11outTransferEhhjPcj+0x18c>
    while( rcode && ( timeout > millis())) {
      switch( rcode ) {
        case hrNAK:
          nak_count++;
     b3c:	0f 5f       	subi	r16, 0xFF	; 255
     b3e:	1f 4f       	sbci	r17, 0xFF	; 255
          if( nak_limit && ( nak_count == USB_NAK_LIMIT )) {
     b40:	ab 81       	ldd	r26, Y+3	; 0x03
     b42:	bc 81       	ldd	r27, Y+4	; 0x04
     b44:	ab 2b       	or	r26, r27
     b46:	51 f0       	breq	.+20     	; 0xb5c <_ZN3USB11outTransferEhhjPcj+0x144>
     b48:	bd e7       	ldi	r27, 0x7D	; 125
     b4a:	00 30       	cpi	r16, 0x00	; 0
     b4c:	1b 07       	cpc	r17, r27
     b4e:	31 f4       	brne	.+12     	; 0xb5c <_ZN3USB11outTransferEhhjPcj+0x144>
     b50:	57 c0       	rjmp	.+174    	; 0xc00 <_ZN3USB11outTransferEhhjPcj+0x1e8>
            return( rcode);                                   //return NAK
          }
          break;
        case hrTIMEOUT:
          retry_count++;
     b52:	e3 94       	inc	r14
          if( retry_count == USB_RETRY_LIMIT ) {
     b54:	e3 e0       	ldi	r30, 0x03	; 3
     b56:	ee 16       	cp	r14, r30
     b58:	09 f4       	brne	.+2      	; 0xb5c <_ZN3USB11outTransferEhhjPcj+0x144>
     b5a:	52 c0       	rjmp	.+164    	; 0xc00 <_ZN3USB11outTransferEhhjPcj+0x1e8>
          break;
        default:  
          return( rcode );
      }//switch( rcode...
      /* process NAK according to Host out NAK bug */
      regWr( rSNDBC, 0 );
     b5c:	88 e3       	ldi	r24, 0x38	; 56
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDFIFO, *data_p );
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	d3 01       	movw	r26, r6
     b68:	6c 91       	ld	r22, X
     b6a:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDBC, bytes_tosend );
     b6e:	88 e3       	ldi	r24, 0x38	; 56
     b70:	69 81       	ldd	r22, Y+1	; 0x01
     b72:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     b76:	80 ef       	ldi	r24, 0xF0	; 240
     b78:	6a 85       	ldd	r22, Y+10	; 0x0a
     b7a:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	9e 81       	ldd	r25, Y+6	; 0x06
     b82:	68 ec       	ldi	r22, 0xC8	; 200
     b84:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     b88:	87 ff       	sbrs	r24, 7
     b8a:	f9 cf       	rjmp	.-14     	; 0xb7e <_ZN3USB11outTransferEhhjPcj+0x166>
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
     b8c:	88 ec       	ldi	r24, 0xC8	; 200
     b8e:	60 e8       	ldi	r22, 0x80	; 128
     b90:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
      rcode = ( regRd( rHRSL ) & 0x0f );
     b94:	8d 81       	ldd	r24, Y+5	; 0x05
     b96:	9e 81       	ldd	r25, Y+6	; 0x06
     b98:	68 ef       	ldi	r22, 0xF8	; 248
     b9a:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     b9e:	3f e0       	ldi	r19, 0x0F	; 15
     ba0:	f3 2e       	mov	r15, r19
     ba2:	f8 22       	and	r15, r24
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    rcode = ( regRd( rHRSL ) & 0x0f );
    while( rcode && ( timeout > millis())) {
     ba4:	ff 20       	and	r15, r15
     ba6:	09 f4       	brne	.+2      	; 0xbaa <_ZN3USB11outTransferEhhjPcj+0x192>
     ba8:	45 c0       	rjmp	.+138    	; 0xc34 <_ZN3USB11outTransferEhhjPcj+0x21c>
     baa:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
     bae:	6a 15       	cp	r22, r10
     bb0:	7b 05       	cpc	r23, r11
     bb2:	8c 05       	cpc	r24, r12
     bb4:	9d 05       	cpc	r25, r13
     bb6:	f0 f5       	brcc	.+124    	; 0xc34 <_ZN3USB11outTransferEhhjPcj+0x21c>
      switch( rcode ) {
     bb8:	b4 e0       	ldi	r27, 0x04	; 4
     bba:	fb 16       	cp	r15, r27
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <_ZN3USB11outTransferEhhjPcj+0x1a8>
     bbe:	be cf       	rjmp	.-132    	; 0xb3c <_ZN3USB11outTransferEhhjPcj+0x124>
     bc0:	ee e0       	ldi	r30, 0x0E	; 14
     bc2:	fe 16       	cp	r15, r30
     bc4:	e9 f4       	brne	.+58     	; 0xc00 <_ZN3USB11outTransferEhhjPcj+0x1e8>
     bc6:	c5 cf       	rjmp	.-118    	; 0xb52 <_ZN3USB11outTransferEhhjPcj+0x13a>
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
     bc8:	81 14       	cp	r8, r1
     bca:	91 04       	cpc	r9, r1
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <_ZN3USB11outTransferEhhjPcj+0x1b8>
     bce:	85 cf       	rjmp	.-246    	; 0xada <_ZN3USB11outTransferEhhjPcj+0xc2>
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
    data_p += bytes_tosend;
  }//while( bytes_left...
  devtable[ addr ].epinfo[ ep ].sndToggle = ( regRd( rHRSL ) & bmSNDTOGRD ) ? bmSNDTOG1 : bmSNDTOG0;  //update toggle
     bd0:	f2 01       	movw	r30, r4
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e4 0d       	add	r30, r4
     bd8:	f5 1d       	adc	r31, r5
     bda:	e6 5a       	subi	r30, 0xA6	; 166
     bdc:	fa 4f       	sbci	r31, 0xFA	; 250
     bde:	00 81       	ld	r16, Z
     be0:	11 81       	ldd	r17, Z+1	; 0x01
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	68 ef       	ldi	r22, 0xF8	; 248
     be8:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     bec:	85 fd       	sbrc	r24, 5
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <_ZN3USB11outTransferEhhjPcj+0x1dc>
     bf0:	80 e4       	ldi	r24, 0x40	; 64
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <_ZN3USB11outTransferEhhjPcj+0x1de>
     bf4:	80 e8       	ldi	r24, 0x80	; 128
     bf6:	02 0d       	add	r16, r2
     bf8:	13 1d       	adc	r17, r3
     bfa:	d8 01       	movw	r26, r16
     bfc:	15 96       	adiw	r26, 0x05	; 5
     bfe:	8c 93       	st	X, r24
  return( rcode );    //should be 0 in all cases
}
     c00:	8f 2d       	mov	r24, r15
     c02:	2c 96       	adiw	r28, 0x0c	; 12
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	bf 90       	pop	r11
     c20:	af 90       	pop	r10
     c22:	9f 90       	pop	r9
     c24:	8f 90       	pop	r8
     c26:	7f 90       	pop	r7
     c28:	6f 90       	pop	r6
     c2a:	5f 90       	pop	r5
     c2c:	4f 90       	pop	r4
     c2e:	3f 90       	pop	r3
     c30:	2f 90       	pop	r2
     c32:	08 95       	ret
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
     c34:	eb 85       	ldd	r30, Y+11	; 0x0b
     c36:	fc 85       	ldd	r31, Y+12	; 0x0c
     c38:	8e 1a       	sub	r8, r30
     c3a:	9f 0a       	sbc	r9, r31
    data_p += bytes_tosend;
     c3c:	6e 0e       	add	r6, r30
     c3e:	7f 1e       	adc	r7, r31
     c40:	c3 cf       	rjmp	.-122    	; 0xbc8 <_ZN3USB11outTransferEhhjPcj+0x1b0>

00000c42 <_ZN3USB13newInTransferEhhjPcj>:
        }
  }//while( 1 )
}

/* Google variant of inTransfer. Pasted verbatim from ADK. Returns length instead of error code. Provided for compatibility with Google Open Accessory code */
int USB::newInTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     c42:	3f 92       	push	r3
     c44:	4f 92       	push	r4
     c46:	5f 92       	push	r5
     c48:	6f 92       	push	r6
     c4a:	7f 92       	push	r7
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	98 2e       	mov	r9, r24
     c66:	89 2e       	mov	r8, r25
     c68:	34 2e       	mov	r3, r20
     c6a:	59 01       	movw	r10, r18
     c6c:	38 01       	movw	r6, r16
     c6e:	27 01       	movw	r4, r14
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     c70:	e6 2e       	mov	r14, r22
     c72:	ff 24       	eor	r15, r15
     c74:	87 e0       	ldi	r24, 0x07	; 7
     c76:	48 9f       	mul	r20, r24
     c78:	60 01       	movw	r12, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	f7 01       	movw	r30, r14
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0d       	add	r30, r14
     c84:	ff 1d       	adc	r31, r15
     c86:	e6 5a       	subi	r30, 0xA6	; 166
     c88:	fa 4f       	sbci	r31, 0xFA	; 250
     c8a:	01 90       	ld	r0, Z+
     c8c:	f0 81       	ld	r31, Z
     c8e:	e0 2d       	mov	r30, r0
     c90:	ec 0d       	add	r30, r12
     c92:	fd 1d       	adc	r31, r13
     c94:	02 81       	ldd	r16, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
     c96:	88 ee       	ldi	r24, 0xE8	; 232
     c98:	66 81       	ldd	r22, Z+6	; 0x06
     c9a:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
     ca2:	89 2d       	mov	r24, r9
     ca4:	98 2d       	mov	r25, r8
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	43 2d       	mov	r20, r3
     caa:	92 01       	movw	r18, r4
     cac:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3USB11dispatchPktEhhj>
        if( rcode ) {
     cb0:	88 23       	and	r24, r24
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <_ZN3USB13newInTransferEhhjPcj+0x74>
     cb4:	46 c0       	rjmp	.+140    	; 0xd42 <_ZN3USB13newInTransferEhhjPcj+0x100>
		return -1;                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
     cb6:	89 2d       	mov	r24, r9
     cb8:	98 2d       	mov	r25, r8
     cba:	68 ec       	ldi	r22, 0xC8	; 200
     cbc:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     cc0:	82 ff       	sbrs	r24, 2
     cc2:	3f c0       	rjmp	.+126    	; 0xd42 <_ZN3USB13newInTransferEhhjPcj+0x100>
            return -1;                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
     cc4:	89 2d       	mov	r24, r9
     cc6:	98 2d       	mov	r25, r8
     cc8:	60 e3       	ldi	r22, 0x30	; 48
     cca:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     cce:	18 2f       	mov	r17, r24
	if (xfrlen+pktsize <= nbytes) {
     cd0:	c8 0f       	add	r28, r24
     cd2:	d1 1d       	adc	r29, r1
     cd4:	ac 16       	cp	r10, r28
     cd6:	bd 06       	cpc	r11, r29
     cd8:	40 f0       	brcs	.+16     	; 0xcea <_ZN3USB13newInTransferEhhjPcj+0xa8>
	  // Only copy the data to the buffer if the buffer's large enough.
	  data = bytesRd( rRCVFIFO, pktsize, data );
     cda:	89 2d       	mov	r24, r9
     cdc:	98 2d       	mov	r25, r8
     cde:	68 e0       	ldi	r22, 0x08	; 8
     ce0:	41 2f       	mov	r20, r17
     ce2:	93 01       	movw	r18, r6
     ce4:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN8MAX3421E7bytesRdEhhPc>
     ce8:	3c 01       	movw	r6, r24
	}
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
     cea:	88 ec       	ldi	r24, 0xC8	; 200
     cec:	64 e0       	ldi	r22, 0x04	; 4
     cee:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     cf2:	10 17       	cp	r17, r16
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <_ZN3USB13newInTransferEhhjPcj+0xba>
     cf6:	ca 15       	cp	r28, r10
     cf8:	db 05       	cpc	r29, r11
     cfa:	98 f2       	brcs	.-90     	; 0xca2 <_ZN3USB13newInTransferEhhjPcj+0x60>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
     cfc:	89 2d       	mov	r24, r9
     cfe:	98 2d       	mov	r25, r8
     d00:	68 ef       	ldi	r22, 0xF8	; 248
     d02:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     d06:	f7 01       	movw	r30, r14
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	84 ff       	sbrs	r24, 4
     d0e:	0b c0       	rjmp	.+22     	; 0xd26 <_ZN3USB13newInTransferEhhjPcj+0xe4>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     d10:	ee 0d       	add	r30, r14
     d12:	ff 1d       	adc	r31, r15
     d14:	e6 5a       	subi	r30, 0xA6	; 166
     d16:	fa 4f       	sbci	r31, 0xFA	; 250
     d18:	01 90       	ld	r0, Z+
     d1a:	f0 81       	ld	r31, Z
     d1c:	e0 2d       	mov	r30, r0
     d1e:	ec 0d       	add	r30, r12
     d20:	fd 1d       	adc	r31, r13
     d22:	80 e2       	ldi	r24, 0x20	; 32
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <_ZN3USB13newInTransferEhhjPcj+0xf8>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
     d26:	ee 0d       	add	r30, r14
     d28:	ff 1d       	adc	r31, r15
     d2a:	e6 5a       	subi	r30, 0xA6	; 166
     d2c:	fa 4f       	sbci	r31, 0xFA	; 250
     d2e:	01 90       	ld	r0, Z+
     d30:	f0 81       	ld	r31, Z
     d32:	e0 2d       	mov	r30, r0
     d34:	ec 0d       	add	r30, r12
     d36:	fd 1d       	adc	r31, r13
     d38:	80 e1       	ldi	r24, 0x10	; 16
     d3a:	86 83       	std	Z+6, r24	; 0x06
            }
	    if (xfrlen <= nbytes) {
     d3c:	ac 16       	cp	r10, r28
     d3e:	bd 06       	cpc	r11, r29
     d40:	18 f4       	brcc	.+6      	; 0xd48 <_ZN3USB13newInTransferEhhjPcj+0x106>
     d42:	2f ef       	ldi	r18, 0xFF	; 255
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <_ZN3USB13newInTransferEhhjPcj+0x108>
	      return xfrlen;
     d48:	9e 01       	movw	r18, r28
	      // than return partial data.
	      return -1;
	    }
        }
  }//while( 1 )
}
     d4a:	c9 01       	movw	r24, r18
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	af 90       	pop	r10
     d60:	9f 90       	pop	r9
     d62:	8f 90       	pop	r8
     d64:	7f 90       	pop	r7
     d66:	6f 90       	pop	r6
     d68:	5f 90       	pop	r5
     d6a:	4f 90       	pop	r4
     d6c:	3f 90       	pop	r3
     d6e:	08 95       	ret

00000d70 <_ZN3USB10inTransferEhhjPcj>:
}
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */
/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
byte USB::inTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	b8 2e       	mov	r11, r24
     d96:	a9 2e       	mov	r10, r25
     d98:	34 2e       	mov	r3, r20
     d9a:	29 01       	movw	r4, r18
     d9c:	48 01       	movw	r8, r16
     d9e:	37 01       	movw	r6, r14
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     da0:	e6 2e       	mov	r14, r22
     da2:	ff 24       	eor	r15, r15
     da4:	87 e0       	ldi	r24, 0x07	; 7
     da6:	48 9f       	mul	r20, r24
     da8:	60 01       	movw	r12, r0
     daa:	11 24       	eor	r1, r1
     dac:	f7 01       	movw	r30, r14
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ee 0d       	add	r30, r14
     db4:	ff 1d       	adc	r31, r15
     db6:	e6 5a       	subi	r30, 0xA6	; 166
     db8:	fa 4f       	sbci	r31, 0xFA	; 250
     dba:	01 90       	ld	r0, Z+
     dbc:	f0 81       	ld	r31, Z
     dbe:	e0 2d       	mov	r30, r0
     dc0:	ec 0d       	add	r30, r12
     dc2:	fd 1d       	adc	r31, r13
     dc4:	22 80       	ldd	r2, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
     dc6:	88 ee       	ldi	r24, 0xE8	; 232
     dc8:	66 81       	ldd	r22, Z+6	; 0x06
     dca:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
     dce:	c0 e0       	ldi	r28, 0x00	; 0
     dd0:	d0 e0       	ldi	r29, 0x00	; 0
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
     dd2:	8b 2d       	mov	r24, r11
     dd4:	9a 2d       	mov	r25, r10
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	43 2d       	mov	r20, r3
     dda:	93 01       	movw	r18, r6
     ddc:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3USB11dispatchPktEhhj>
     de0:	08 2f       	mov	r16, r24
        if( rcode ) {
     de2:	88 23       	and	r24, r24
     de4:	09 f0       	breq	.+2      	; 0xde8 <_ZN3USB10inTransferEhhjPcj+0x78>
     de6:	42 c0       	rjmp	.+132    	; 0xe6c <_ZN3USB10inTransferEhhjPcj+0xfc>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
     de8:	8b 2d       	mov	r24, r11
     dea:	9a 2d       	mov	r25, r10
     dec:	68 ec       	ldi	r22, 0xC8	; 200
     dee:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     df2:	82 fd       	sbrc	r24, 2
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <_ZN3USB10inTransferEhhjPcj+0x8a>
     df6:	00 ef       	ldi	r16, 0xF0	; 240
     df8:	39 c0       	rjmp	.+114    	; 0xe6c <_ZN3USB10inTransferEhhjPcj+0xfc>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
     dfa:	8b 2d       	mov	r24, r11
     dfc:	9a 2d       	mov	r25, r10
     dfe:	60 e3       	ldi	r22, 0x30	; 48
     e00:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     e04:	18 2f       	mov	r17, r24
        data = bytesRd( rRCVFIFO, pktsize, data );
     e06:	8b 2d       	mov	r24, r11
     e08:	9a 2d       	mov	r25, r10
     e0a:	68 e0       	ldi	r22, 0x08	; 8
     e0c:	41 2f       	mov	r20, r17
     e0e:	94 01       	movw	r18, r8
     e10:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN8MAX3421E7bytesRdEhhPc>
     e14:	4c 01       	movw	r8, r24
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
     e16:	88 ec       	ldi	r24, 0xC8	; 200
     e18:	64 e0       	ldi	r22, 0x04	; 4
     e1a:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     e1e:	12 15       	cp	r17, r2
     e20:	28 f0       	brcs	.+10     	; 0xe2c <_ZN3USB10inTransferEhhjPcj+0xbc>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
        data = bytesRd( rRCVFIFO, pktsize, data );
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
     e22:	c1 0f       	add	r28, r17
     e24:	d1 1d       	adc	r29, r1
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     e26:	c4 15       	cp	r28, r4
     e28:	d5 05       	cpc	r29, r5
     e2a:	98 f2       	brcs	.-90     	; 0xdd2 <_ZN3USB10inTransferEhhjPcj+0x62>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
     e2c:	8b 2d       	mov	r24, r11
     e2e:	9a 2d       	mov	r25, r10
     e30:	68 ef       	ldi	r22, 0xF8	; 248
     e32:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
     e36:	f7 01       	movw	r30, r14
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	84 ff       	sbrs	r24, 4
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <_ZN3USB10inTransferEhhjPcj+0xe6>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     e40:	ee 0d       	add	r30, r14
     e42:	ff 1d       	adc	r31, r15
     e44:	e6 5a       	subi	r30, 0xA6	; 166
     e46:	fa 4f       	sbci	r31, 0xFA	; 250
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
     e4e:	ec 0d       	add	r30, r12
     e50:	fd 1d       	adc	r31, r13
     e52:	80 e2       	ldi	r24, 0x20	; 32
     e54:	0a c0       	rjmp	.+20     	; 0xe6a <_ZN3USB10inTransferEhhjPcj+0xfa>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
     e56:	ee 0d       	add	r30, r14
     e58:	ff 1d       	adc	r31, r15
     e5a:	e6 5a       	subi	r30, 0xA6	; 166
     e5c:	fa 4f       	sbci	r31, 0xFA	; 250
     e5e:	01 90       	ld	r0, Z+
     e60:	f0 81       	ld	r31, Z
     e62:	e0 2d       	mov	r30, r0
     e64:	ec 0d       	add	r30, r12
     e66:	fd 1d       	adc	r31, r13
     e68:	80 e1       	ldi	r24, 0x10	; 16
     e6a:	86 83       	std	Z+6, r24	; 0x06
            }
            return( 0 );
        }
  }//while( 1 )
}
     e6c:	80 2f       	mov	r24, r16
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	3f 90       	pop	r3
     e90:	2f 90       	pop	r2
     e92:	08 95       	ret

00000e94 <_ZN3USB8ctrlDataEhhjPchj>:
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
    }
    return( rcode );
}
/* Control transfer with data stage. Stages 2 and 3 of control transfer. Assumes preipheral address is set and setup packet has been sent */
byte USB::ctrlData( byte addr, byte ep, unsigned int nbytes, char* dataptr, boolean direction, unsigned int nak_limit )
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
     ea6:	86 2f       	mov	r24, r22
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a4 2f       	mov	r26, r20
     eac:	b0 e0       	ldi	r27, 0x00	; 0
{
 byte rcode;
  if( direction ) {                      //IN transfer
     eae:	ee 20       	and	r14, r14
     eb0:	d9 f0       	breq	.+54     	; 0xee8 <_ZN3USB8ctrlDataEhhjPchj+0x54>
    devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     eb2:	fc 01       	movw	r30, r24
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	e8 0f       	add	r30, r24
     eba:	f9 1f       	adc	r31, r25
     ebc:	e6 5a       	subi	r30, 0xA6	; 166
     ebe:	fa 4f       	sbci	r31, 0xFA	; 250
     ec0:	cd 01       	movw	r24, r26
     ec2:	53 e0       	ldi	r21, 0x03	; 3
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	5a 95       	dec	r21
     eca:	e1 f7       	brne	.-8      	; 0xec4 <_ZN3USB8ctrlDataEhhjPchj+0x30>
     ecc:	8a 1b       	sub	r24, r26
     ece:	9b 0b       	sbc	r25, r27
     ed0:	01 90       	ld	r0, Z+
     ed2:	f0 81       	ld	r31, Z
     ed4:	e0 2d       	mov	r30, r0
     ed6:	e8 0f       	add	r30, r24
     ed8:	f9 1f       	adc	r31, r25
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	86 83       	std	Z+6, r24	; 0x06
    rcode = inTransfer( addr, ep, nbytes, dataptr, nak_limit );
     ede:	ce 01       	movw	r24, r28
     ee0:	76 01       	movw	r14, r12
     ee2:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN3USB10inTransferEhhjPcj>
     ee6:	1a c0       	rjmp	.+52     	; 0xf1c <_ZN3USB8ctrlDataEhhjPchj+0x88>
    return( rcode );
  }
  else {              //OUT transfer
    devtable[ addr ].epinfo[ ep ].sndToggle = bmSNDTOG1;
     ee8:	fc 01       	movw	r30, r24
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e8 0f       	add	r30, r24
     ef0:	f9 1f       	adc	r31, r25
     ef2:	e6 5a       	subi	r30, 0xA6	; 166
     ef4:	fa 4f       	sbci	r31, 0xFA	; 250
     ef6:	cd 01       	movw	r24, r26
     ef8:	53 e0       	ldi	r21, 0x03	; 3
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	5a 95       	dec	r21
     f00:	e1 f7       	brne	.-8      	; 0xefa <_ZN3USB8ctrlDataEhhjPchj+0x66>
     f02:	8a 1b       	sub	r24, r26
     f04:	9b 0b       	sbc	r25, r27
     f06:	01 90       	ld	r0, Z+
     f08:	f0 81       	ld	r31, Z
     f0a:	e0 2d       	mov	r30, r0
     f0c:	e8 0f       	add	r30, r24
     f0e:	f9 1f       	adc	r31, r25
     f10:	80 e8       	ldi	r24, 0x80	; 128
     f12:	85 83       	std	Z+5, r24	; 0x05
    rcode = outTransfer( addr, ep, nbytes, dataptr, nak_limit );
     f14:	ce 01       	movw	r24, r28
     f16:	76 01       	movw	r14, r12
     f18:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN3USB11outTransferEhhjPcj>
    return( rcode );
  }    
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	08 95       	ret

00000f2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>:
/* Control transfer. Sets address, endpoint, fills control packet with necessary data, dispatches control packet, and initiates bulk IN transfer,   */
/* depending on request. Actual requests are defined as inlines                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
byte USB::ctrlReq( byte addr, byte ep, byte bmReqType, byte bRequest, byte wValLo, byte wValHi, unsigned int wInd, unsigned int nbytes, char* dataptr, unsigned int nak_limit )
     f2e:	4f 92       	push	r4
     f30:	5f 92       	push	r5
     f32:	6f 92       	push	r6
     f34:	7f 92       	push	r7
     f36:	8f 92       	push	r8
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	28 97       	sbiw	r28, 0x08	; 8
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	3c 01       	movw	r6, r24
     f60:	16 2f       	mov	r17, r22
     f62:	f4 2e       	mov	r15, r20
     f64:	d2 2e       	mov	r13, r18
     f66:	4c 8c       	ldd	r4, Y+28	; 0x1c
     f68:	5d 8c       	ldd	r5, Y+29	; 0x1d
{
 boolean direction = false;     //request direction, IN or OUT
 byte rcode;   
 SETUP_PKT setup_pkt;

  regWr( rPERADDR, addr );                    //set peripheral address
     f6a:	80 ee       	ldi	r24, 0xE0	; 224
     f6c:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
  if( bmReqType & 0x80 ) {
    direction = true;                       //determine request direction
  }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
     f70:	d9 82       	std	Y+1, r13	; 0x01
    setup_pkt.bRequest = bRequest;
     f72:	0a 83       	std	Y+2, r16	; 0x02
    setup_pkt.wVal_u.wValueLo = wValLo;
     f74:	eb 82       	std	Y+3, r14	; 0x03
    setup_pkt.wVal_u.wValueHi = wValHi;
     f76:	cc 82       	std	Y+4, r12	; 0x04
    setup_pkt.wIndex = wInd;
     f78:	be 82       	std	Y+6, r11	; 0x06
     f7a:	ad 82       	std	Y+5, r10	; 0x05
    setup_pkt.wLength = nbytes;
     f7c:	98 86       	std	Y+8, r9	; 0x08
     f7e:	8f 82       	std	Y+7, r8	; 0x07
    bytesWr( rSUDFIFO, 8, ( char *)&setup_pkt );    //transfer to setup packet FIFO
     f80:	c3 01       	movw	r24, r6
     f82:	60 e2       	ldi	r22, 0x20	; 32
     f84:	48 e0       	ldi	r20, 0x08	; 8
     f86:	9e 01       	movw	r18, r28
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	0e 94 20 03 	call	0x640	; 0x640 <_ZN8MAX3421E7bytesWrEhhPc>
    rcode = dispatchPkt( tokSETUP, ep, nak_limit );            //dispatch packet
     f90:	c3 01       	movw	r24, r6
     f92:	60 e1       	ldi	r22, 0x10	; 16
     f94:	4f 2d       	mov	r20, r15
     f96:	2e 8d       	ldd	r18, Y+30	; 0x1e
     f98:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f9a:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3USB11dispatchPktEhhj>
     f9e:	08 2f       	mov	r16, r24
    //Serial.println("Setup packet");   //DEBUG
    if( rcode ) {                                   //return HRSLT if not zero
     fa0:	88 23       	and	r24, r24
     fa2:	29 f0       	breq	.+10     	; 0xfae <_ZN3USB7ctrlReqEhhhhhhjjPcj+0x80>
        Serial.print("Setup packet error: ");
     fa4:	81 e9       	ldi	r24, 0x91	; 145
     fa6:	97 e0       	ldi	r25, 0x07	; 7
     fa8:	60 e7       	ldi	r22, 0x70	; 112
     faa:	72 e0       	ldi	r23, 0x02	; 2
     fac:	19 c0       	rjmp	.+50     	; 0xfe0 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xb2>
        Serial.print( rcode, HEX );                                          
        return( rcode );
     fae:	bd 2c       	mov	r11, r13
     fb0:	bb 1c       	adc	r11, r11
     fb2:	bb 24       	eor	r11, r11
     fb4:	bb 1c       	adc	r11, r11
    }
    //Serial.println( direction, HEX ); 
    if( dataptr != NULL ) {                         //data stage, if present
     fb6:	41 14       	cp	r4, r1
     fb8:	51 04       	cpc	r5, r1
     fba:	e1 f0       	breq	.+56     	; 0xff4 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xc6>
        rcode = ctrlData( addr, ep, nbytes, dataptr, direction );
     fbc:	c3 01       	movw	r24, r6
     fbe:	61 2f       	mov	r22, r17
     fc0:	4f 2d       	mov	r20, r15
     fc2:	94 01       	movw	r18, r8
     fc4:	82 01       	movw	r16, r4
     fc6:	eb 2c       	mov	r14, r11
     fc8:	c1 2c       	mov	r12, r1
     fca:	ed e7       	ldi	r30, 0x7D	; 125
     fcc:	de 2e       	mov	r13, r30
     fce:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN3USB8ctrlDataEhhjPchj>
     fd2:	08 2f       	mov	r16, r24
    }
    if( rcode ) {   //return error
     fd4:	88 23       	and	r24, r24
     fd6:	71 f0       	breq	.+28     	; 0xff4 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xc6>
        Serial.print("Data packet error: ");
     fd8:	81 e9       	ldi	r24, 0x91	; 145
     fda:	97 e0       	ldi	r25, 0x07	; 7
     fdc:	65 e8       	ldi	r22, 0x85	; 133
     fde:	72 e0       	ldi	r23, 0x02	; 2
     fe0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print5printEPKc>
        Serial.print( rcode, HEX );                                          
     fe4:	81 e9       	ldi	r24, 0x91	; 145
     fe6:	97 e0       	ldi	r25, 0x07	; 7
     fe8:	60 2f       	mov	r22, r16
     fea:	40 e1       	ldi	r20, 0x10	; 16
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN5Print5printEhi>
     ff2:	08 c0       	rjmp	.+16     	; 0x1004 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xd6>
        return( rcode );
    }
    rcode = ctrlStatus( ep, direction );                //status stage
     ff4:	c3 01       	movw	r24, r6
     ff6:	6f 2d       	mov	r22, r15
     ff8:	4b 2d       	mov	r20, r11
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	3d e7       	ldi	r19, 0x7D	; 125
     ffe:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_ZN3USB10ctrlStatusEhhj>
    1002:	08 2f       	mov	r16, r24
    return( rcode );
}
    1004:	80 2f       	mov	r24, r16
    1006:	28 96       	adiw	r28, 0x08	; 8
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	7f 90       	pop	r7
    102c:	6f 90       	pop	r6
    102e:	5f 90       	pop	r5
    1030:	4f 90       	pop	r4
    1032:	08 95       	ret

00001034 <_ZN3USB4TaskEv>:
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
/* USB main task. Performs enumeration/cleanup */
void USB::Task( void )      //USB state machine
    1034:	8f 92       	push	r8
    1036:	9f 92       	push	r9
    1038:	af 92       	push	r10
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	62 97       	sbiw	r28, 0x12	; 18
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	08 2f       	mov	r16, r24
    105c:	e9 2e       	mov	r14, r25
  static byte tmpaddr; 
  byte tmpdata;
  static unsigned long delay = 0;
  USB_DEVICE_DESCRIPTOR buf;
  /**/
    tmpdata = getVbusState();
    105e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN8MAX3421E12getVbusStateEv>
//
//    Serial.print("\n");
    /**/
    /* modify USB task state if Vbus changed */

    switch( tmpdata ) {
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	29 f0       	breq	.+10     	; 0x1070 <_ZN3USB4TaskEv+0x3c>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	28 f0       	brcs	.+10     	; 0x1074 <_ZN3USB4TaskEv+0x40>
    106a:	84 30       	cpi	r24, 0x04	; 4
    106c:	00 f5       	brcc	.+64     	; 0x10ae <_ZN3USB4TaskEv+0x7a>
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <_ZN3USB4TaskEv+0x4e>
        case SE1:   //illegal state
            usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1070:	83 e1       	ldi	r24, 0x13	; 19
    1072:	1b c0       	rjmp	.+54     	; 0x10aa <_ZN3USB4TaskEv+0x76>
            break;
        case SE0:   //disconnected
            if(( usb_task_state & USB_STATE_MASK ) != USB_STATE_DETACHED ) {
    1074:	80 91 6a 05 	lds	r24, 0x056A
    1078:	80 7f       	andi	r24, 0xF0	; 240
    107a:	80 31       	cpi	r24, 0x10	; 16
    107c:	c1 f0       	breq	.+48     	; 0x10ae <_ZN3USB4TaskEv+0x7a>
                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    107e:	81 e1       	ldi	r24, 0x11	; 17
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <_ZN3USB4TaskEv+0x76>
            }
            break;
        case FSHOST:    //attached
        case LSHOST:
            if(( usb_task_state & USB_STATE_MASK ) == USB_STATE_DETACHED ) {
    1082:	80 91 6a 05 	lds	r24, 0x056A
    1086:	80 7f       	andi	r24, 0xF0	; 240
    1088:	80 31       	cpi	r24, 0x10	; 16
    108a:	89 f4       	brne	.+34     	; 0x10ae <_ZN3USB4TaskEv+0x7a>
                delay = millis() + USB_SETTLE_DELAY;
    108c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
    1090:	68 53       	subi	r22, 0x38	; 56
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	60 93 6c 05 	sts	0x056C, r22
    109c:	70 93 6d 05 	sts	0x056D, r23
    10a0:	80 93 6e 05 	sts	0x056E, r24
    10a4:	90 93 6f 05 	sts	0x056F, r25
                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	80 93 6a 05 	sts	0x056A, r24
            }
            break;
        }// switch( tmpdata
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
    10ae:	10 91 6a 05 	lds	r17, 0x056A
    10b2:	10 34       	cpi	r17, 0x40	; 64
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_ZN3USB4TaskEv+0x84>
    10b6:	48 c0       	rjmp	.+144    	; 0x1148 <_ZN3USB4TaskEv+0x114>
    10b8:	11 34       	cpi	r17, 0x41	; 65
    10ba:	40 f4       	brcc	.+16     	; 0x10cc <_ZN3USB4TaskEv+0x98>
    10bc:	10 32       	cpi	r17, 0x20	; 32
    10be:	61 f1       	breq	.+88     	; 0x1118 <_ZN3USB4TaskEv+0xe4>
    10c0:	10 33       	cpi	r17, 0x30	; 48
    10c2:	e1 f1       	breq	.+120    	; 0x113c <_ZN3USB4TaskEv+0x108>
    10c4:	11 31       	cpi	r17, 0x11	; 17
    10c6:	09 f0       	breq	.+2      	; 0x10ca <_ZN3USB4TaskEv+0x96>
    10c8:	f2 c0       	rjmp	.+484    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
    10ca:	0a c0       	rjmp	.+20     	; 0x10e0 <_ZN3USB4TaskEv+0xac>
    10cc:	10 36       	cpi	r17, 0x60	; 96
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <_ZN3USB4TaskEv+0x9e>
    10d0:	77 c0       	rjmp	.+238    	; 0x11c0 <_ZN3USB4TaskEv+0x18c>
    10d2:	10 37       	cpi	r17, 0x70	; 112
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <_ZN3USB4TaskEv+0xa4>
    10d6:	aa c0       	rjmp	.+340    	; 0x122c <_ZN3USB4TaskEv+0x1f8>
    10d8:	10 35       	cpi	r17, 0x50	; 80
    10da:	09 f0       	breq	.+2      	; 0x10de <_ZN3USB4TaskEv+0xaa>
    10dc:	e8 c0       	rjmp	.+464    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
    10de:	57 c0       	rjmp	.+174    	; 0x118e <_ZN3USB4TaskEv+0x15a>
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    10e0:	10 92 5c 05 	sts	0x055C, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    10e4:	10 92 5e 05 	sts	0x055E, r1
    10e8:	10 92 5d 05 	sts	0x055D, r1
        devtable[ i ].devclass = 0;
    10ec:	10 92 5f 05 	sts	0x055F, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    10f0:	10 92 61 05 	sts	0x0561, r1
    10f4:	10 92 60 05 	sts	0x0560, r1
        devtable[ i ].devclass = 0;
    10f8:	10 92 62 05 	sts	0x0562, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    10fc:	83 e6       	ldi	r24, 0x63	; 99
    10fe:	95 e0       	ldi	r25, 0x05	; 5
    1100:	90 93 5b 05 	sts	0x055B, r25
    1104:	80 93 5a 05 	sts	0x055A, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	80 93 68 05 	sts	0x0568, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	80 93 69 05 	sts	0x0569, r24
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
        case USB_DETACHED_SUBSTATE_INITIALIZE:
            init();
            usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1114:	82 e1       	ldi	r24, 0x12	; 18
    1116:	c9 c0       	rjmp	.+402    	; 0x12aa <_ZN3USB4TaskEv+0x276>
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE:     //just sit here
            break;
        case USB_DETACHED_SUBSTATE_ILLEGAL:             //just sit here
            break;
        case USB_ATTACHED_SUBSTATE_SETTLE:              //setlle time for just attached device                  
            if( delay < millis() ) {
    1118:	e0 90 6c 05 	lds	r14, 0x056C
    111c:	f0 90 6d 05 	lds	r15, 0x056D
    1120:	00 91 6e 05 	lds	r16, 0x056E
    1124:	10 91 6f 05 	lds	r17, 0x056F
    1128:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
    112c:	e6 16       	cp	r14, r22
    112e:	f7 06       	cpc	r15, r23
    1130:	08 07       	cpc	r16, r24
    1132:	19 07       	cpc	r17, r25
    1134:	08 f0       	brcs	.+2      	; 0x1138 <_ZN3USB4TaskEv+0x104>
    1136:	bb c0       	rjmp	.+374    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1138:	80 e3       	ldi	r24, 0x30	; 48
    113a:	b7 c0       	rjmp	.+366    	; 0x12aa <_ZN3USB4TaskEv+0x276>
            }
            break;
        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
            regWr( rHCTL, bmBUSRST );                   //issue bus reset
    113c:	88 ee       	ldi	r24, 0xE8	; 232
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
            usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1144:	80 e4       	ldi	r24, 0x40	; 64
    1146:	b1 c0       	rjmp	.+354    	; 0x12aa <_ZN3USB4TaskEv+0x276>
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
            if(( regRd( rHCTL ) & bmBUSRST ) == 0 ) {
    1148:	80 2f       	mov	r24, r16
    114a:	9e 2d       	mov	r25, r14
    114c:	68 ee       	ldi	r22, 0xE8	; 232
    114e:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
    1152:	80 fd       	sbrc	r24, 0
    1154:	ac c0       	rjmp	.+344    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
                tmpdata = regRd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    1156:	80 2f       	mov	r24, r16
    1158:	9e 2d       	mov	r25, r14
    115a:	68 ed       	ldi	r22, 0xD8	; 216
    115c:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
                regWr( rMODE, tmpdata );
    1160:	68 2f       	mov	r22, r24
    1162:	68 60       	ori	r22, 0x08	; 8
    1164:	88 ed       	ldi	r24, 0xD8	; 216
    1166:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN8MAX3421E5regWrEhh>
//                  regWr( rMODE, bmSOFKAENAB );
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    116a:	80 e5       	ldi	r24, 0x50	; 80
    116c:	80 93 6a 05 	sts	0x056A, r24
                delay = millis() + 20; //20ms wait after reset per USB spec
    1170:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
    1174:	6c 5e       	subi	r22, 0xEC	; 236
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	60 93 6c 05 	sts	0x056C, r22
    1180:	70 93 6d 05 	sts	0x056D, r23
    1184:	80 93 6e 05 	sts	0x056E, r24
    1188:	90 93 6f 05 	sts	0x056F, r25
    118c:	90 c0       	rjmp	.+288    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
            }
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_SOF:  //todo: change check order
            if( regRd( rHIRQ ) & bmFRAMEIRQ ) {                         //when first SOF received we can continue
    118e:	80 2f       	mov	r24, r16
    1190:	9e 2d       	mov	r25, r14
    1192:	68 ec       	ldi	r22, 0xC8	; 200
    1194:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN8MAX3421E5regRdEh>
    1198:	86 ff       	sbrs	r24, 6
    119a:	89 c0       	rjmp	.+274    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
              if( delay < millis() ) {                                    //20ms passed
    119c:	e0 90 6c 05 	lds	r14, 0x056C
    11a0:	f0 90 6d 05 	lds	r15, 0x056D
    11a4:	00 91 6e 05 	lds	r16, 0x056E
    11a8:	10 91 6f 05 	lds	r17, 0x056F
    11ac:	0e 94 d7 13 	call	0x27ae	; 0x27ae <millis>
    11b0:	e6 16       	cp	r14, r22
    11b2:	f7 06       	cpc	r15, r23
    11b4:	08 07       	cpc	r16, r24
    11b6:	19 07       	cpc	r17, r25
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <_ZN3USB4TaskEv+0x188>
    11ba:	79 c0       	rjmp	.+242    	; 0x12ae <_ZN3USB4TaskEv+0x27a>
                usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    11bc:	80 e6       	ldi	r24, 0x60	; 96
    11be:	75 c0       	rjmp	.+234    	; 0x12aa <_ZN3USB4TaskEv+0x276>
              }
            }
            break;
        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
            // toggle( BPNT_0 );
            devtable[ 0 ].epinfo->MaxPktSize = 8;   //set max.packet size to min.allowed
    11c0:	e0 91 5a 05 	lds	r30, 0x055A
    11c4:	f0 91 5b 05 	lds	r31, 0x055B
    11c8:	88 e0       	ldi	r24, 0x08	; 8
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	93 83       	std	Z+3, r25	; 0x03
    11ce:	82 83       	std	Z+2, r24	; 0x02
        void init();
};

//get device descriptor
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <_ZN3USB4TaskEv+0x19e>
    11d2:	0f 92       	push	r0
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	ed b7       	in	r30, 0x3d	; 61
    11da:	fe b7       	in	r31, 0x3e	; 62
    11dc:	92 83       	std	Z+2, r25	; 0x02
    11de:	81 83       	std	Z+1, r24	; 0x01
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	9d e7       	ldi	r25, 0x7D	; 125
    11e4:	94 83       	std	Z+4, r25	; 0x04
    11e6:	83 83       	std	Z+3, r24	; 0x03
    11e8:	80 2f       	mov	r24, r16
    11ea:	9e 2d       	mov	r25, r14
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	20 e8       	ldi	r18, 0x80	; 128
    11f2:	06 e0       	ldi	r16, 0x06	; 6
    11f4:	ee 24       	eor	r14, r14
    11f6:	cc 24       	eor	r12, r12
    11f8:	c3 94       	inc	r12
    11fa:	aa 24       	eor	r10, r10
    11fc:	bb 24       	eor	r11, r11
    11fe:	f8 e0       	ldi	r31, 0x08	; 8
    1200:	8f 2e       	mov	r8, r31
    1202:	91 2c       	mov	r9, r1
    1204:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>
            rcode = getDevDescr( 0, 0, 8, ( char* )&buf );
            if( rcode == 0 ) {
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	88 23       	and	r24, r24
    1212:	49 f4       	brne	.+18     	; 0x1226 <_ZN3USB4TaskEv+0x1f2>
                devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    1214:	e0 91 5a 05 	lds	r30, 0x055A
    1218:	f0 91 5b 05 	lds	r31, 0x055B
    121c:	88 85       	ldd	r24, Y+8	; 0x08
    121e:	82 83       	std	Z+2, r24	; 0x02
    1220:	13 82       	std	Z+3, r1	; 0x03
                usb_task_state = USB_STATE_ADDRESSING;
    1222:	80 e7       	ldi	r24, 0x70	; 112
    1224:	42 c0       	rjmp	.+132    	; 0x12aa <_ZN3USB4TaskEv+0x276>
            }
            else {
                usb_error = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    1226:	10 93 6b 05 	sts	0x056B, r17
    122a:	3e c0       	rjmp	.+124    	; 0x12a8 <_ZN3USB4TaskEv+0x274>
                usb_task_state = USB_STATE_ERROR;
            }
            break;
        case USB_STATE_ADDRESSING:
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
    122c:	80 91 5d 05 	lds	r24, 0x055D
    1230:	90 91 5e 05 	lds	r25, 0x055E
    1234:	89 2b       	or	r24, r25
    1236:	89 f5       	brne	.+98     	; 0x129a <_ZN3USB4TaskEv+0x266>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    1238:	80 91 5a 05 	lds	r24, 0x055A
    123c:	90 91 5b 05 	lds	r25, 0x055B
    1240:	90 93 5e 05 	sts	0x055E, r25
    1244:	80 93 5d 05 	sts	0x055D, r24
inline byte USB::getStrDescr( byte addr, byte ep, unsigned int nbytes, byte index, unsigned int langid, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, nbytes, dataptr, nak_limit ));
}
//set address 
inline byte USB::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
    1248:	00 d0       	rcall	.+0      	; 0x124a <_ZN3USB4TaskEv+0x216>
    124a:	0f 92       	push	r0
    124c:	ed b7       	in	r30, 0x3d	; 61
    124e:	fe b7       	in	r31, 0x3e	; 62
    1250:	12 82       	std	Z+2, r1	; 0x02
    1252:	11 82       	std	Z+1, r1	; 0x01
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	9d e7       	ldi	r25, 0x7D	; 125
    1258:	94 83       	std	Z+4, r25	; 0x04
    125a:	83 83       	std	Z+3, r24	; 0x03
    125c:	80 2f       	mov	r24, r16
    125e:	9e 2d       	mov	r25, r14
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	05 e0       	ldi	r16, 0x05	; 5
    1268:	ee 24       	eor	r14, r14
    126a:	e3 94       	inc	r14
    126c:	cc 24       	eor	r12, r12
    126e:	aa 24       	eor	r10, r10
    1270:	bb 24       	eor	r11, r11
    1272:	88 24       	eor	r8, r8
    1274:	99 24       	eor	r9, r9
    1276:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>
                                                                        //temporary record
                                                                        //until plugged with real device endpoint structure
                    rcode = setAddr( 0, 0, i );
                    if( rcode == 0 ) {
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	88 23       	and	r24, r24
    1284:	29 f4       	brne	.+10     	; 0x1290 <_ZN3USB4TaskEv+0x25c>
                        tmpaddr = i;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 70 05 	sts	0x0570, r24
                        usb_task_state = USB_STATE_CONFIGURING;
    128c:	80 e8       	ldi	r24, 0x80	; 128
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <_ZN3USB4TaskEv+0x262>
                    }
                    else {
                        usb_error = USB_STATE_ADDRESSING;          //set address error
    1290:	10 93 6b 05 	sts	0x056B, r17
                        usb_task_state = USB_STATE_ERROR;
    1294:	80 ea       	ldi	r24, 0xA0	; 160
    1296:	80 93 6a 05 	sts	0x056A, r24
                    }
                    break;  //break if address assigned or error occured during address assignment attempt                      
                }
            }//for( i = 1; i < USB_NUMDEVICES; i++
            if( usb_task_state == USB_STATE_ADDRESSING ) {     //no vacant place in devtable
    129a:	80 91 6a 05 	lds	r24, 0x056A
    129e:	80 37       	cpi	r24, 0x70	; 112
    12a0:	31 f4       	brne	.+12     	; 0x12ae <_ZN3USB4TaskEv+0x27a>
                usb_error = 0xfe;
    12a2:	8e ef       	ldi	r24, 0xFE	; 254
    12a4:	80 93 6b 05 	sts	0x056B, r24
                usb_task_state = USB_STATE_ERROR;
    12a8:	80 ea       	ldi	r24, 0xA0	; 160
    12aa:	80 93 6a 05 	sts	0x056A, r24
        case USB_STATE_RUNNING:
            break;
        case USB_STATE_ERROR:
            break;
    }// switch( usb_task_state
}    
    12ae:	62 96       	adiw	r28, 0x12	; 18
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	08 95       	ret

000012d2 <_ZN3USBC1Ev>:
EP_RECORD dev0ep;           //Endpoint data structure used during enumeration for uninitialized device


/* constructor */

USB::USB () {
    12d2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN8MAX3421EC2Ev>
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    12d6:	81 e1       	ldi	r24, 0x11	; 17
    12d8:	80 93 6a 05 	sts	0x056A, r24
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    12dc:	10 92 5c 05 	sts	0x055C, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    12e0:	10 92 5e 05 	sts	0x055E, r1
    12e4:	10 92 5d 05 	sts	0x055D, r1
        devtable[ i ].devclass = 0;
    12e8:	10 92 5f 05 	sts	0x055F, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    12ec:	10 92 61 05 	sts	0x0561, r1
    12f0:	10 92 60 05 	sts	0x0560, r1
        devtable[ i ].devclass = 0;
    12f4:	10 92 62 05 	sts	0x0562, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    12f8:	83 e6       	ldi	r24, 0x63	; 99
    12fa:	95 e0       	ldi	r25, 0x05	; 5
    12fc:	90 93 5b 05 	sts	0x055B, r25
    1300:	80 93 5a 05 	sts	0x055A, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    1304:	80 e4       	ldi	r24, 0x40	; 64
    1306:	80 93 68 05 	sts	0x0568, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    130a:	80 e1       	ldi	r24, 0x10	; 16
    130c:	80 93 69 05 	sts	0x0569, r24
/* constructor */

USB::USB () {
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    init(); 
}
    1310:	08 95       	ret

00001312 <_ZN16AndroidAccessory5writeEh>:
{
    usb.outTransfer(1, out, len, (char *)buff);
    return len;
}

size_t AndroidAccessory::write(uint8_t c) {
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	fc 01       	movw	r30, r24
    131e:	69 83       	std	Y+1, r22	; 0x01
  return write(&c, 1);
    1320:	a0 81       	ld	r26, Z
    1322:	b1 81       	ldd	r27, Z+1	; 0x01
    1324:	1c 96       	adiw	r26, 0x0c	; 12
    1326:	2d 91       	ld	r18, X+
    1328:	3c 91       	ld	r19, X
    132a:	1d 97       	sbiw	r26, 0x0d	; 13
    132c:	be 01       	movw	r22, r28
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	19 95       	eicall
}
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <_ZN16AndroidAccessory5flushEv>:

    from <http://arduino.cc/en/Serial/Flush>

    We're treating this as a no-op at the moment.
  */
}
    1342:	08 95       	ret

00001344 <_ZN16AndroidAccessory5writeEPhj>:
int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
}

size_t AndroidAccessory::write(uint8_t *buff, size_t len)
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	fc 01       	movw	r30, r24
    1352:	8b 01       	movw	r16, r22
    1354:	d4 2e       	mov	r13, r20
    1356:	c5 2e       	mov	r12, r21
{
    usb.outTransfer(1, out, len, (char *)buff);
    1358:	49 96       	adiw	r24, 0x19	; 25
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	44 8d       	ldd	r20, Z+28	; 0x1c
    135e:	2d 2d       	mov	r18, r13
    1360:	35 2f       	mov	r19, r21
    1362:	e1 2c       	mov	r14, r1
    1364:	5d e7       	ldi	r21, 0x7D	; 125
    1366:	f5 2e       	mov	r15, r21
    1368:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN3USB11outTransferEhhjPcj>
    return len;
}
    136c:	8d 2d       	mov	r24, r13
    136e:	9c 2d       	mov	r25, r12
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	08 95       	ret

0000137e <_ZN16AndroidAccessory4readEPvij>:
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}

int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	fc 01       	movw	r30, r24
    1388:	8b 01       	movw	r16, r22
    138a:	da 01       	movw	r26, r20
    138c:	79 01       	movw	r14, r18
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
    138e:	49 96       	adiw	r24, 0x19	; 25
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	43 8d       	ldd	r20, Z+27	; 0x1b
    1394:	9d 01       	movw	r18, r26
    1396:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN3USB13newInTransferEhhjPcj>
}
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <_ZN16AndroidAccessory16refillDataBufferEv>:

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}

void AndroidAccessory::refillDataBuffer() {
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	fc 01       	movw	r30, r24
  int bytesRead = 0;

  numBytesInDataBuff = nextByteInDataBuffOffset = 0;
    13aa:	e9 56       	subi	r30, 0x69	; 105
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	11 82       	std	Z+1, r1	; 0x01
    13b0:	10 82       	st	Z, r1
    13b2:	e7 59       	subi	r30, 0x97	; 151
    13b4:	f1 40       	sbci	r31, 0x01	; 1
    13b6:	ef 01       	movw	r28, r30
    13b8:	cb 56       	subi	r28, 0x6B	; 107
    13ba:	de 4f       	sbci	r29, 0xFE	; 254
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	18 82       	st	Y, r1
  
  // TODO: Add is connected check?

  bytesRead = read(dataBuff, sizeof(dataBuff));
    13c0:	cf 01       	movw	r24, r30
    13c2:	eb 5a       	subi	r30, 0xAB	; 171
    13c4:	fe 4f       	sbci	r31, 0xFE	; 254
    13c6:	bf 01       	movw	r22, r30
    13c8:	40 e4       	ldi	r20, 0x40	; 64
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3d e7       	ldi	r19, 0x7D	; 125
    13d0:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN16AndroidAccessory4readEPvij>

  if (bytesRead >= 1) {
    13d4:	18 16       	cp	r1, r24
    13d6:	19 06       	cpc	r1, r25
    13d8:	14 f4       	brge	.+4      	; 0x13de <_ZN16AndroidAccessory16refillDataBufferEv+0x3a>
    numBytesInDataBuff = bytesRead;
    13da:	99 83       	std	Y+1, r25	; 0x01
    13dc:	88 83       	st	Y, r24
  }
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <_ZN16AndroidAccessory9availableEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
}

int AndroidAccessory::available() {
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
  // Strictly speaking this doesn't meet the "This is only for bytes
  // that have already arrived" definition from
  // <http://arduino.cc/en/Reference/StreamAvailable> but since the
  // data isn't handled by an ISR it's the only way to avoid hanging
  // waiting for `available()` to return true.
  if (dataBufferIsEmpty()) {
    13ea:	fc 01       	movw	r30, r24
    13ec:	eb 56       	subi	r30, 0x6B	; 107
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	c9 56       	subi	r28, 0x69	; 105
    13f2:	de 4f       	sbci	r29, 0xFE	; 254
    13f4:	20 81       	ld	r18, Z
    13f6:	31 81       	ldd	r19, Z+1	; 0x01
    13f8:	88 81       	ld	r24, Y
    13fa:	99 81       	ldd	r25, Y+1	; 0x01
    13fc:	c7 59       	subi	r28, 0x97	; 151
    13fe:	d1 40       	sbci	r29, 0x01	; 1
    1400:	28 17       	cp	r18, r24
    1402:	39 07       	cpc	r19, r25
    1404:	19 f4       	brne	.+6      	; 0x140c <_ZN16AndroidAccessory9availableEv+0x28>
    refillDataBuffer();
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN16AndroidAccessory16refillDataBufferEv>
    140c:	fe 01       	movw	r30, r28
    140e:	e9 56       	subi	r30, 0x69	; 105
    1410:	fe 4f       	sbci	r31, 0xFE	; 254
    1412:	cb 56       	subi	r28, 0x6B	; 107
    1414:	de 4f       	sbci	r29, 0xFE	; 254
    1416:	28 81       	ld	r18, Y
    1418:	39 81       	ldd	r19, Y+1	; 0x01
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	28 1b       	sub	r18, r24
    1420:	39 0b       	sbc	r19, r25
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}
    1422:	c9 01       	movw	r24, r18
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <_ZN16AndroidAccessory4peekEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
}

int AndroidAccessory::peek() {
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ec 01       	movw	r28, r24

  if (dataBufferIsEmpty()) {
    1430:	fc 01       	movw	r30, r24
    1432:	eb 56       	subi	r30, 0x6B	; 107
    1434:	fe 4f       	sbci	r31, 0xFE	; 254
    1436:	c9 56       	subi	r28, 0x69	; 105
    1438:	de 4f       	sbci	r29, 0xFE	; 254
    143a:	20 81       	ld	r18, Z
    143c:	31 81       	ldd	r19, Z+1	; 0x01
    143e:	88 81       	ld	r24, Y
    1440:	99 81       	ldd	r25, Y+1	; 0x01
    1442:	c7 59       	subi	r28, 0x97	; 151
    1444:	d1 40       	sbci	r29, 0x01	; 1
    1446:	28 17       	cp	r18, r24
    1448:	39 07       	cpc	r19, r25
    144a:	19 f4       	brne	.+6      	; 0x1452 <_ZN16AndroidAccessory4peekEv+0x28>
    refillDataBuffer();
    144c:	ce 01       	movw	r24, r28
    144e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    1452:	c9 56       	subi	r28, 0x69	; 105
    1454:	de 4f       	sbci	r29, 0xFE	; 254
    1456:	28 81       	ld	r18, Y
    1458:	39 81       	ldd	r19, Y+1	; 0x01

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
    145a:	9a 91       	ld	r25, -Y
    145c:	8a 91       	ld	r24, -Y
    145e:	c5 59       	subi	r28, 0x95	; 149
    1460:	d1 40       	sbci	r29, 0x01	; 1
    1462:	82 17       	cp	r24, r18
    1464:	93 07       	cpc	r25, r19
    1466:	19 f4       	brne	.+6      	; 0x146e <_ZN16AndroidAccessory4peekEv+0x44>
    1468:	ef ef       	ldi	r30, 0xFF	; 255
    146a:	ff ef       	ldi	r31, 0xFF	; 255
    146c:	07 c0       	rjmp	.+14     	; 0x147c <_ZN16AndroidAccessory4peekEv+0x52>
    146e:	c2 0f       	add	r28, r18
    1470:	d3 1f       	adc	r29, r19
    1472:	cb 5a       	subi	r28, 0xAB	; 171
    1474:	de 4f       	sbci	r29, 0xFE	; 254
    1476:	88 81       	ld	r24, Y
    1478:	e8 2f       	mov	r30, r24
    147a:	f0 e0       	ldi	r31, 0x00	; 0
}
    147c:	cf 01       	movw	r24, r30
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <_ZN16AndroidAccessory4readEv>:
  if (bytesRead >= 1) {
    numBytesInDataBuff = bytesRead;
  }
}

int AndroidAccessory::read() {
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24

  if (dataBufferIsEmpty()) {
    148a:	fc 01       	movw	r30, r24
    148c:	eb 56       	subi	r30, 0x6B	; 107
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	c9 56       	subi	r28, 0x69	; 105
    1492:	de 4f       	sbci	r29, 0xFE	; 254
    1494:	20 81       	ld	r18, Z
    1496:	31 81       	ldd	r19, Z+1	; 0x01
    1498:	88 81       	ld	r24, Y
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	c7 59       	subi	r28, 0x97	; 151
    149e:	d1 40       	sbci	r29, 0x01	; 1
    14a0:	28 17       	cp	r18, r24
    14a2:	39 07       	cpc	r19, r25
    14a4:	19 f4       	brne	.+6      	; 0x14ac <_ZN16AndroidAccessory4readEv+0x28>
    refillDataBuffer();
    14a6:	ce 01       	movw	r24, r28
    14a8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    14ac:	de 01       	movw	r26, r28
    14ae:	a9 56       	subi	r26, 0x69	; 105
    14b0:	be 4f       	sbci	r27, 0xFE	; 254
    14b2:	2d 91       	ld	r18, X+
    14b4:	3c 91       	ld	r19, X
    14b6:	11 97       	sbiw	r26, 0x01	; 1

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
    14b8:	cb 56       	subi	r28, 0x6B	; 107
    14ba:	de 4f       	sbci	r29, 0xFE	; 254
    14bc:	88 81       	ld	r24, Y
    14be:	99 81       	ldd	r25, Y+1	; 0x01
    14c0:	c5 59       	subi	r28, 0x95	; 149
    14c2:	d1 40       	sbci	r29, 0x01	; 1
    14c4:	82 17       	cp	r24, r18
    14c6:	93 07       	cpc	r25, r19
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <_ZN16AndroidAccessory4readEv+0x4c>
    14ca:	ef ef       	ldi	r30, 0xFF	; 255
    14cc:	ff ef       	ldi	r31, 0xFF	; 255
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <_ZN16AndroidAccessory4readEv+0x62>
    14d0:	c2 0f       	add	r28, r18
    14d2:	d3 1f       	adc	r29, r19
    14d4:	cb 5a       	subi	r28, 0xAB	; 171
    14d6:	de 4f       	sbci	r29, 0xFE	; 254
    14d8:	88 81       	ld	r24, Y
    14da:	e8 2f       	mov	r30, r24
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	2f 5f       	subi	r18, 0xFF	; 255
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	2d 93       	st	X+, r18
    14e4:	3c 93       	st	X, r19
}
    14e6:	cf 01       	movw	r24, r30
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <_ZN16AndroidAccessory11getProtocolEh>:
{
    max.powerOn();
    delay(200);
}

int AndroidAccessory::getProtocol(byte addr)
    14ee:	8f 92       	push	r8
    14f0:	9f 92       	push	r9
    14f2:	af 92       	push	r10
    14f4:	bf 92       	push	r11
    14f6:	cf 92       	push	r12
    14f8:	ef 92       	push	r14
    14fa:	0f 93       	push	r16
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	0f 92       	push	r0
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
{
    uint16_t protocol = -1;
    1508:	2f ef       	ldi	r18, 0xFF	; 255
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	3a 83       	std	Y+2, r19	; 0x02
    150e:	29 83       	std	Y+1, r18	; 0x01
    usb.ctrlReq(addr, 0,
                USB_SETUP_DEVICE_TO_HOST |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    1510:	00 d0       	rcall	.+0      	; 0x1512 <_ZN16AndroidAccessory11getProtocolEh+0x24>
    1512:	0f 92       	push	r0
    1514:	9e 01       	movw	r18, r28
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	ed b7       	in	r30, 0x3d	; 61
    151c:	fe b7       	in	r31, 0x3e	; 62
    151e:	32 83       	std	Z+2, r19	; 0x02
    1520:	21 83       	std	Z+1, r18	; 0x01
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3d e7       	ldi	r19, 0x7D	; 125
    1526:	34 83       	std	Z+4, r19	; 0x04
    1528:	23 83       	std	Z+3, r18	; 0x03
    152a:	49 96       	adiw	r24, 0x19	; 25
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	20 ec       	ldi	r18, 0xC0	; 192
    1530:	03 e3       	ldi	r16, 0x33	; 51
    1532:	ee 24       	eor	r14, r14
    1534:	cc 24       	eor	r12, r12
    1536:	aa 24       	eor	r10, r10
    1538:	bb 24       	eor	r11, r11
    153a:	72 e0       	ldi	r23, 0x02	; 2
    153c:	87 2e       	mov	r8, r23
    153e:	91 2c       	mov	r9, r1
    1540:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    return protocol;
}
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	0f 91       	pop	r16
    155a:	ef 90       	pop	r14
    155c:	cf 90       	pop	r12
    155e:	bf 90       	pop	r11
    1560:	af 90       	pop	r10
    1562:	9f 90       	pop	r9
    1564:	8f 90       	pop	r8
    1566:	08 95       	ret

00001568 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>:

    return true;
}

// Finds the first bulk IN and bulk OUT endpoints
bool AndroidAccessory::findEndpoints(byte addr, EP_RECORD *inEp, EP_RECORD *outEp)
    1568:	2f 92       	push	r2
    156a:	3f 92       	push	r3
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	ef 92       	push	r14
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x22>
    158a:	00 d0       	rcall	.+0      	; 0x158c <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x24>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	16 2f       	mov	r17, r22
    1596:	1a 01       	movw	r2, r20
    1598:	3c 83       	std	Y+4, r19	; 0x04
    159a:	2b 83       	std	Y+3, r18	; 0x03
{
    int len;
    byte err;
    uint8_t *p;

    err = usb.getConfDescr(addr, 0, 4, 0, (char *)descBuff);
    159c:	49 96       	adiw	r24, 0x19	; 25
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	65 e5       	ldi	r22, 0x55	; 85
    15a4:	46 2e       	mov	r4, r22
    15a6:	51 2c       	mov	r5, r1
    15a8:	4d 81       	ldd	r20, Y+5	; 0x05
    15aa:	5e 81       	ldd	r21, Y+6	; 0x06
    15ac:	44 0e       	add	r4, r20
    15ae:	55 1e       	adc	r5, r21
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
}
//get configuration descriptor  
inline byte USB::getConfDescr( byte addr, byte ep, unsigned int nbytes, byte conf, char* dataptr, unsigned int nak_limit ) {
        return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, dataptr, nak_limit ));
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x4a>
    15b2:	0f 92       	push	r0
    15b4:	ad b7       	in	r26, 0x3d	; 61
    15b6:	be b7       	in	r27, 0x3e	; 62
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	5c 92       	st	X, r5
    15bc:	4e 92       	st	-X, r4
    15be:	11 97       	sbiw	r26, 0x01	; 1
    15c0:	e0 e0       	ldi	r30, 0x00	; 0
    15c2:	fd e7       	ldi	r31, 0x7D	; 125
    15c4:	14 96       	adiw	r26, 0x04	; 4
    15c6:	fc 93       	st	X, r31
    15c8:	ee 93       	st	-X, r30
    15ca:	13 97       	sbiw	r26, 0x03	; 3
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	61 2f       	mov	r22, r17
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	20 e8       	ldi	r18, 0x80	; 128
    15d6:	06 e0       	ldi	r16, 0x06	; 6
    15d8:	ee 24       	eor	r14, r14
    15da:	52 e0       	ldi	r21, 0x02	; 2
    15dc:	c5 2e       	mov	r12, r21
    15de:	aa 24       	eor	r10, r10
    15e0:	bb 24       	eor	r11, r11
    15e2:	34 e0       	ldi	r19, 0x04	; 4
    15e4:	83 2e       	mov	r8, r19
    15e6:	91 2c       	mov	r9, r1
    15e8:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    if (err) {
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	88 23       	and	r24, r24
    15f6:	29 f0       	breq	.+10     	; 0x1602 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x9a>
        Serial.print(F("Can't get config descriptor length\n"));
    15f8:	81 e9       	ldi	r24, 0x91	; 145
    15fa:	97 e0       	ldi	r25, 0x07	; 7
    15fc:	68 e5       	ldi	r22, 0x58	; 88
    15fe:	72 e0       	ldi	r23, 0x02	; 2
    1600:	3c c0       	rjmp	.+120    	; 0x167a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x112>
        return false;
    }


    len = descBuff[2] | ((int)descBuff[3] << 8);
    if (len > sizeof(descBuff)) {
    1602:	4d 81       	ldd	r20, Y+5	; 0x05
    1604:	5e 81       	ldd	r21, Y+6	; 0x06
    1606:	48 5a       	subi	r20, 0xA8	; 168
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	da 01       	movw	r26, r20
    160c:	9c 91       	ld	r25, X
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	2e 91       	ld	r18, -X
    1612:	a7 55       	subi	r26, 0x57	; 87
    1614:	b0 40       	sbci	r27, 0x00	; 0
    1616:	be 83       	std	Y+6, r27	; 0x06
    1618:	ad 83       	std	Y+5, r26	; 0x05
    161a:	62 2e       	mov	r6, r18
    161c:	77 24       	eor	r7, r7
    161e:	68 2a       	or	r6, r24
    1620:	79 2a       	or	r7, r25
    1622:	b1 e0       	ldi	r27, 0x01	; 1
    1624:	6b 16       	cp	r6, r27
    1626:	b1 e0       	ldi	r27, 0x01	; 1
    1628:	7b 06       	cpc	r7, r27
    162a:	28 f0       	brcs	.+10     	; 0x1636 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xce>
        Serial.print(F("config descriptor too large\n"));
    162c:	81 e9       	ldi	r24, 0x91	; 145
    162e:	97 e0       	ldi	r25, 0x07	; 7
    1630:	6b e3       	ldi	r22, 0x3B	; 59
    1632:	72 e0       	ldi	r23, 0x02	; 2
    1634:	22 c0       	rjmp	.+68     	; 0x167a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x112>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xd0>
    1638:	0f 92       	push	r0
    163a:	ed b7       	in	r30, 0x3d	; 61
    163c:	fe b7       	in	r31, 0x3e	; 62
    163e:	52 82       	std	Z+2, r5	; 0x02
    1640:	41 82       	std	Z+1, r4	; 0x01
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	5d e7       	ldi	r21, 0x7D	; 125
    1646:	54 83       	std	Z+4, r21	; 0x04
    1648:	43 83       	std	Z+3, r20	; 0x03
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	61 2f       	mov	r22, r17
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	20 e8       	ldi	r18, 0x80	; 128
    1654:	06 e0       	ldi	r16, 0x06	; 6
    1656:	ee 24       	eor	r14, r14
    1658:	b2 e0       	ldi	r27, 0x02	; 2
    165a:	cb 2e       	mov	r12, r27
    165c:	aa 24       	eor	r10, r10
    165e:	bb 24       	eor	r11, r11
    1660:	43 01       	movw	r8, r6
    1662:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>
            /* might want to truncate here */
        return false;
    }

    err = usb.getConfDescr(addr, 0, len, 0, (char *)descBuff);
    if (err) {
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	88 23       	and	r24, r24
    1670:	41 f0       	breq	.+16     	; 0x1682 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x11a>
        Serial.print(F("Can't get config descriptor\n"));
    1672:	81 e9       	ldi	r24, 0x91	; 145
    1674:	97 e0       	ldi	r25, 0x07	; 7
    1676:	6e e1       	ldi	r22, 0x1E	; 30
    1678:	72 e0       	ldi	r23, 0x02	; 2
    167a:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	78 c0       	rjmp	.+240    	; 0x1772 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x20a>
        return false;
    }

    p = descBuff;
    1682:	52 01       	movw	r10, r4
    inEp->epAddr = 0;
    1684:	d1 01       	movw	r26, r2
    1686:	1c 92       	st	X, r1
    outEp->epAddr = 0;
    1688:	eb 81       	ldd	r30, Y+3	; 0x03
    168a:	fc 81       	ldd	r31, Y+4	; 0x04
    168c:	10 82       	st	Z, r1
    while (p < (descBuff + len)){
    168e:	a5 e5       	ldi	r26, 0x55	; 85
    1690:	8a 2e       	mov	r8, r26
    1692:	91 2c       	mov	r9, r1
    1694:	86 0c       	add	r8, r6
    1696:	97 1c       	adc	r9, r7
    1698:	4d 81       	ldd	r20, Y+5	; 0x05
    169a:	5e 81       	ldd	r21, Y+6	; 0x06
    169c:	84 0e       	add	r8, r20
    169e:	95 1e       	adc	r9, r21

            if (ep) {
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
                ep->Attr = epDesc->bmAttributes;
                ep->MaxPktSize = epDesc->wMaxPacketSize;
                ep->sndToggle = bmSNDTOG0;
    16a0:	f0 e4       	ldi	r31, 0x40	; 64
    16a2:	cf 2e       	mov	r12, r31
                ep->rcvToggle = bmRCVTOG0;
    16a4:	e0 e1       	ldi	r30, 0x10	; 16
    16a6:	ee 2e       	mov	r14, r30
    16a8:	48 c0       	rjmp	.+144    	; 0x173a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1d2>

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
        uint8_t descLen = p[0];
    16aa:	d5 01       	movw	r26, r10
    16ac:	1c 91       	ld	r17, X
        uint8_t descType = p[1];
    16ae:	11 96       	adiw	r26, 0x01	; 1
    16b0:	0c 91       	ld	r16, X
        USB_ENDPOINT_DESCRIPTOR *epDesc;
        EP_RECORD *ep;

        switch (descType) {
    16b2:	04 30       	cpi	r16, 0x04	; 4
    16b4:	49 f0       	breq	.+18     	; 0x16c8 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x160>
    16b6:	05 30       	cpi	r16, 0x05	; 5
    16b8:	71 f0       	breq	.+28     	; 0x16d6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x16e>
    16ba:	02 30       	cpi	r16, 0x02	; 2
    16bc:	79 f5       	brne	.+94     	; 0x171c <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1b4>
        case USB_DESCRIPTOR_CONFIGURATION:
            Serial.print(F("config desc\n"));
    16be:	81 e9       	ldi	r24, 0x91	; 145
    16c0:	97 e0       	ldi	r25, 0x07	; 7
    16c2:	61 e1       	ldi	r22, 0x11	; 17
    16c4:	72 e0       	ldi	r23, 0x02	; 2
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x168>
            break;

        case USB_DESCRIPTOR_INTERFACE:
            Serial.print(F("interface desc\n"));
    16c8:	81 e9       	ldi	r24, 0x91	; 145
    16ca:	97 e0       	ldi	r25, 0x07	; 7
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	72 e0       	ldi	r23, 0x02	; 2
    16d0:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
    16d4:	30 c0       	rjmp	.+96     	; 0x1736 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
            break;

        case USB_DESCRIPTOR_ENDPOINT:
            epDesc = (USB_ENDPOINT_DESCRIPTOR *)p;
            if (!inEp->epAddr && (epDesc->bEndpointAddress & 0x80))
    16d6:	f1 01       	movw	r30, r2
    16d8:	80 81       	ld	r24, Z
    16da:	88 23       	and	r24, r24
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x180>
    16de:	d5 01       	movw	r26, r10
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	8c 91       	ld	r24, X
    16e4:	88 23       	and	r24, r24
    16e6:	2c f0       	brlt	.+10     	; 0x16f2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x18a>
                ep = inEp;
            else if (!outEp->epAddr)
    16e8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ea:	fc 81       	ldd	r31, Y+4	; 0x04
    16ec:	80 81       	ld	r24, Z
    16ee:	88 23       	and	r24, r24
    16f0:	11 f5       	brne	.+68     	; 0x1736 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
                ep = outEp;
            else
                ep = NULL;

            if (ep) {
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	01 f1       	breq	.+64     	; 0x1736 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
    16f6:	d5 01       	movw	r26, r10
    16f8:	12 96       	adiw	r26, 0x02	; 2
    16fa:	8c 91       	ld	r24, X
    16fc:	12 97       	sbiw	r26, 0x02	; 2
    16fe:	8f 77       	andi	r24, 0x7F	; 127
    1700:	80 83       	st	Z, r24
                ep->Attr = epDesc->bmAttributes;
    1702:	13 96       	adiw	r26, 0x03	; 3
    1704:	8c 91       	ld	r24, X
    1706:	13 97       	sbiw	r26, 0x03	; 3
    1708:	81 83       	std	Z+1, r24	; 0x01
                ep->MaxPktSize = epDesc->wMaxPacketSize;
    170a:	14 96       	adiw	r26, 0x04	; 4
    170c:	8d 91       	ld	r24, X+
    170e:	9c 91       	ld	r25, X
    1710:	15 97       	sbiw	r26, 0x05	; 5
    1712:	93 83       	std	Z+3, r25	; 0x03
    1714:	82 83       	std	Z+2, r24	; 0x02
                ep->sndToggle = bmSNDTOG0;
    1716:	c5 82       	std	Z+5, r12	; 0x05
                ep->rcvToggle = bmRCVTOG0;
    1718:	e6 82       	std	Z+6, r14	; 0x06
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
            }
            break;

        default:
            Serial.print(F("unkown desc type "));
    171c:	81 e9       	ldi	r24, 0x91	; 145
    171e:	97 e0       	ldi	r25, 0x07	; 7
    1720:	6f ee       	ldi	r22, 0xEF	; 239
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
            Serial.println( descType, HEX);
    1728:	81 e9       	ldi	r24, 0x91	; 145
    172a:	97 e0       	ldi	r25, 0x07	; 7
    172c:	60 2f       	mov	r22, r16
    172e:	40 e1       	ldi	r20, 0x10	; 16
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN5Print7printlnEhi>
            break;
        }

        p += descLen;
    1736:	a1 0e       	add	r10, r17
    1738:	b1 1c       	adc	r11, r1
    }

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
    173a:	a8 14       	cp	r10, r8
    173c:	b9 04       	cpc	r11, r9
    173e:	08 f4       	brcc	.+2      	; 0x1742 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1da>
    1740:	b4 cf       	rjmp	.-152    	; 0x16aa <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x142>
        }

        p += descLen;
    }

    if (!(inEp->epAddr && outEp->epAddr))
    1742:	f1 01       	movw	r30, r2
    1744:	80 81       	ld	r24, Z
    1746:	88 23       	and	r24, r24
    1748:	29 f0       	breq	.+10     	; 0x1754 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ec>
    174a:	ab 81       	ldd	r26, Y+3	; 0x03
    174c:	bc 81       	ldd	r27, Y+4	; 0x04
    174e:	8c 91       	ld	r24, X
    1750:	88 23       	and	r24, r24
    1752:	31 f4       	brne	.+12     	; 0x1760 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1f8>
        Serial.println(F("can't find accessory endpoints"));
    1754:	81 e9       	ldi	r24, 0x91	; 145
    1756:	97 e0       	ldi	r25, 0x07	; 7
    1758:	60 ed       	ldi	r22, 0xD0	; 208
    175a:	71 e0       	ldi	r23, 0x01	; 1
    175c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN5Print7printlnEPK19__FlashStringHelper>

    return inEp->epAddr && outEp->epAddr;
    1760:	f1 01       	movw	r30, r2
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	29 f0       	breq	.+10     	; 0x1772 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x20a>
    1768:	ab 81       	ldd	r26, Y+3	; 0x03
    176a:	bc 81       	ldd	r27, Y+4	; 0x04
    176c:	8c 91       	ld	r24, X
    176e:	81 11       	cpse	r24, r1
    1770:	81 e0       	ldi	r24, 0x01	; 1
}
    1772:	26 96       	adiw	r28, 0x06	; 6
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ef 90       	pop	r14
    1788:	cf 90       	pop	r12
    178a:	bf 90       	pop	r11
    178c:	af 90       	pop	r10
    178e:	9f 90       	pop	r9
    1790:	8f 90       	pop	r8
    1792:	7f 90       	pop	r7
    1794:	6f 90       	pop	r6
    1796:	5f 90       	pop	r5
    1798:	4f 90       	pop	r4
    179a:	3f 90       	pop	r3
    179c:	2f 90       	pop	r2
    179e:	08 95       	ret

000017a0 <_ZN16AndroidAccessory16configureAndroidEv>:

bool AndroidAccessory::configureAndroid(void)
    17a0:	6f 92       	push	r6
    17a2:	7f 92       	push	r7
    17a4:	8f 92       	push	r8
    17a6:	9f 92       	push	r9
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	ef 92       	push	r14
    17b0:	0f 93       	push	r16
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	2e 97       	sbiw	r28, 0x0e	; 14
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	5c 01       	movw	r10, r24
{
    byte err;
    EP_RECORD inEp, outEp;

    if (!findEndpoints(1, &inEp, &outEp))
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	4e 01       	movw	r8, r28
    17cc:	08 94       	sec
    17ce:	81 1c       	adc	r8, r1
    17d0:	91 1c       	adc	r9, r1
    17d2:	a4 01       	movw	r20, r8
    17d4:	9e 01       	movw	r18, r28
    17d6:	28 5f       	subi	r18, 0xF8	; 248
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>
    17de:	88 23       	and	r24, r24
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <_ZN16AndroidAccessory16configureAndroidEv+0x44>
    17e2:	8d c0       	rjmp	.+282    	; 0x18fe <_ZN16AndroidAccessory16configureAndroidEv+0x15e>
        return false;

    memset(&epRecord, 0x0, sizeof(epRecord));
    17e4:	c5 01       	movw	r24, r10
    17e6:	4d 96       	adiw	r24, 0x1d	; 29
    17e8:	fc 01       	movw	r30, r24
    17ea:	88 e3       	ldi	r24, 0x38	; 56
    17ec:	df 01       	movw	r26, r30
    17ee:	1d 92       	st	X+, r1
    17f0:	8a 95       	dec	r24
    17f2:	e9 f7       	brne	.-6      	; 0x17ee <_ZN16AndroidAccessory16configureAndroidEv+0x4e>

    epRecord[inEp.epAddr] = inEp;
    17f4:	69 81       	ldd	r22, Y+1	; 0x01
    17f6:	86 2f       	mov	r24, r22
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	fc 01       	movw	r30, r24
    17fc:	b3 e0       	ldi	r27, 0x03	; 3
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	ba 95       	dec	r27
    1804:	e1 f7       	brne	.-8      	; 0x17fe <_ZN16AndroidAccessory16configureAndroidEv+0x5e>
    1806:	e8 1b       	sub	r30, r24
    1808:	f9 0b       	sbc	r31, r25
    180a:	ea 0d       	add	r30, r10
    180c:	fb 1d       	adc	r31, r11
    180e:	7d 96       	adiw	r30, 0x1d	; 29
    1810:	d4 01       	movw	r26, r8
    1812:	87 e0       	ldi	r24, 0x07	; 7
    1814:	0d 90       	ld	r0, X+
    1816:	01 92       	st	Z+, r0
    1818:	81 50       	subi	r24, 0x01	; 1
    181a:	e1 f7       	brne	.-8      	; 0x1814 <_ZN16AndroidAccessory16configureAndroidEv+0x74>
    if (outEp.epAddr != inEp.epAddr)
    181c:	28 85       	ldd	r18, Y+8	; 0x08
    181e:	26 17       	cp	r18, r22
    1820:	a1 f0       	breq	.+40     	; 0x184a <_ZN16AndroidAccessory16configureAndroidEv+0xaa>
        epRecord[outEp.epAddr] = outEp;
    1822:	82 2f       	mov	r24, r18
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	fc 01       	movw	r30, r24
    1828:	a3 e0       	ldi	r26, 0x03	; 3
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	aa 95       	dec	r26
    1830:	e1 f7       	brne	.-8      	; 0x182a <_ZN16AndroidAccessory16configureAndroidEv+0x8a>
    1832:	e8 1b       	sub	r30, r24
    1834:	f9 0b       	sbc	r31, r25
    1836:	ea 0d       	add	r30, r10
    1838:	fb 1d       	adc	r31, r11
    183a:	7d 96       	adiw	r30, 0x1d	; 29
    183c:	de 01       	movw	r26, r28
    183e:	18 96       	adiw	r26, 0x08	; 8
    1840:	87 e0       	ldi	r24, 0x07	; 7
    1842:	0d 90       	ld	r0, X+
    1844:	01 92       	st	Z+, r0
    1846:	81 50       	subi	r24, 0x01	; 1
    1848:	e1 f7       	brne	.-8      	; 0x1842 <_ZN16AndroidAccessory16configureAndroidEv+0xa2>

    in = inEp.epAddr;
    184a:	f5 01       	movw	r30, r10
    184c:	63 8f       	std	Z+27, r22	; 0x1b
    out = outEp.epAddr;
    184e:	24 8f       	std	Z+28, r18	; 0x1c

    Serial.println(inEp.epAddr, HEX);
    1850:	81 e9       	ldi	r24, 0x91	; 145
    1852:	97 e0       	ldi	r25, 0x07	; 7
    1854:	40 e1       	ldi	r20, 0x10	; 16
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN5Print7printlnEhi>
    Serial.println(outEp.epAddr, HEX);
    185c:	81 e9       	ldi	r24, 0x91	; 145
    185e:	97 e0       	ldi	r25, 0x07	; 7
    1860:	68 85       	ldd	r22, Y+8	; 0x08
    1862:	40 e1       	ldi	r20, 0x10	; 16
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN5Print7printlnEhi>

    epRecord[0] = *(usb.getDevTableEntry(0,0));
    186a:	79 e1       	ldi	r23, 0x19	; 25
    186c:	67 2e       	mov	r6, r23
    186e:	71 2c       	mov	r7, r1
    1870:	6a 0c       	add	r6, r10
    1872:	7b 1c       	adc	r7, r11
    1874:	c3 01       	movw	r24, r6
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN3USB16getDevTableEntryEhh>
    187e:	d5 01       	movw	r26, r10
    1880:	5d 96       	adiw	r26, 0x1d	; 29
    1882:	fc 01       	movw	r30, r24
    1884:	87 e0       	ldi	r24, 0x07	; 7
    1886:	01 90       	ld	r0, Z+
    1888:	0d 92       	st	X+, r0
    188a:	81 50       	subi	r24, 0x01	; 1
    188c:	e1 f7       	brne	.-8      	; 0x1886 <_ZN16AndroidAccessory16configureAndroidEv+0xe6>
    usb.setDevTableEntry(1, epRecord);
    188e:	8d e1       	ldi	r24, 0x1D	; 29
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a8 0e       	add	r10, r24
    1894:	b9 1e       	adc	r11, r25
    1896:	c3 01       	movw	r24, r6
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	a5 01       	movw	r20, r10
    189c:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN3USB16setDevTableEntryEhP9EP_RECORD>
inline byte USB::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
}
//set configuration
inline byte USB::setConf( byte addr, byte ep, byte conf_value, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, NULL, nak_limit ));         
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <_ZN16AndroidAccessory16configureAndroidEv+0x102>
    18a2:	0f 92       	push	r0
    18a4:	ad b7       	in	r26, 0x3d	; 61
    18a6:	be b7       	in	r27, 0x3e	; 62
    18a8:	12 96       	adiw	r26, 0x02	; 2
    18aa:	1c 92       	st	X, r1
    18ac:	1e 92       	st	-X, r1
    18ae:	11 97       	sbiw	r26, 0x01	; 1
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	9d e7       	ldi	r25, 0x7D	; 125
    18b4:	14 96       	adiw	r26, 0x04	; 4
    18b6:	9c 93       	st	X, r25
    18b8:	8e 93       	st	-X, r24
    18ba:	13 97       	sbiw	r26, 0x03	; 3
    18bc:	c3 01       	movw	r24, r6
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	09 e0       	ldi	r16, 0x09	; 9
    18c6:	ee 24       	eor	r14, r14
    18c8:	e3 94       	inc	r14
    18ca:	cc 24       	eor	r12, r12
    18cc:	aa 24       	eor	r10, r10
    18ce:	bb 24       	eor	r11, r11
    18d0:	88 24       	eor	r8, r8
    18d2:	99 24       	eor	r9, r9
    18d4:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>

    err = usb.setConf( 1, 0, 1 );
    if (err) {
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	88 23       	and	r24, r24
    18e2:	41 f0       	breq	.+16     	; 0x18f4 <_ZN16AndroidAccessory16configureAndroidEv+0x154>
        Serial.print(F("Can't set config to 1\n"));
    18e4:	81 e9       	ldi	r24, 0x91	; 145
    18e6:	97 e0       	ldi	r25, 0x07	; 7
    18e8:	69 eb       	ldi	r22, 0xB9	; 185
    18ea:	71 e0       	ldi	r23, 0x01	; 1
    18ec:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <_ZN16AndroidAccessory16configureAndroidEv+0x15e>
        return false;
    }

    usb.setUsbTaskState( USB_STATE_RUNNING );
    18f4:	c3 01       	movw	r24, r6
    18f6:	60 e9       	ldi	r22, 0x90	; 144
    18f8:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN3USB15setUsbTaskStateEh>
    18fc:	81 e0       	ldi	r24, 0x01	; 1

    return true;
}
    18fe:	2e 96       	adiw	r28, 0x0e	; 14
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	0f 91       	pop	r16
    1910:	ef 90       	pop	r14
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	9f 90       	pop	r9
    191a:	8f 90       	pop	r8
    191c:	7f 90       	pop	r7
    191e:	6f 90       	pop	r6
    1920:	08 95       	ret

00001922 <_ZN16AndroidAccessory10sendStringEhiPKc>:
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    return protocol;
}

void AndroidAccessory::sendString(byte addr, int index, const char *str)
    1922:	8f 92       	push	r8
    1924:	9f 92       	push	r9
    1926:	af 92       	push	r10
    1928:	bf 92       	push	r11
    192a:	cf 92       	push	r12
    192c:	ef 92       	push	r14
    192e:	0f 93       	push	r16
    1930:	5a 01       	movw	r10, r20
    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_SEND_STRING, 0, 0, index,
                strlen(str) + 1, (char *)str);
    1932:	d9 01       	movw	r26, r18
    1934:	0d 90       	ld	r0, X+
    1936:	00 20       	and	r0, r0
    1938:	e9 f7       	brne	.-6      	; 0x1934 <_ZN16AndroidAccessory10sendStringEhiPKc+0x12>
    193a:	4d 01       	movw	r8, r26
    193c:	00 d0       	rcall	.+0      	; 0x193e <_ZN16AndroidAccessory10sendStringEhiPKc+0x1c>
    193e:	0f 92       	push	r0
    1940:	ad b7       	in	r26, 0x3d	; 61
    1942:	be b7       	in	r27, 0x3e	; 62
    1944:	11 96       	adiw	r26, 0x01	; 1
    1946:	82 1a       	sub	r8, r18
    1948:	93 0a       	sbc	r9, r19
    194a:	ed b7       	in	r30, 0x3d	; 61
    194c:	fe b7       	in	r31, 0x3e	; 62
    194e:	21 83       	std	Z+1, r18	; 0x01
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	3c 93       	st	X, r19
    1954:	11 97       	sbiw	r26, 0x01	; 1
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3d e7       	ldi	r19, 0x7D	; 125
    195a:	13 96       	adiw	r26, 0x03	; 3
    195c:	3c 93       	st	X, r19
    195e:	2e 93       	st	-X, r18
    1960:	12 97       	sbiw	r26, 0x02	; 2
    1962:	49 96       	adiw	r24, 0x19	; 25
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	20 e4       	ldi	r18, 0x40	; 64
    1968:	04 e3       	ldi	r16, 0x34	; 52
    196a:	ee 24       	eor	r14, r14
    196c:	cc 24       	eor	r12, r12
    196e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
}
    197a:	0f 91       	pop	r16
    197c:	ef 90       	pop	r14
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	9f 90       	pop	r9
    1986:	8f 90       	pop	r8
    1988:	08 95       	ret

0000198a <_ZN16AndroidAccessory12switchDeviceEh>:


bool AndroidAccessory::switchDevice(byte addr)
    198a:	6f 92       	push	r6
    198c:	7f 92       	push	r7
    198e:	8f 92       	push	r8
    1990:	9f 92       	push	r9
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
    1996:	cf 92       	push	r12
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	3c 01       	movw	r6, r24
    19a6:	f6 2e       	mov	r15, r22
{
    int protocol = getProtocol(addr);
    19a8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN16AndroidAccessory11getProtocolEh>
    19ac:	8c 01       	movw	r16, r24

	Serial.print(F("device supports protcol "));
    19ae:	81 e9       	ldi	r24, 0x91	; 145
    19b0:	97 e0       	ldi	r25, 0x07	; 7
    19b2:	6e e7       	ldi	r22, 0x7E	; 126
    19b4:	72 e0       	ldi	r23, 0x02	; 2
    19b6:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(protocol);
    19ba:	81 e9       	ldi	r24, 0x91	; 145
    19bc:	97 e0       	ldi	r25, 0x07	; 7
    19be:	b8 01       	movw	r22, r16
    19c0:	4a e0       	ldi	r20, 0x0A	; 10
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	0e 94 66 13 	call	0x26cc	; 0x26cc <_ZN5Print5printEii>
	Serial.print(F("\n"));
    19c8:	81 e9       	ldi	r24, 0x91	; 145
    19ca:	97 e0       	ldi	r25, 0x07	; 7
    19cc:	6c e7       	ldi	r22, 0x7C	; 124
    19ce:	72 e0       	ldi	r23, 0x02	; 2
    19d0:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>

    sendString(addr, ACCESSORY_STRING_MANUFACTURER, manufacturer);
    19d4:	f3 01       	movw	r30, r6
    19d6:	24 85       	ldd	r18, Z+12	; 0x0c
    19d8:	35 85       	ldd	r19, Z+13	; 0x0d
    19da:	c3 01       	movw	r24, r6
    19dc:	6f 2d       	mov	r22, r15
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_MODEL, model);
    19e6:	f3 01       	movw	r30, r6
    19e8:	26 85       	ldd	r18, Z+14	; 0x0e
    19ea:	37 85       	ldd	r19, Z+15	; 0x0f
    19ec:	c3 01       	movw	r24, r6
    19ee:	6f 2d       	mov	r22, r15
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_DESCRIPTION, description);
    19f8:	f3 01       	movw	r30, r6
    19fa:	20 89       	ldd	r18, Z+16	; 0x10
    19fc:	31 89       	ldd	r19, Z+17	; 0x11
    19fe:	c3 01       	movw	r24, r6
    1a00:	6f 2d       	mov	r22, r15
    1a02:	42 e0       	ldi	r20, 0x02	; 2
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_VERSION, version);
    1a0a:	f3 01       	movw	r30, r6
    1a0c:	22 89       	ldd	r18, Z+18	; 0x12
    1a0e:	33 89       	ldd	r19, Z+19	; 0x13
    1a10:	c3 01       	movw	r24, r6
    1a12:	6f 2d       	mov	r22, r15
    1a14:	43 e0       	ldi	r20, 0x03	; 3
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_URI, uri);
    1a1c:	f3 01       	movw	r30, r6
    1a1e:	24 89       	ldd	r18, Z+20	; 0x14
    1a20:	35 89       	ldd	r19, Z+21	; 0x15
    1a22:	c3 01       	movw	r24, r6
    1a24:	6f 2d       	mov	r22, r15
    1a26:	44 e0       	ldi	r20, 0x04	; 4
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_SERIAL, serial);
    1a2e:	f3 01       	movw	r30, r6
    1a30:	26 89       	ldd	r18, Z+22	; 0x16
    1a32:	37 89       	ldd	r19, Z+23	; 0x17
    1a34:	c3 01       	movw	r24, r6
    1a36:	6f 2d       	mov	r22, r15
    1a38:	45 e0       	ldi	r20, 0x05	; 5
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN16AndroidAccessory10sendStringEhiPKc>

    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);
    1a40:	e3 01       	movw	r28, r6
    1a42:	69 96       	adiw	r28, 0x19	; 25
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <_ZN16AndroidAccessory12switchDeviceEh+0xbc>
    1a46:	0f 92       	push	r0
    1a48:	ed b7       	in	r30, 0x3d	; 61
    1a4a:	fe b7       	in	r31, 0x3e	; 62
    1a4c:	12 82       	std	Z+2, r1	; 0x02
    1a4e:	11 82       	std	Z+1, r1	; 0x01
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	9d e7       	ldi	r25, 0x7D	; 125
    1a54:	94 83       	std	Z+4, r25	; 0x04
    1a56:	83 83       	std	Z+3, r24	; 0x03
    1a58:	ce 01       	movw	r24, r28
    1a5a:	6f 2d       	mov	r22, r15
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	20 e4       	ldi	r18, 0x40	; 64
    1a60:	05 e3       	ldi	r16, 0x35	; 53
    1a62:	ee 24       	eor	r14, r14
    1a64:	cc 24       	eor	r12, r12
    1a66:	aa 24       	eor	r10, r10
    1a68:	bb 24       	eor	r11, r11
    1a6a:	88 24       	eor	r8, r8
    1a6c:	99 24       	eor	r9, r9
    1a6e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        max.Task();
    1a72:	83 01       	movw	r16, r6
    1a74:	08 5e       	subi	r16, 0xE8	; 232
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <_ZN16AndroidAccessory12switchDeviceEh+0x104>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1a82:	c8 01       	movw	r24, r16
    1a84:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN8MAX3421E4TaskEv>
        max.Task();
        usb.Task();
    1a88:	ce 01       	movw	r24, r28
    1a8a:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN3USB4TaskEv>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1a8e:	ce 01       	movw	r24, r28
    1a90:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN3USB15getUsbTaskStateEv>
    1a94:	82 31       	cpi	r24, 0x12	; 18
    1a96:	a9 f7       	brne	.-22     	; 0x1a82 <_ZN16AndroidAccessory12switchDeviceEh+0xf8>
        max.Task();
        usb.Task();
    }

    return true;
}
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	cf 90       	pop	r12
    1aa8:	bf 90       	pop	r11
    1aaa:	af 90       	pop	r10
    1aac:	9f 90       	pop	r9
    1aae:	8f 90       	pop	r8
    1ab0:	7f 90       	pop	r7
    1ab2:	6f 90       	pop	r6
    1ab4:	08 95       	ret

00001ab6 <_ZN16AndroidAccessory11isConnectedEv>:
    usb.setUsbTaskState( USB_STATE_RUNNING );

    return true;
}

bool AndroidAccessory::isConnected(void)
    1ab6:	4f 92       	push	r4
    1ab8:	5f 92       	push	r5
    1aba:	6f 92       	push	r6
    1abc:	7f 92       	push	r7
    1abe:	8f 92       	push	r8
    1ac0:	9f 92       	push	r9
    1ac2:	af 92       	push	r10
    1ac4:	bf 92       	push	r11
    1ac6:	cf 92       	push	r12
    1ac8:	ef 92       	push	r14
    1aca:	0f 93       	push	r16
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	3c 01       	movw	r6, r24
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    byte err;

    max.Task();
    1ad2:	48 96       	adiw	r24, 0x18	; 24
    1ad4:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN8MAX3421E4TaskEv>
    usb.Task();
    1ad8:	e3 01       	movw	r28, r6
    1ada:	69 96       	adiw	r28, 0x19	; 25
    1adc:	ce 01       	movw	r24, r28
    1ade:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN3USB4TaskEv>

    if (!connected &&
    1ae2:	f3 01       	movw	r30, r6
    1ae4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <_ZN16AndroidAccessory11isConnectedEv+0x36>
    1aea:	78 c0       	rjmp	.+240    	; 0x1bdc <_ZN16AndroidAccessory11isConnectedEv+0x126>
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN3USB15getUsbTaskStateEv>
    1af2:	87 ff       	sbrs	r24, 7
    1af4:	73 c0       	rjmp	.+230    	; 0x1bdc <_ZN16AndroidAccessory11isConnectedEv+0x126>
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN3USB15getUsbTaskStateEv>
    1afc:	80 39       	cpi	r24, 0x90	; 144
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <_ZN16AndroidAccessory11isConnectedEv+0x4c>
    1b00:	6d c0       	rjmp	.+218    	; 0x1bdc <_ZN16AndroidAccessory11isConnectedEv+0x126>
    return true;
}

bool AndroidAccessory::isConnected(void)
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    1b02:	45 e5       	ldi	r20, 0x55	; 85
    1b04:	44 2e       	mov	r4, r20
    1b06:	51 2c       	mov	r5, r1
    1b08:	46 0c       	add	r4, r6
    1b0a:	57 1c       	adc	r5, r7
    usb.Task();

    if (!connected &&
        usb.getUsbTaskState() >= USB_STATE_CONFIGURING &&
        usb.getUsbTaskState() != USB_STATE_RUNNING) {
        Serial.print(F("\nDevice addressed... "));
    1b0c:	81 e9       	ldi	r24, 0x91	; 145
    1b0e:	97 e0       	ldi	r25, 0x07	; 7
    1b10:	63 ea       	ldi	r22, 0xA3	; 163
    1b12:	71 e0       	ldi	r23, 0x01	; 1
    1b14:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F("Requesting device descriptor.\n"));
    1b18:	81 e9       	ldi	r24, 0x91	; 145
    1b1a:	97 e0       	ldi	r25, 0x07	; 7
    1b1c:	64 e8       	ldi	r22, 0x84	; 132
    1b1e:	71 e0       	ldi	r23, 0x01	; 1
    1b20:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
        void init();
};

//get device descriptor
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <_ZN16AndroidAccessory11isConnectedEv+0x70>
    1b26:	0f 92       	push	r0
    1b28:	ed b7       	in	r30, 0x3d	; 61
    1b2a:	fe b7       	in	r31, 0x3e	; 62
    1b2c:	52 82       	std	Z+2, r5	; 0x02
    1b2e:	41 82       	std	Z+1, r4	; 0x01
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	9d e7       	ldi	r25, 0x7D	; 125
    1b34:	94 83       	std	Z+4, r25	; 0x04
    1b36:	83 83       	std	Z+3, r24	; 0x03
    1b38:	ce 01       	movw	r24, r28
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	20 e8       	ldi	r18, 0x80	; 128
    1b40:	06 e0       	ldi	r16, 0x06	; 6
    1b42:	ee 24       	eor	r14, r14
    1b44:	cc 24       	eor	r12, r12
    1b46:	c3 94       	inc	r12
    1b48:	aa 24       	eor	r10, r10
    1b4a:	bb 24       	eor	r11, r11
    1b4c:	32 e1       	ldi	r19, 0x12	; 18
    1b4e:	83 2e       	mov	r8, r19
    1b50:	91 2c       	mov	r9, r1
    1b52:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3USB7ctrlReqEhhhhhhjjPcj>

        err = usb.getDevDescr(1, 0, 0x12, (char *) devDesc);
        if (err) {
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	88 23       	and	r24, r24
    1b60:	41 f0       	breq	.+16     	; 0x1b72 <_ZN16AndroidAccessory11isConnectedEv+0xbc>
            Serial.print(F("\nDevice descriptor cannot be retrieved. Trying again\n"));
    1b62:	81 e9       	ldi	r24, 0x91	; 145
    1b64:	97 e0       	ldi	r25, 0x07	; 7
    1b66:	6e e4       	ldi	r22, 0x4E	; 78
    1b68:	71 e0       	ldi	r23, 0x01	; 1
    1b6a:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	27 c0       	rjmp	.+78     	; 0x1bc0 <_ZN16AndroidAccessory11isConnectedEv+0x10a>
    unsigned int nextByteInDataBuffOffset;

    bool isAccessoryDevice(USB_DEVICE_DESCRIPTOR *desc)
    {
        return desc->idVendor == 0x18d1 &&
            (desc->idProduct == 0x2D00 || desc->idProduct == 0x2D01);
    1b72:	f2 01       	movw	r30, r4
    1b74:	80 85       	ldd	r24, Z+8	; 0x08
    1b76:	91 85       	ldd	r25, Z+9	; 0x09
    1b78:	81 5d       	subi	r24, 0xD1	; 209
    1b7a:	98 41       	sbci	r25, 0x18	; 24
    1b7c:	a9 f5       	brne	.+106    	; 0x1be8 <_ZN16AndroidAccessory11isConnectedEv+0x132>
    1b7e:	f2 01       	movw	r30, r4
    1b80:	82 85       	ldd	r24, Z+10	; 0x0a
    1b82:	93 85       	ldd	r25, Z+11	; 0x0b
    1b84:	80 50       	subi	r24, 0x00	; 0
    1b86:	9d 42       	sbci	r25, 0x2D	; 45
    1b88:	02 97       	sbiw	r24, 0x02	; 2
    1b8a:	70 f5       	brcc	.+92     	; 0x1be8 <_ZN16AndroidAccessory11isConnectedEv+0x132>
            return false;
        }

        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));
    1b8c:	81 e9       	ldi	r24, 0x91	; 145
    1b8e:	97 e0       	ldi	r25, 0x07	; 7
    1b90:	6f e2       	ldi	r22, 0x2F	; 47
    1b92:	71 e0       	ldi	r23, 0x01	; 1
    1b94:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>

            connected = configureAndroid();
    1b98:	c3 01       	movw	r24, r6
    1b9a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_ZN16AndroidAccessory16configureAndroidEv>
    1b9e:	f3 01       	movw	r30, r6
    1ba0:	82 8f       	std	Z+26, r24	; 0x1a
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <_ZN16AndroidAccessory11isConnectedEv+0x106>
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        if (connected)
    1ba4:	f3 01       	movw	r30, r6
    1ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ba8:	88 23       	and	r24, r24
    1baa:	31 f0       	breq	.+12     	; 0x1bb8 <_ZN16AndroidAccessory11isConnectedEv+0x102>
            Serial.println(F("disconnected usb device\n"));
    1bac:	81 e9       	ldi	r24, 0x91	; 145
    1bae:	97 e0       	ldi	r25, 0x07	; 7
    1bb0:	64 ee       	ldi	r22, 0xE4	; 228
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        connected = false;
    1bb8:	f3 01       	movw	r30, r6
    1bba:	12 8e       	std	Z+26, r1	; 0x1a
    }

    return connected;
    1bbc:	f3 01       	movw	r30, r6
    1bbe:	82 8d       	ldd	r24, Z+26	; 0x1a
}
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	0f 91       	pop	r16
    1bc6:	ef 90       	pop	r14
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	08 95       	ret
            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1bdc:	ce 01       	movw	r24, r28
    1bde:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN3USB15getUsbTaskStateEv>
    1be2:	82 31       	cpi	r24, 0x12	; 18
    1be4:	59 f7       	brne	.-42     	; 0x1bbc <_ZN16AndroidAccessory11isConnectedEv+0x106>
    1be6:	de cf       	rjmp	.-68     	; 0x1ba4 <_ZN16AndroidAccessory11isConnectedEv+0xee>
        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));

            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
    1be8:	81 e9       	ldi	r24, 0x91	; 145
    1bea:	97 e0       	ldi	r25, 0x07	; 7
    1bec:	6d ef       	ldi	r22, 0xFD	; 253
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
            switchDevice(1);
    1bf4:	c3 01       	movw	r24, r6
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN16AndroidAccessory12switchDeviceEh>
    1bfc:	df cf       	rjmp	.-66     	; 0x1bbc <_ZN16AndroidAccessory11isConnectedEv+0x106>

00001bfe <_ZN16AndroidAccessory7powerOnEv>:

}

void AndroidAccessory::powerOn(void)
{
    max.powerOn();
    1bfe:	48 96       	adiw	r24, 0x18	; 24
    1c00:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN8MAX3421E7powerOnEv>
    delay(200);
    1c04:	68 ec       	ldi	r22, 0xC8	; 200
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <delay>
}
    1c10:	08 95       	ret

00001c12 <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>:
AndroidAccessory::AndroidAccessory(const char *manufacturer,
                                   const char *model,
                                   const char *description,
                                   const char *version,
                                   const char *uri,
                                   const char *serial) : manufacturer(manufacturer),
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	5c 01       	movw	r10, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1c24:	fc 01       	movw	r30, r24
    1c26:	13 82       	std	Z+3, r1	; 0x03
    1c28:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1c2a:	88 ee       	ldi	r24, 0xE8	; 232
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	84 83       	std	Z+4, r24	; 0x04
    1c34:	95 83       	std	Z+5, r25	; 0x05
    1c36:	a6 83       	std	Z+6, r26	; 0x06
    1c38:	b7 83       	std	Z+7, r27	; 0x07
                                                         model(model),
                                                         description(description),
                                                         version(version),
                                                         uri(uri),
                                                         serial(serial),
                                                         connected(false)
    1c3a:	8d e9       	ldi	r24, 0x9D	; 157
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	75 87       	std	Z+13, r23	; 0x0d
    1c44:	64 87       	std	Z+12, r22	; 0x0c
    1c46:	57 87       	std	Z+15, r21	; 0x0f
    1c48:	46 87       	std	Z+14, r20	; 0x0e
    1c4a:	31 8b       	std	Z+17, r19	; 0x11
    1c4c:	20 8b       	std	Z+16, r18	; 0x10
    1c4e:	13 8b       	std	Z+19, r17	; 0x13
    1c50:	02 8b       	std	Z+18, r16	; 0x12
    1c52:	f5 8a       	std	Z+21, r15	; 0x15
    1c54:	e4 8a       	std	Z+20, r14	; 0x14
    1c56:	d7 8a       	std	Z+23, r13	; 0x17
    1c58:	c6 8a       	std	Z+22, r12	; 0x16
    1c5a:	c5 01       	movw	r24, r10
    1c5c:	48 96       	adiw	r24, 0x18	; 24
    1c5e:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8MAX3421EC1Ev>
    1c62:	c5 01       	movw	r24, r10
    1c64:	49 96       	adiw	r24, 0x19	; 25
    1c66:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN3USBC1Ev>
    1c6a:	f5 01       	movw	r30, r10
    1c6c:	12 8e       	std	Z+26, r1	; 0x1a
{

}
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	df 90       	pop	r13
    1c78:	cf 90       	pop	r12
    1c7a:	bf 90       	pop	r11
    1c7c:	af 90       	pop	r10
    1c7e:	08 95       	ret

00001c80 <loop>:
    //  motors.Init();
}

// The loop function is called in an endless loop
void loop() {
    stateMachine.Call();
    1c80:	87 e5       	ldi	r24, 0x57	; 87
    1c82:	95 e0       	ldi	r25, 0x05	; 5
    1c84:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN12StateMachine4CallEv>
}
    1c88:	08 95       	ret

00001c8a <setup>:
// Do not remove the include below
#include "TB.h"

//The setup function is called once at startup of the sketch
void setup() {
	stateMachine.Init();
    1c8a:	87 e5       	ldi	r24, 0x57	; 87
    1c8c:	95 e0       	ldi	r25, 0x05	; 5
    1c8e:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN12StateMachine4InitEv>
	// usb.Init("Huawei", "U8655");
    //  motors.Init();
}
    1c92:	08 95       	ret

00001c94 <main>:
void loop() {
    stateMachine.Call();
}

int main() {
	setup();
    1c94:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <setup>
	while(true) {
		loop();
    1c98:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <loop>
    1c9c:	fd cf       	rjmp	.-6      	; 0x1c98 <main+0x4>

00001c9e <__vector_25>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
#elif defined(SIG_USART0_RECV)
  SIGNAL(SIG_USART0_RECV)
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	0b b6       	in	r0, 0x3b	; 59
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1cba:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1cbe:	20 91 b1 05 	lds	r18, 0x05B1
    1cc2:	30 91 b2 05 	lds	r19, 0x05B2

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1cc6:	2f 5f       	subi	r18, 0xFF	; 255
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	2f 73       	andi	r18, 0x3F	; 63
    1ccc:	30 70       	andi	r19, 0x00	; 0
    1cce:	80 91 b3 05 	lds	r24, 0x05B3
    1cd2:	90 91 b4 05 	lds	r25, 0x05B4
    1cd6:	28 17       	cp	r18, r24
    1cd8:	39 07       	cpc	r19, r25
    1cda:	59 f0       	breq	.+22     	; 0x1cf2 <__vector_25+0x54>
    buffer->buffer[buffer->head] = c;
    1cdc:	e0 91 b1 05 	lds	r30, 0x05B1
    1ce0:	f0 91 b2 05 	lds	r31, 0x05B2
    1ce4:	ef 58       	subi	r30, 0x8F	; 143
    1ce6:	fa 4f       	sbci	r31, 0xFA	; 250
    1ce8:	40 83       	st	Z, r20
    buffer->head = i;
    1cea:	30 93 b2 05 	sts	0x05B2, r19
    1cee:	20 93 b1 05 	sts	0x05B1, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	0b be       	out	0x3b, r0	; 59
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <__vector_36>:

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	0b b6       	in	r0, 0x3b	; 59
    1d18:	0f 92       	push	r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	2f 93       	push	r18
    1d1e:	3f 93       	push	r19
    1d20:	4f 93       	push	r20
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
  {
    unsigned char c = UDR1;
    1d2a:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1d2e:	20 91 39 06 	lds	r18, 0x0639
    1d32:	30 91 3a 06 	lds	r19, 0x063A

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	2f 73       	andi	r18, 0x3F	; 63
    1d3c:	30 70       	andi	r19, 0x00	; 0
    1d3e:	80 91 3b 06 	lds	r24, 0x063B
    1d42:	90 91 3c 06 	lds	r25, 0x063C
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	59 f0       	breq	.+22     	; 0x1d62 <__vector_36+0x54>
    buffer->buffer[buffer->head] = c;
    1d4c:	e0 91 39 06 	lds	r30, 0x0639
    1d50:	f0 91 3a 06 	lds	r31, 0x063A
    1d54:	e7 50       	subi	r30, 0x07	; 7
    1d56:	fa 4f       	sbci	r31, 0xFA	; 250
    1d58:	40 83       	st	Z, r20
    buffer->head = i;
    1d5a:	30 93 3a 06 	sts	0x063A, r19
    1d5e:	20 93 39 06 	sts	0x0639, r18
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	9f 91       	pop	r25
    1d68:	8f 91       	pop	r24
    1d6a:	4f 91       	pop	r20
    1d6c:	3f 91       	pop	r19
    1d6e:	2f 91       	pop	r18
    1d70:	0f 90       	pop	r0
    1d72:	0b be       	out	0x3b, r0	; 59
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <__vector_51>:

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
    1d7e:	1f 92       	push	r1
    1d80:	0f 92       	push	r0
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	0f 92       	push	r0
    1d86:	0b b6       	in	r0, 0x3b	; 59
    1d88:	0f 92       	push	r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	2f 93       	push	r18
    1d8e:	3f 93       	push	r19
    1d90:	4f 93       	push	r20
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	ef 93       	push	r30
    1d98:	ff 93       	push	r31
  {
    unsigned char c = UDR2;
    1d9a:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1d9e:	20 91 c1 06 	lds	r18, 0x06C1
    1da2:	30 91 c2 06 	lds	r19, 0x06C2

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1da6:	2f 5f       	subi	r18, 0xFF	; 255
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	2f 73       	andi	r18, 0x3F	; 63
    1dac:	30 70       	andi	r19, 0x00	; 0
    1dae:	80 91 c3 06 	lds	r24, 0x06C3
    1db2:	90 91 c4 06 	lds	r25, 0x06C4
    1db6:	28 17       	cp	r18, r24
    1db8:	39 07       	cpc	r19, r25
    1dba:	59 f0       	breq	.+22     	; 0x1dd2 <__vector_51+0x54>
    buffer->buffer[buffer->head] = c;
    1dbc:	e0 91 c1 06 	lds	r30, 0x06C1
    1dc0:	f0 91 c2 06 	lds	r31, 0x06C2
    1dc4:	ef 57       	subi	r30, 0x7F	; 127
    1dc6:	f9 4f       	sbci	r31, 0xF9	; 249
    1dc8:	40 83       	st	Z, r20
    buffer->head = i;
    1dca:	30 93 c2 06 	sts	0x06C2, r19
    1dce:	20 93 c1 06 	sts	0x06C1, r18
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	4f 91       	pop	r20
    1ddc:	3f 91       	pop	r19
    1dde:	2f 91       	pop	r18
    1de0:	0f 90       	pop	r0
    1de2:	0b be       	out	0x3b, r0	; 59
    1de4:	0f 90       	pop	r0
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	0f 90       	pop	r0
    1dea:	1f 90       	pop	r1
    1dec:	18 95       	reti

00001dee <__vector_54>:

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
    1dee:	1f 92       	push	r1
    1df0:	0f 92       	push	r0
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	0f 92       	push	r0
    1df6:	0b b6       	in	r0, 0x3b	; 59
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2f 93       	push	r18
    1dfe:	3f 93       	push	r19
    1e00:	4f 93       	push	r20
    1e02:	8f 93       	push	r24
    1e04:	9f 93       	push	r25
    1e06:	ef 93       	push	r30
    1e08:	ff 93       	push	r31
  {
    unsigned char c = UDR3;
    1e0a:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1e0e:	20 91 49 07 	lds	r18, 0x0749
    1e12:	30 91 4a 07 	lds	r19, 0x074A

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1e16:	2f 5f       	subi	r18, 0xFF	; 255
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	2f 73       	andi	r18, 0x3F	; 63
    1e1c:	30 70       	andi	r19, 0x00	; 0
    1e1e:	80 91 4b 07 	lds	r24, 0x074B
    1e22:	90 91 4c 07 	lds	r25, 0x074C
    1e26:	28 17       	cp	r18, r24
    1e28:	39 07       	cpc	r19, r25
    1e2a:	59 f0       	breq	.+22     	; 0x1e42 <__vector_54+0x54>
    buffer->buffer[buffer->head] = c;
    1e2c:	e0 91 49 07 	lds	r30, 0x0749
    1e30:	f0 91 4a 07 	lds	r31, 0x074A
    1e34:	e7 5f       	subi	r30, 0xF7	; 247
    1e36:	f8 4f       	sbci	r31, 0xF8	; 248
    1e38:	40 83       	st	Z, r20
    buffer->head = i;
    1e3a:	30 93 4a 07 	sts	0x074A, r19
    1e3e:	20 93 49 07 	sts	0x0749, r18
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
    1e42:	ff 91       	pop	r31
    1e44:	ef 91       	pop	r30
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0b be       	out	0x3b, r0	; 59
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	0b b6       	in	r0, 0x3b	; 59
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	2f 93       	push	r18
    1e6e:	3f 93       	push	r19
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	ef 93       	push	r30
    1e76:	ff 93       	push	r31
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1e78:	20 91 f5 05 	lds	r18, 0x05F5
    1e7c:	30 91 f6 05 	lds	r19, 0x05F6
    1e80:	80 91 f7 05 	lds	r24, 0x05F7
    1e84:	90 91 f8 05 	lds	r25, 0x05F8
    1e88:	28 17       	cp	r18, r24
    1e8a:	39 07       	cpc	r19, r25
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1e8e:	80 91 c1 00 	lds	r24, 0x00C1
    1e92:	8f 7d       	andi	r24, 0xDF	; 223
    1e94:	80 93 c1 00 	sts	0x00C1, r24
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1e9a:	e0 91 f7 05 	lds	r30, 0x05F7
    1e9e:	f0 91 f8 05 	lds	r31, 0x05F8
    1ea2:	eb 54       	subi	r30, 0x4B	; 75
    1ea4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ea6:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1ea8:	80 91 f7 05 	lds	r24, 0x05F7
    1eac:	90 91 f8 05 	lds	r25, 0x05F8
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	8f 73       	andi	r24, 0x3F	; 63
    1eb4:	90 70       	andi	r25, 0x00	; 0
    1eb6:	90 93 f8 05 	sts	0x05F8, r25
    1eba:	80 93 f7 05 	sts	0x05F7, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1ebe:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	9f 91       	pop	r25
    1ec8:	8f 91       	pop	r24
    1eca:	3f 91       	pop	r19
    1ecc:	2f 91       	pop	r18
    1ece:	0f 90       	pop	r0
    1ed0:	0b be       	out	0x3b, r0	; 59
    1ed2:	0f 90       	pop	r0
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	0f 90       	pop	r0
    1ed8:	1f 90       	pop	r1
    1eda:	18 95       	reti

00001edc <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	0b b6       	in	r0, 0x3b	; 59
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	2f 93       	push	r18
    1eec:	3f 93       	push	r19
    1eee:	8f 93       	push	r24
    1ef0:	9f 93       	push	r25
    1ef2:	ef 93       	push	r30
    1ef4:	ff 93       	push	r31
{
  if (tx_buffer1.head == tx_buffer1.tail) {
    1ef6:	20 91 7d 06 	lds	r18, 0x067D
    1efa:	30 91 7e 06 	lds	r19, 0x067E
    1efe:	80 91 7f 06 	lds	r24, 0x067F
    1f02:	90 91 80 06 	lds	r25, 0x0680
    1f06:	28 17       	cp	r18, r24
    1f08:	39 07       	cpc	r19, r25
    1f0a:	31 f4       	brne	.+12     	; 0x1f18 <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    1f0c:	80 91 c9 00 	lds	r24, 0x00C9
    1f10:	8f 7d       	andi	r24, 0xDF	; 223
    1f12:	80 93 c9 00 	sts	0x00C9, r24
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    1f18:	e0 91 7f 06 	lds	r30, 0x067F
    1f1c:	f0 91 80 06 	lds	r31, 0x0680
    1f20:	e3 5c       	subi	r30, 0xC3	; 195
    1f22:	f9 4f       	sbci	r31, 0xF9	; 249
    1f24:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    1f26:	80 91 7f 06 	lds	r24, 0x067F
    1f2a:	90 91 80 06 	lds	r25, 0x0680
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	8f 73       	andi	r24, 0x3F	; 63
    1f32:	90 70       	andi	r25, 0x00	; 0
    1f34:	90 93 80 06 	sts	0x0680, r25
    1f38:	80 93 7f 06 	sts	0x067F, r24
	
    UDR1 = c;
    1f3c:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	3f 91       	pop	r19
    1f4a:	2f 91       	pop	r18
    1f4c:	0f 90       	pop	r0
    1f4e:	0b be       	out	0x3b, r0	; 59
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
    1f5a:	1f 92       	push	r1
    1f5c:	0f 92       	push	r0
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	0f 92       	push	r0
    1f62:	0b b6       	in	r0, 0x3b	; 59
    1f64:	0f 92       	push	r0
    1f66:	11 24       	eor	r1, r1
    1f68:	2f 93       	push	r18
    1f6a:	3f 93       	push	r19
    1f6c:	8f 93       	push	r24
    1f6e:	9f 93       	push	r25
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
{
  if (tx_buffer2.head == tx_buffer2.tail) {
    1f74:	20 91 05 07 	lds	r18, 0x0705
    1f78:	30 91 06 07 	lds	r19, 0x0706
    1f7c:	80 91 07 07 	lds	r24, 0x0707
    1f80:	90 91 08 07 	lds	r25, 0x0708
    1f84:	28 17       	cp	r18, r24
    1f86:	39 07       	cpc	r19, r25
    1f88:	31 f4       	brne	.+12     	; 0x1f96 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    1f8a:	80 91 d1 00 	lds	r24, 0x00D1
    1f8e:	8f 7d       	andi	r24, 0xDF	; 223
    1f90:	80 93 d1 00 	sts	0x00D1, r24
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    1f96:	e0 91 07 07 	lds	r30, 0x0707
    1f9a:	f0 91 08 07 	lds	r31, 0x0708
    1f9e:	eb 53       	subi	r30, 0x3B	; 59
    1fa0:	f9 4f       	sbci	r31, 0xF9	; 249
    1fa2:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    1fa4:	80 91 07 07 	lds	r24, 0x0707
    1fa8:	90 91 08 07 	lds	r25, 0x0708
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	8f 73       	andi	r24, 0x3F	; 63
    1fb0:	90 70       	andi	r25, 0x00	; 0
    1fb2:	90 93 08 07 	sts	0x0708, r25
    1fb6:	80 93 07 07 	sts	0x0707, r24
	
    UDR2 = c;
    1fba:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	9f 91       	pop	r25
    1fc4:	8f 91       	pop	r24
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0b be       	out	0x3b, r0	; 59
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	0b b6       	in	r0, 0x3b	; 59
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	2f 93       	push	r18
    1fe8:	3f 93       	push	r19
    1fea:	8f 93       	push	r24
    1fec:	9f 93       	push	r25
    1fee:	ef 93       	push	r30
    1ff0:	ff 93       	push	r31
{
  if (tx_buffer3.head == tx_buffer3.tail) {
    1ff2:	20 91 8d 07 	lds	r18, 0x078D
    1ff6:	30 91 8e 07 	lds	r19, 0x078E
    1ffa:	80 91 8f 07 	lds	r24, 0x078F
    1ffe:	90 91 90 07 	lds	r25, 0x0790
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	31 f4       	brne	.+12     	; 0x2014 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    2008:	80 91 31 01 	lds	r24, 0x0131
    200c:	8f 7d       	andi	r24, 0xDF	; 223
    200e:	80 93 31 01 	sts	0x0131, r24
    2012:	14 c0       	rjmp	.+40     	; 0x203c <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    2014:	e0 91 8f 07 	lds	r30, 0x078F
    2018:	f0 91 90 07 	lds	r31, 0x0790
    201c:	e3 5b       	subi	r30, 0xB3	; 179
    201e:	f8 4f       	sbci	r31, 0xF8	; 248
    2020:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    2022:	80 91 8f 07 	lds	r24, 0x078F
    2026:	90 91 90 07 	lds	r25, 0x0790
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	8f 73       	andi	r24, 0x3F	; 63
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	90 93 90 07 	sts	0x0790, r25
    2034:	80 93 8f 07 	sts	0x078F, r24
	
    UDR3 = c;
    2038:	20 93 36 01 	sts	0x0136, r18
  }
}
    203c:	ff 91       	pop	r31
    203e:	ef 91       	pop	r30
    2040:	9f 91       	pop	r25
    2042:	8f 91       	pop	r24
    2044:	3f 91       	pop	r19
    2046:	2f 91       	pop	r18
    2048:	0f 90       	pop	r0
    204a:	0b be       	out	0x3b, r0	; 59
    204c:	0f 90       	pop	r0
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	0f 90       	pop	r0
    2052:	1f 90       	pop	r1
    2054:	18 95       	reti

00002056 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2056:	dc 01       	movw	r26, r24
    2058:	1c 96       	adiw	r26, 0x0c	; 12
    205a:	ed 91       	ld	r30, X+
    205c:	fc 91       	ld	r31, X
    205e:	1d 97       	sbiw	r26, 0x0d	; 13
    2060:	e0 5c       	subi	r30, 0xC0	; 192
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	21 91       	ld	r18, Z+
    2066:	31 91       	ld	r19, Z+
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	28 1b       	sub	r18, r24
    206e:	39 0b       	sbc	r19, r25
    2070:	2f 73       	andi	r18, 0x3F	; 63
    2072:	30 70       	andi	r19, 0x00	; 0
}
    2074:	c9 01       	movw	r24, r18
    2076:	08 95       	ret

00002078 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2078:	dc 01       	movw	r26, r24
    207a:	1c 96       	adiw	r26, 0x0c	; 12
    207c:	ed 91       	ld	r30, X+
    207e:	fc 91       	ld	r31, X
    2080:	1d 97       	sbiw	r26, 0x0d	; 13
    2082:	e0 5c       	subi	r30, 0xC0	; 192
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	20 81       	ld	r18, Z
    2088:	31 81       	ldd	r19, Z+1	; 0x01
    208a:	e0 54       	subi	r30, 0x40	; 64
    208c:	f0 40       	sbci	r31, 0x00	; 0
    208e:	df 01       	movw	r26, r30
    2090:	ae 5b       	subi	r26, 0xBE	; 190
    2092:	bf 4f       	sbci	r27, 0xFF	; 255
    2094:	8d 91       	ld	r24, X+
    2096:	9c 91       	ld	r25, X
    2098:	11 97       	sbiw	r26, 0x01	; 1
    209a:	28 17       	cp	r18, r24
    209c:	39 07       	cpc	r19, r25
    209e:	19 f4       	brne	.+6      	; 0x20a6 <_ZN14HardwareSerial4peekEv+0x2e>
    20a0:	2f ef       	ldi	r18, 0xFF	; 255
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    20a6:	8d 91       	ld	r24, X+
    20a8:	9c 91       	ld	r25, X
    20aa:	e8 0f       	add	r30, r24
    20ac:	f9 1f       	adc	r31, r25
    20ae:	80 81       	ld	r24, Z
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    20b4:	c9 01       	movw	r24, r18
    20b6:	08 95       	ret

000020b8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    20b8:	dc 01       	movw	r26, r24
    20ba:	1c 96       	adiw	r26, 0x0c	; 12
    20bc:	ed 91       	ld	r30, X+
    20be:	fc 91       	ld	r31, X
    20c0:	1d 97       	sbiw	r26, 0x0d	; 13
    20c2:	e0 5c       	subi	r30, 0xC0	; 192
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	20 81       	ld	r18, Z
    20c8:	31 81       	ldd	r19, Z+1	; 0x01
    20ca:	e0 54       	subi	r30, 0x40	; 64
    20cc:	f0 40       	sbci	r31, 0x00	; 0
    20ce:	df 01       	movw	r26, r30
    20d0:	ae 5b       	subi	r26, 0xBE	; 190
    20d2:	bf 4f       	sbci	r27, 0xFF	; 255
    20d4:	8d 91       	ld	r24, X+
    20d6:	9c 91       	ld	r25, X
    20d8:	11 97       	sbiw	r26, 0x01	; 1
    20da:	28 17       	cp	r18, r24
    20dc:	39 07       	cpc	r19, r25
    20de:	19 f4       	brne	.+6      	; 0x20e6 <_ZN14HardwareSerial4readEv+0x2e>
    20e0:	2f ef       	ldi	r18, 0xFF	; 255
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	10 c0       	rjmp	.+32     	; 0x2106 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    20e6:	8d 91       	ld	r24, X+
    20e8:	9c 91       	ld	r25, X
    20ea:	11 97       	sbiw	r26, 0x01	; 1
    20ec:	e8 0f       	add	r30, r24
    20ee:	f9 1f       	adc	r31, r25
    20f0:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    20f2:	8d 91       	ld	r24, X+
    20f4:	9c 91       	ld	r25, X
    20f6:	11 97       	sbiw	r26, 0x01	; 1
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	8f 73       	andi	r24, 0x3F	; 63
    20fc:	90 70       	andi	r25, 0x00	; 0
    20fe:	11 96       	adiw	r26, 0x01	; 1
    2100:	9c 93       	st	X, r25
    2102:	8e 93       	st	-X, r24
    return c;
    2104:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2106:	c9 01       	movw	r24, r18
    2108:	08 95       	ret

0000210a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    210a:	fc 01       	movw	r30, r24
    210c:	86 85       	ldd	r24, Z+14	; 0x0e
    210e:	97 85       	ldd	r25, Z+15	; 0x0f
    2110:	dc 01       	movw	r26, r24
    2112:	a0 5c       	subi	r26, 0xC0	; 192
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	fc 01       	movw	r30, r24
    2118:	ee 5b       	subi	r30, 0xBE	; 190
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	2d 91       	ld	r18, X+
    211e:	3c 91       	ld	r19, X
    2120:	11 97       	sbiw	r26, 0x01	; 1
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	28 17       	cp	r18, r24
    2128:	39 07       	cpc	r19, r25
    212a:	c1 f7       	brne	.-16     	; 0x211c <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    212c:	08 95       	ret

0000212e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2134:	ee 85       	ldd	r30, Y+14	; 0x0e
    2136:	ff 85       	ldd	r31, Y+15	; 0x0f
    2138:	e0 5c       	subi	r30, 0xC0	; 192
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	20 81       	ld	r18, Z
    213e:	31 81       	ldd	r19, Z+1	; 0x01
    2140:	e0 54       	subi	r30, 0x40	; 64
    2142:	f0 40       	sbci	r31, 0x00	; 0
    2144:	2f 5f       	subi	r18, 0xFF	; 255
    2146:	3f 4f       	sbci	r19, 0xFF	; 255
    2148:	2f 73       	andi	r18, 0x3F	; 63
    214a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    214c:	df 01       	movw	r26, r30
    214e:	ae 5b       	subi	r26, 0xBE	; 190
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	8d 91       	ld	r24, X+
    2154:	9c 91       	ld	r25, X
    2156:	11 97       	sbiw	r26, 0x01	; 1
    2158:	28 17       	cp	r18, r24
    215a:	39 07       	cpc	r19, r25
    215c:	d1 f3       	breq	.-12     	; 0x2152 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    215e:	e0 5c       	subi	r30, 0xC0	; 192
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	e0 54       	subi	r30, 0x40	; 64
    2168:	f0 40       	sbci	r31, 0x00	; 0
    216a:	e8 0f       	add	r30, r24
    216c:	f9 1f       	adc	r31, r25
    216e:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    2170:	ee 85       	ldd	r30, Y+14	; 0x0e
    2172:	ff 85       	ldd	r31, Y+15	; 0x0f
    2174:	e0 5c       	subi	r30, 0xC0	; 192
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	31 83       	std	Z+1, r19	; 0x01
    217a:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    217c:	ee 89       	ldd	r30, Y+22	; 0x16
    217e:	ff 89       	ldd	r31, Y+23	; 0x17
    2180:	20 81       	ld	r18, Z
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2188:	02 c0       	rjmp	.+4      	; 0x218e <_ZN14HardwareSerial5writeEh+0x60>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <_ZN14HardwareSerial5writeEh+0x5c>
    2192:	28 2b       	or	r18, r24
    2194:	20 83       	st	Z, r18
  
  return 1;
}
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    21a0:	1f 93       	push	r17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    21a2:	10 92 94 07 	sts	0x0794, r1
    21a6:	10 92 93 07 	sts	0x0793, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    21aa:	28 ee       	ldi	r18, 0xE8	; 232
    21ac:	33 e0       	ldi	r19, 0x03	; 3
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	20 93 95 07 	sts	0x0795, r18
    21b6:	30 93 96 07 	sts	0x0796, r19
    21ba:	40 93 97 07 	sts	0x0797, r20
    21be:	50 93 98 07 	sts	0x0798, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    21c2:	6f ea       	ldi	r22, 0xAF	; 175
    21c4:	72 e0       	ldi	r23, 0x02	; 2
    21c6:	70 93 92 07 	sts	0x0792, r23
    21ca:	60 93 91 07 	sts	0x0791, r22
{
  _rx_buffer = rx_buffer;
    21ce:	81 e7       	ldi	r24, 0x71	; 113
    21d0:	95 e0       	ldi	r25, 0x05	; 5
    21d2:	90 93 9e 07 	sts	0x079E, r25
    21d6:	80 93 9d 07 	sts	0x079D, r24
  _tx_buffer = tx_buffer;
    21da:	85 eb       	ldi	r24, 0xB5	; 181
    21dc:	95 e0       	ldi	r25, 0x05	; 5
    21de:	90 93 a0 07 	sts	0x07A0, r25
    21e2:	80 93 9f 07 	sts	0x079F, r24
  _ubrrh = ubrrh;
    21e6:	85 ec       	ldi	r24, 0xC5	; 197
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	90 93 a2 07 	sts	0x07A2, r25
    21ee:	80 93 a1 07 	sts	0x07A1, r24
  _ubrrl = ubrrl;
    21f2:	84 ec       	ldi	r24, 0xC4	; 196
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	90 93 a4 07 	sts	0x07A4, r25
    21fa:	80 93 a3 07 	sts	0x07A3, r24
  _ucsra = ucsra;
    21fe:	80 ec       	ldi	r24, 0xC0	; 192
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	90 93 a6 07 	sts	0x07A6, r25
    2206:	80 93 a5 07 	sts	0x07A5, r24
  _ucsrb = ucsrb;
    220a:	81 ec       	ldi	r24, 0xC1	; 193
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	90 93 a8 07 	sts	0x07A8, r25
    2212:	80 93 a7 07 	sts	0x07A7, r24
  _udr = udr;
    2216:	86 ec       	ldi	r24, 0xC6	; 198
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	90 93 aa 07 	sts	0x07AA, r25
    221e:	80 93 a9 07 	sts	0x07A9, r24
  _rxen = rxen;
    2222:	14 e0       	ldi	r17, 0x04	; 4
    2224:	10 93 ab 07 	sts	0x07AB, r17
  _txen = txen;
    2228:	b3 e0       	ldi	r27, 0x03	; 3
    222a:	b0 93 ac 07 	sts	0x07AC, r27
  _rxcie = rxcie;
    222e:	a7 e0       	ldi	r26, 0x07	; 7
    2230:	a0 93 ad 07 	sts	0x07AD, r26
  _udrie = udrie;
    2234:	f5 e0       	ldi	r31, 0x05	; 5
    2236:	f0 93 ae 07 	sts	0x07AE, r31
  _u2x = u2x;
    223a:	e1 e0       	ldi	r30, 0x01	; 1
    223c:	e0 93 af 07 	sts	0x07AF, r30
    2240:	10 92 b3 07 	sts	0x07B3, r1
    2244:	10 92 b2 07 	sts	0x07B2, r1
    2248:	20 93 b4 07 	sts	0x07B4, r18
    224c:	30 93 b5 07 	sts	0x07B5, r19
    2250:	40 93 b6 07 	sts	0x07B6, r20
    2254:	50 93 b7 07 	sts	0x07B7, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2258:	70 93 b1 07 	sts	0x07B1, r23
    225c:	60 93 b0 07 	sts	0x07B0, r22
{
  _rx_buffer = rx_buffer;
    2260:	89 ef       	ldi	r24, 0xF9	; 249
    2262:	95 e0       	ldi	r25, 0x05	; 5
    2264:	90 93 bd 07 	sts	0x07BD, r25
    2268:	80 93 bc 07 	sts	0x07BC, r24
  _tx_buffer = tx_buffer;
    226c:	8d e3       	ldi	r24, 0x3D	; 61
    226e:	96 e0       	ldi	r25, 0x06	; 6
    2270:	90 93 bf 07 	sts	0x07BF, r25
    2274:	80 93 be 07 	sts	0x07BE, r24
  _ubrrh = ubrrh;
    2278:	8d ec       	ldi	r24, 0xCD	; 205
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	90 93 c1 07 	sts	0x07C1, r25
    2280:	80 93 c0 07 	sts	0x07C0, r24
  _ubrrl = ubrrl;
    2284:	8c ec       	ldi	r24, 0xCC	; 204
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	90 93 c3 07 	sts	0x07C3, r25
    228c:	80 93 c2 07 	sts	0x07C2, r24
  _ucsra = ucsra;
    2290:	88 ec       	ldi	r24, 0xC8	; 200
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	90 93 c5 07 	sts	0x07C5, r25
    2298:	80 93 c4 07 	sts	0x07C4, r24
  _ucsrb = ucsrb;
    229c:	89 ec       	ldi	r24, 0xC9	; 201
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	90 93 c7 07 	sts	0x07C7, r25
    22a4:	80 93 c6 07 	sts	0x07C6, r24
  _udr = udr;
    22a8:	8e ec       	ldi	r24, 0xCE	; 206
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	90 93 c9 07 	sts	0x07C9, r25
    22b0:	80 93 c8 07 	sts	0x07C8, r24
  _rxen = rxen;
    22b4:	10 93 ca 07 	sts	0x07CA, r17
  _txen = txen;
    22b8:	b0 93 cb 07 	sts	0x07CB, r27
  _rxcie = rxcie;
    22bc:	a0 93 cc 07 	sts	0x07CC, r26
  _udrie = udrie;
    22c0:	f0 93 cd 07 	sts	0x07CD, r31
  _u2x = u2x;
    22c4:	e0 93 ce 07 	sts	0x07CE, r30
    22c8:	10 92 d2 07 	sts	0x07D2, r1
    22cc:	10 92 d1 07 	sts	0x07D1, r1
    22d0:	20 93 d3 07 	sts	0x07D3, r18
    22d4:	30 93 d4 07 	sts	0x07D4, r19
    22d8:	40 93 d5 07 	sts	0x07D5, r20
    22dc:	50 93 d6 07 	sts	0x07D6, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    22e0:	70 93 d0 07 	sts	0x07D0, r23
    22e4:	60 93 cf 07 	sts	0x07CF, r22
{
  _rx_buffer = rx_buffer;
    22e8:	81 e8       	ldi	r24, 0x81	; 129
    22ea:	96 e0       	ldi	r25, 0x06	; 6
    22ec:	90 93 dc 07 	sts	0x07DC, r25
    22f0:	80 93 db 07 	sts	0x07DB, r24
  _tx_buffer = tx_buffer;
    22f4:	85 ec       	ldi	r24, 0xC5	; 197
    22f6:	96 e0       	ldi	r25, 0x06	; 6
    22f8:	90 93 de 07 	sts	0x07DE, r25
    22fc:	80 93 dd 07 	sts	0x07DD, r24
  _ubrrh = ubrrh;
    2300:	85 ed       	ldi	r24, 0xD5	; 213
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	90 93 e0 07 	sts	0x07E0, r25
    2308:	80 93 df 07 	sts	0x07DF, r24
  _ubrrl = ubrrl;
    230c:	84 ed       	ldi	r24, 0xD4	; 212
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	90 93 e2 07 	sts	0x07E2, r25
    2314:	80 93 e1 07 	sts	0x07E1, r24
  _ucsra = ucsra;
    2318:	80 ed       	ldi	r24, 0xD0	; 208
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	90 93 e4 07 	sts	0x07E4, r25
    2320:	80 93 e3 07 	sts	0x07E3, r24
  _ucsrb = ucsrb;
    2324:	81 ed       	ldi	r24, 0xD1	; 209
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	90 93 e6 07 	sts	0x07E6, r25
    232c:	80 93 e5 07 	sts	0x07E5, r24
  _udr = udr;
    2330:	86 ed       	ldi	r24, 0xD6	; 214
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	90 93 e8 07 	sts	0x07E8, r25
    2338:	80 93 e7 07 	sts	0x07E7, r24
  _rxen = rxen;
    233c:	10 93 e9 07 	sts	0x07E9, r17
  _txen = txen;
    2340:	b0 93 ea 07 	sts	0x07EA, r27
  _rxcie = rxcie;
    2344:	a0 93 eb 07 	sts	0x07EB, r26
  _udrie = udrie;
    2348:	f0 93 ec 07 	sts	0x07EC, r31
  _u2x = u2x;
    234c:	e0 93 ed 07 	sts	0x07ED, r30
    2350:	10 92 f1 07 	sts	0x07F1, r1
    2354:	10 92 f0 07 	sts	0x07F0, r1
    2358:	20 93 f2 07 	sts	0x07F2, r18
    235c:	30 93 f3 07 	sts	0x07F3, r19
    2360:	40 93 f4 07 	sts	0x07F4, r20
    2364:	50 93 f5 07 	sts	0x07F5, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2368:	70 93 ef 07 	sts	0x07EF, r23
    236c:	60 93 ee 07 	sts	0x07EE, r22
{
  _rx_buffer = rx_buffer;
    2370:	89 e0       	ldi	r24, 0x09	; 9
    2372:	97 e0       	ldi	r25, 0x07	; 7
    2374:	90 93 fb 07 	sts	0x07FB, r25
    2378:	80 93 fa 07 	sts	0x07FA, r24
  _tx_buffer = tx_buffer;
    237c:	8d e4       	ldi	r24, 0x4D	; 77
    237e:	97 e0       	ldi	r25, 0x07	; 7
    2380:	90 93 fd 07 	sts	0x07FD, r25
    2384:	80 93 fc 07 	sts	0x07FC, r24
  _ubrrh = ubrrh;
    2388:	85 e3       	ldi	r24, 0x35	; 53
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	90 93 ff 07 	sts	0x07FF, r25
    2390:	80 93 fe 07 	sts	0x07FE, r24
  _ubrrl = ubrrl;
    2394:	84 e3       	ldi	r24, 0x34	; 52
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	90 93 01 08 	sts	0x0801, r25
    239c:	80 93 00 08 	sts	0x0800, r24
  _ucsra = ucsra;
    23a0:	80 e3       	ldi	r24, 0x30	; 48
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	90 93 03 08 	sts	0x0803, r25
    23a8:	80 93 02 08 	sts	0x0802, r24
  _ucsrb = ucsrb;
    23ac:	81 e3       	ldi	r24, 0x31	; 49
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	90 93 05 08 	sts	0x0805, r25
    23b4:	80 93 04 08 	sts	0x0804, r24
  _udr = udr;
    23b8:	86 e3       	ldi	r24, 0x36	; 54
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	90 93 07 08 	sts	0x0807, r25
    23c0:	80 93 06 08 	sts	0x0806, r24
  _rxen = rxen;
    23c4:	10 93 08 08 	sts	0x0808, r17
  _txen = txen;
    23c8:	b0 93 09 08 	sts	0x0809, r27
  _rxcie = rxcie;
    23cc:	a0 93 0a 08 	sts	0x080A, r26
  _udrie = udrie;
    23d0:	f0 93 0b 08 	sts	0x080B, r31
  _u2x = u2x;
    23d4:	e0 93 0c 08 	sts	0x080C, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    23d8:	1f 91       	pop	r17
    23da:	08 95       	ret

000023dc <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	7c 01       	movw	r14, r24
    23ee:	6b 01       	movw	r12, r22
    23f0:	8a 01       	movw	r16, r20
    23f2:	c0 e0       	ldi	r28, 0x00	; 0
    23f4:	d0 e0       	ldi	r29, 0x00	; 0
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    23f8:	d6 01       	movw	r26, r12
    23fa:	6d 91       	ld	r22, X+
    23fc:	6d 01       	movw	r12, r26
    23fe:	d7 01       	movw	r26, r14
    2400:	ed 91       	ld	r30, X+
    2402:	fc 91       	ld	r31, X
    2404:	01 90       	ld	r0, Z+
    2406:	f0 81       	ld	r31, Z
    2408:	e0 2d       	mov	r30, r0
    240a:	c7 01       	movw	r24, r14
    240c:	19 95       	eicall
    240e:	c8 0f       	add	r28, r24
    2410:	d9 1f       	adc	r29, r25
    2412:	01 50       	subi	r16, 0x01	; 1
    2414:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2416:	01 15       	cp	r16, r1
    2418:	11 05       	cpc	r17, r1
    241a:	71 f7       	brne	.-36     	; 0x23f8 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    241c:	ce 01       	movw	r24, r28
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	08 95       	ret

00002430 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    2430:	ef 92       	push	r14
    2432:	ff 92       	push	r15
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    243e:	8b 01       	movw	r16, r22
    2440:	c0 e0       	ldi	r28, 0x00	; 0
    2442:	d0 e0       	ldi	r29, 0x00	; 0
    2444:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2446:	0f 5f       	subi	r16, 0xFF	; 255
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    244c:	66 23       	and	r22, r22
    244e:	59 f0       	breq	.+22     	; 0x2466 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    2450:	d7 01       	movw	r26, r14
    2452:	ed 91       	ld	r30, X+
    2454:	fc 91       	ld	r31, X
    2456:	01 90       	ld	r0, Z+
    2458:	f0 81       	ld	r31, Z
    245a:	e0 2d       	mov	r30, r0
    245c:	c7 01       	movw	r24, r14
    245e:	19 95       	eicall
    2460:	c8 0f       	add	r28, r24
    2462:	d9 1f       	adc	r29, r25
    2464:	ef cf       	rjmp	.-34     	; 0x2444 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    2466:	ce 01       	movw	r24, r28
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	ef 90       	pop	r14
    2474:	08 95       	ret

00002476 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2480:	dc 01       	movw	r26, r24
    2482:	ed 91       	ld	r30, X+
    2484:	fc 91       	ld	r31, X
    2486:	01 90       	ld	r0, Z+
    2488:	f0 81       	ld	r31, Z
    248a:	e0 2d       	mov	r30, r0
    248c:	6d e0       	ldi	r22, 0x0D	; 13
    248e:	19 95       	eicall
    2490:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    2492:	d8 01       	movw	r26, r16
    2494:	ed 91       	ld	r30, X+
    2496:	fc 91       	ld	r31, X
    2498:	01 90       	ld	r0, Z+
    249a:	f0 81       	ld	r31, Z
    249c:	e0 2d       	mov	r30, r0
    249e:	c8 01       	movw	r24, r16
    24a0:	6a e0       	ldi	r22, 0x0A	; 10
    24a2:	19 95       	eicall
    24a4:	9c 01       	movw	r18, r24
    24a6:	2e 0d       	add	r18, r14
    24a8:	3f 1d       	adc	r19, r15
    24aa:	c9 01       	movw	r24, r18
    24ac:	1f 91       	pop	r17
    24ae:	0f 91       	pop	r16
    24b0:	ff 90       	pop	r15
    24b2:	ef 90       	pop	r14
    24b4:	08 95       	ret

000024b6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    24c0:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN5Print5printEPK19__FlashStringHelper>
    24c4:	8c 01       	movw	r16, r24
  n += println();
    24c6:	c7 01       	movw	r24, r14
    24c8:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print7printlnEv>
    24cc:	9c 01       	movw	r18, r24
    24ce:	20 0f       	add	r18, r16
    24d0:	31 1f       	adc	r19, r17
  return n;
}
    24d2:	c9 01       	movw	r24, r18
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	08 95       	ret

000024de <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	db 01       	movw	r26, r22
    24e4:	0d 90       	ld	r0, X+
    24e6:	00 20       	and	r0, r0
    24e8:	e9 f7       	brne	.-6      	; 0x24e4 <_ZN5Print5writeEPKc+0x6>
    24ea:	11 97       	sbiw	r26, 0x01	; 1
    24ec:	a6 1b       	sub	r26, r22
    24ee:	b7 0b       	sbc	r27, r23
    24f0:	ec 01       	movw	r28, r24
    24f2:	e8 81       	ld	r30, Y
    24f4:	f9 81       	ldd	r31, Y+1	; 0x01
    24f6:	02 80       	ldd	r0, Z+2	; 0x02
    24f8:	f3 81       	ldd	r31, Z+3	; 0x03
    24fa:	e0 2d       	mov	r30, r0
    24fc:	ad 01       	movw	r20, r26
    24fe:	19 95       	eicall
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    2506:	4f 92       	push	r4
    2508:	5f 92       	push	r5
    250a:	7f 92       	push	r7
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	a1 97       	sbiw	r28, 0x21	; 33
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	2c 01       	movw	r4, r24
    2536:	74 2e       	mov	r7, r20
    2538:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    253a:	22 30       	cpi	r18, 0x02	; 2
    253c:	08 f4       	brcc	.+2      	; 0x2540 <_ZN5Print11printNumberEmh+0x3a>
    253e:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2540:	19 a2       	std	Y+33, r1	; 0x21
    2542:	31 e2       	ldi	r19, 0x21	; 33
    2544:	c3 2e       	mov	r12, r19
    2546:	d1 2c       	mov	r13, r1
    2548:	cc 0e       	add	r12, r28
    254a:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    254c:	82 2e       	mov	r8, r18
    254e:	99 24       	eor	r9, r9
    2550:	aa 24       	eor	r10, r10
    2552:	bb 24       	eor	r11, r11
    2554:	67 2d       	mov	r22, r7
    2556:	75 2f       	mov	r23, r21
    2558:	a5 01       	movw	r20, r10
    255a:	94 01       	movw	r18, r8
    255c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
    2560:	79 01       	movw	r14, r18
    2562:	8a 01       	movw	r16, r20
    char c = m - base * n;
    2564:	c8 01       	movw	r24, r16
    2566:	b7 01       	movw	r22, r14
    2568:	a5 01       	movw	r20, r10
    256a:	94 01       	movw	r18, r8
    256c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__mulsi3>
    2570:	47 2d       	mov	r20, r7
    2572:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2574:	08 94       	sec
    2576:	c1 08       	sbc	r12, r1
    2578:	d1 08       	sbc	r13, r1
    257a:	4a 30       	cpi	r20, 0x0A	; 10
    257c:	14 f4       	brge	.+4      	; 0x2582 <_ZN5Print11printNumberEmh+0x7c>
    257e:	40 5d       	subi	r20, 0xD0	; 208
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <_ZN5Print11printNumberEmh+0x7e>
    2582:	49 5c       	subi	r20, 0xC9	; 201
    2584:	f6 01       	movw	r30, r12
    2586:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2588:	e1 14       	cp	r14, r1
    258a:	f1 04       	cpc	r15, r1
    258c:	01 05       	cpc	r16, r1
    258e:	11 05       	cpc	r17, r1
    2590:	21 f0       	breq	.+8      	; 0x259a <_ZN5Print11printNumberEmh+0x94>
    2592:	7e 2c       	mov	r7, r14
    2594:	5f 2d       	mov	r21, r15
    2596:	c8 01       	movw	r24, r16
    2598:	dd cf       	rjmp	.-70     	; 0x2554 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    259a:	c2 01       	movw	r24, r4
    259c:	b6 01       	movw	r22, r12
    259e:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN5Print5writeEPKc>
}
    25a2:	a1 96       	adiw	r28, 0x21	; 33
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	df 90       	pop	r13
    25bc:	cf 90       	pop	r12
    25be:	bf 90       	pop	r11
    25c0:	af 90       	pop	r10
    25c2:	9f 90       	pop	r9
    25c4:	8f 90       	pop	r8
    25c6:	7f 90       	pop	r7
    25c8:	5f 90       	pop	r5
    25ca:	4f 90       	pop	r4
    25cc:	08 95       	ret

000025ce <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    25ce:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    25d0:	21 15       	cp	r18, r1
    25d2:	31 05       	cpc	r19, r1
    25d4:	41 f4       	brne	.+16     	; 0x25e6 <_ZN5Print5printEmi+0x18>
    25d6:	ed 91       	ld	r30, X+
    25d8:	fc 91       	ld	r31, X
    25da:	01 90       	ld	r0, Z+
    25dc:	f0 81       	ld	r31, Z
    25de:	e0 2d       	mov	r30, r0
    25e0:	64 2f       	mov	r22, r20
    25e2:	19 95       	eicall
    25e4:	08 95       	ret
  else return printNumber(n, base);
    25e6:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print11printNumberEmh>
}
    25ea:	08 95       	ret

000025ec <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    25f6:	e6 2e       	mov	r14, r22
    25f8:	ff 24       	eor	r15, r15
    25fa:	00 e0       	ldi	r16, 0x00	; 0
    25fc:	10 e0       	ldi	r17, 0x00	; 0
    25fe:	b8 01       	movw	r22, r16
    2600:	a7 01       	movw	r20, r14
    2602:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN5Print5printEmi>
}
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	08 95       	ret

00002610 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    2610:	cf 92       	push	r12
    2612:	df 92       	push	r13
    2614:	ef 92       	push	r14
    2616:	ff 92       	push	r15
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	6c 01       	movw	r12, r24
    261e:	e6 2e       	mov	r14, r22
    2620:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    2622:	ff 24       	eor	r15, r15
    2624:	00 e0       	ldi	r16, 0x00	; 0
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	b8 01       	movw	r22, r16
    262a:	a7 01       	movw	r20, r14
    262c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN5Print5printEmi>
    2630:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    2632:	c6 01       	movw	r24, r12
    2634:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print7printlnEv>
    2638:	08 0f       	add	r16, r24
    263a:	19 1f       	adc	r17, r25
  return n;
}
    263c:	c8 01       	movw	r24, r16
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	ff 90       	pop	r15
    2644:	ef 90       	pop	r14
    2646:	df 90       	pop	r13
    2648:	cf 90       	pop	r12
    264a:	08 95       	ret

0000264c <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	ec 01       	movw	r28, r24
    265e:	6a 01       	movw	r12, r20
    2660:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    2662:	21 15       	cp	r18, r1
    2664:	31 05       	cpc	r19, r1
    2666:	41 f4       	brne	.+16     	; 0x2678 <_ZN5Print5printEli+0x2c>
    return write(n);
    2668:	e8 81       	ld	r30, Y
    266a:	f9 81       	ldd	r31, Y+1	; 0x01
    266c:	01 90       	ld	r0, Z+
    266e:	f0 81       	ld	r31, Z
    2670:	e0 2d       	mov	r30, r0
    2672:	64 2f       	mov	r22, r20
    2674:	19 95       	eicall
    2676:	1f c0       	rjmp	.+62     	; 0x26b6 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    2678:	2a 30       	cpi	r18, 0x0A	; 10
    267a:	31 05       	cpc	r19, r1
    267c:	d1 f4       	brne	.+52     	; 0x26b2 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    267e:	77 ff       	sbrs	r23, 7
    2680:	17 c0       	rjmp	.+46     	; 0x26b0 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2682:	e8 81       	ld	r30, Y
    2684:	f9 81       	ldd	r31, Y+1	; 0x01
    2686:	01 90       	ld	r0, Z+
    2688:	f0 81       	ld	r31, Z
    268a:	e0 2d       	mov	r30, r0
    268c:	6d e2       	ldi	r22, 0x2D	; 45
    268e:	19 95       	eicall
    2690:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    2692:	44 27       	eor	r20, r20
    2694:	55 27       	eor	r21, r21
    2696:	ba 01       	movw	r22, r20
    2698:	4c 19       	sub	r20, r12
    269a:	5d 09       	sbc	r21, r13
    269c:	6e 09       	sbc	r22, r14
    269e:	7f 09       	sbc	r23, r15
    26a0:	ce 01       	movw	r24, r28
    26a2:	2a e0       	ldi	r18, 0x0A	; 10
    26a4:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print11printNumberEmh>
    26a8:	98 01       	movw	r18, r16
    26aa:	28 0f       	add	r18, r24
    26ac:	39 1f       	adc	r19, r25
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    26b0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    26b2:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print11printNumberEmh>
    26b6:	9c 01       	movw	r18, r24
  }
}
    26b8:	c9 01       	movw	r24, r18
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	08 95       	ret

000026cc <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	7b 01       	movw	r14, r22
    26d6:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    26d8:	00 27       	eor	r16, r16
    26da:	f7 fc       	sbrc	r15, 7
    26dc:	00 95       	com	r16
    26de:	10 2f       	mov	r17, r16
    26e0:	b8 01       	movw	r22, r16
    26e2:	a7 01       	movw	r20, r14
    26e4:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN5Print5printEli>
}
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	08 95       	ret

000026f2 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    26f2:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN5Print5writeEPKc>
}
    26f6:	08 95       	ret

000026f8 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    2702:	0e 94 6f 12 	call	0x24de	; 0x24de <_ZN5Print5writeEPKc>
    2706:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    2708:	c7 01       	movw	r24, r14
    270a:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print7printlnEv>
    270e:	08 0f       	add	r16, r24
    2710:	19 1f       	adc	r17, r25
  return n;
}
    2712:	c8 01       	movw	r24, r16
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	08 95       	ret

0000271e <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    271e:	1f 92       	push	r1
    2720:	0f 92       	push	r0
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	0f 92       	push	r0
    2726:	11 24       	eor	r1, r1
    2728:	2f 93       	push	r18
    272a:	3f 93       	push	r19
    272c:	8f 93       	push	r24
    272e:	9f 93       	push	r25
    2730:	af 93       	push	r26
    2732:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2734:	80 91 11 08 	lds	r24, 0x0811
    2738:	90 91 12 08 	lds	r25, 0x0812
    273c:	a0 91 13 08 	lds	r26, 0x0813
    2740:	b0 91 14 08 	lds	r27, 0x0814
	unsigned char f = timer0_fract;
    2744:	30 91 15 08 	lds	r19, 0x0815

	m += MILLIS_INC;
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	a1 1d       	adc	r26, r1
    274c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    274e:	23 2f       	mov	r18, r19
    2750:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2752:	2d 37       	cpi	r18, 0x7D	; 125
    2754:	20 f0       	brcs	.+8      	; 0x275e <__vector_23+0x40>
		f -= FRACT_MAX;
    2756:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	a1 1d       	adc	r26, r1
    275c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    275e:	20 93 15 08 	sts	0x0815, r18
	timer0_millis = m;
    2762:	80 93 11 08 	sts	0x0811, r24
    2766:	90 93 12 08 	sts	0x0812, r25
    276a:	a0 93 13 08 	sts	0x0813, r26
    276e:	b0 93 14 08 	sts	0x0814, r27
	timer0_overflow_count++;
    2772:	80 91 0d 08 	lds	r24, 0x080D
    2776:	90 91 0e 08 	lds	r25, 0x080E
    277a:	a0 91 0f 08 	lds	r26, 0x080F
    277e:	b0 91 10 08 	lds	r27, 0x0810
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	a1 1d       	adc	r26, r1
    2786:	b1 1d       	adc	r27, r1
    2788:	80 93 0d 08 	sts	0x080D, r24
    278c:	90 93 0e 08 	sts	0x080E, r25
    2790:	a0 93 0f 08 	sts	0x080F, r26
    2794:	b0 93 10 08 	sts	0x0810, r27
}
    2798:	bf 91       	pop	r27
    279a:	af 91       	pop	r26
    279c:	9f 91       	pop	r25
    279e:	8f 91       	pop	r24
    27a0:	3f 91       	pop	r19
    27a2:	2f 91       	pop	r18
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    27ae:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    27b0:	f8 94       	cli
	m = timer0_millis;
    27b2:	20 91 11 08 	lds	r18, 0x0811
    27b6:	30 91 12 08 	lds	r19, 0x0812
    27ba:	40 91 13 08 	lds	r20, 0x0813
    27be:	50 91 14 08 	lds	r21, 0x0814
	SREG = oldSREG;
    27c2:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    27c4:	b9 01       	movw	r22, r18
    27c6:	ca 01       	movw	r24, r20
    27c8:	08 95       	ret

000027ca <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    27ce:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    27d0:	f8 94       	cli
	m = timer0_overflow_count;
    27d2:	80 91 0d 08 	lds	r24, 0x080D
    27d6:	90 91 0e 08 	lds	r25, 0x080E
    27da:	a0 91 0f 08 	lds	r26, 0x080F
    27de:	b0 91 10 08 	lds	r27, 0x0810
#if defined(TCNT0)
	t = TCNT0;
    27e2:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    27e4:	a8 9b       	sbis	0x15, 0	; 21
    27e6:	05 c0       	rjmp	.+10     	; 0x27f2 <delay+0x28>
    27e8:	6f 3f       	cpi	r22, 0xFF	; 255
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <delay+0x28>
		m++;
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	a1 1d       	adc	r26, r1
    27f0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    27f2:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    27f4:	ba 2f       	mov	r27, r26
    27f6:	a9 2f       	mov	r26, r25
    27f8:	98 2f       	mov	r25, r24
    27fa:	88 27       	eor	r24, r24
    27fc:	86 0f       	add	r24, r22
    27fe:	91 1d       	adc	r25, r1
    2800:	a1 1d       	adc	r26, r1
    2802:	b1 1d       	adc	r27, r1
    2804:	62 e0       	ldi	r22, 0x02	; 2
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	aa 1f       	adc	r26, r26
    280c:	bb 1f       	adc	r27, r27
    280e:	6a 95       	dec	r22
    2810:	d1 f7       	brne	.-12     	; 0x2806 <delay+0x3c>
    2812:	bc 01       	movw	r22, r24
    2814:	2d c0       	rjmp	.+90     	; 0x2870 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2816:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    2818:	f8 94       	cli
	m = timer0_overflow_count;
    281a:	80 91 0d 08 	lds	r24, 0x080D
    281e:	90 91 0e 08 	lds	r25, 0x080E
    2822:	a0 91 0f 08 	lds	r26, 0x080F
    2826:	b0 91 10 08 	lds	r27, 0x0810
#if defined(TCNT0)
	t = TCNT0;
    282a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    282c:	a8 9b       	sbis	0x15, 0	; 21
    282e:	05 c0       	rjmp	.+10     	; 0x283a <delay+0x70>
    2830:	ef 3f       	cpi	r30, 0xFF	; 255
    2832:	19 f0       	breq	.+6      	; 0x283a <delay+0x70>
		m++;
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	a1 1d       	adc	r26, r1
    2838:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    283a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    283c:	ba 2f       	mov	r27, r26
    283e:	a9 2f       	mov	r26, r25
    2840:	98 2f       	mov	r25, r24
    2842:	88 27       	eor	r24, r24
    2844:	8e 0f       	add	r24, r30
    2846:	91 1d       	adc	r25, r1
    2848:	a1 1d       	adc	r26, r1
    284a:	b1 1d       	adc	r27, r1
    284c:	e2 e0       	ldi	r30, 0x02	; 2
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	aa 1f       	adc	r26, r26
    2854:	bb 1f       	adc	r27, r27
    2856:	ea 95       	dec	r30
    2858:	d1 f7       	brne	.-12     	; 0x284e <delay+0x84>
    285a:	86 1b       	sub	r24, r22
    285c:	97 0b       	sbc	r25, r23
    285e:	88 5e       	subi	r24, 0xE8	; 232
    2860:	93 40       	sbci	r25, 0x03	; 3
    2862:	c8 f2       	brcs	.-78     	; 0x2816 <delay+0x4c>
			ms--;
    2864:	21 50       	subi	r18, 0x01	; 1
    2866:	30 40       	sbci	r19, 0x00	; 0
    2868:	40 40       	sbci	r20, 0x00	; 0
    286a:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    286c:	68 51       	subi	r22, 0x18	; 24
    286e:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2870:	21 15       	cp	r18, r1
    2872:	31 05       	cpc	r19, r1
    2874:	41 05       	cpc	r20, r1
    2876:	51 05       	cpc	r21, r1
    2878:	71 f6       	brne	.-100    	; 0x2816 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    287a:	08 95       	ret

0000287c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2880:	48 2f       	mov	r20, r24
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	ca 01       	movw	r24, r20
    2886:	85 5d       	subi	r24, 0xD5	; 213
    2888:	9c 4f       	sbci	r25, 0xFC	; 252
    288a:	fc 01       	movw	r30, r24
    288c:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    288e:	4b 51       	subi	r20, 0x1B	; 27
    2890:	5d 4f       	sbci	r21, 0xFD	; 253
    2892:	fa 01       	movw	r30, r20
    2894:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2896:	88 23       	and	r24, r24
    2898:	69 f1       	breq	.+90     	; 0x28f4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	fc 01       	movw	r30, r24
    28a2:	e9 56       	subi	r30, 0x69	; 105
    28a4:	fd 4f       	sbci	r31, 0xFD	; 253
    28a6:	a5 91       	lpm	r26, Z+
    28a8:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    28aa:	fc 01       	movw	r30, r24
    28ac:	ef 54       	subi	r30, 0x4F	; 79
    28ae:	fd 4f       	sbci	r31, 0xFD	; 253
    28b0:	c5 91       	lpm	r28, Z+
    28b2:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    28b4:	66 23       	and	r22, r22
    28b6:	51 f4       	brne	.+20     	; 0x28cc <pinMode+0x50>
		uint8_t oldSREG = SREG;
    28b8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    28ba:	f8 94       	cli
		*reg &= ~bit;
    28bc:	8c 91       	ld	r24, X
    28be:	93 2f       	mov	r25, r19
    28c0:	90 95       	com	r25
    28c2:	89 23       	and	r24, r25
    28c4:	8c 93       	st	X, r24
		*out &= ~bit;
    28c6:	88 81       	ld	r24, Y
    28c8:	89 23       	and	r24, r25
    28ca:	0b c0       	rjmp	.+22     	; 0x28e2 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    28cc:	62 30       	cpi	r22, 0x02	; 2
    28ce:	61 f4       	brne	.+24     	; 0x28e8 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    28d0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    28d2:	f8 94       	cli
		*reg &= ~bit;
    28d4:	8c 91       	ld	r24, X
    28d6:	93 2f       	mov	r25, r19
    28d8:	90 95       	com	r25
    28da:	89 23       	and	r24, r25
    28dc:	8c 93       	st	X, r24
		*out |= bit;
    28de:	88 81       	ld	r24, Y
    28e0:	83 2b       	or	r24, r19
    28e2:	88 83       	st	Y, r24
		SREG = oldSREG;
    28e4:	2f bf       	out	0x3f, r18	; 63
    28e6:	06 c0       	rjmp	.+12     	; 0x28f4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    28e8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    28ea:	f8 94       	cli
		*reg |= bit;
    28ec:	8c 91       	ld	r24, X
    28ee:	83 2b       	or	r24, r19
    28f0:	8c 93       	st	X, r24
		SREG = oldSREG;
    28f2:	9f bf       	out	0x3f, r25	; 63
	}
}
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    28fa:	89 30       	cpi	r24, 0x09	; 9
    28fc:	09 f4       	brne	.+2      	; 0x2900 <turnOffPWM+0x6>
    28fe:	49 c0       	rjmp	.+146    	; 0x2992 <turnOffPWM+0x98>
    2900:	8a 30       	cpi	r24, 0x0A	; 10
    2902:	a0 f4       	brcc	.+40     	; 0x292c <turnOffPWM+0x32>
    2904:	84 30       	cpi	r24, 0x04	; 4
    2906:	51 f1       	breq	.+84     	; 0x295c <turnOffPWM+0x62>
    2908:	85 30       	cpi	r24, 0x05	; 5
    290a:	40 f4       	brcc	.+16     	; 0x291c <turnOffPWM+0x22>
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	79 f1       	breq	.+94     	; 0x296e <turnOffPWM+0x74>
    2910:	83 30       	cpi	r24, 0x03	; 3
    2912:	00 f5       	brcc	.+64     	; 0x2954 <turnOffPWM+0x5a>
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	09 f0       	breq	.+2      	; 0x291a <turnOffPWM+0x20>
    2918:	63 c0       	rjmp	.+198    	; 0x29e0 <turnOffPWM+0xe6>
    291a:	26 c0       	rjmp	.+76     	; 0x2968 <turnOffPWM+0x6e>
    291c:	87 30       	cpi	r24, 0x07	; 7
    291e:	79 f1       	breq	.+94     	; 0x297e <turnOffPWM+0x84>
    2920:	88 30       	cpi	r24, 0x08	; 8
    2922:	98 f5       	brcc	.+102    	; 0x298a <turnOffPWM+0x90>
    2924:	86 30       	cpi	r24, 0x06	; 6
    2926:	09 f0       	breq	.+2      	; 0x292a <turnOffPWM+0x30>
    2928:	5b c0       	rjmp	.+182    	; 0x29e0 <turnOffPWM+0xe6>
    292a:	25 c0       	rjmp	.+74     	; 0x2976 <turnOffPWM+0x7c>
    292c:	8d 30       	cpi	r24, 0x0D	; 13
    292e:	09 f4       	brne	.+2      	; 0x2932 <turnOffPWM+0x38>
    2930:	42 c0       	rjmp	.+132    	; 0x29b6 <turnOffPWM+0xbc>
    2932:	8e 30       	cpi	r24, 0x0E	; 14
    2934:	28 f4       	brcc	.+10     	; 0x2940 <turnOffPWM+0x46>
    2936:	8b 30       	cpi	r24, 0x0B	; 11
    2938:	b1 f1       	breq	.+108    	; 0x29a6 <turnOffPWM+0xac>
    293a:	8c 30       	cpi	r24, 0x0C	; 12
    293c:	c0 f5       	brcc	.+112    	; 0x29ae <turnOffPWM+0xb4>
    293e:	2d c0       	rjmp	.+90     	; 0x299a <turnOffPWM+0xa0>
    2940:	80 31       	cpi	r24, 0x10	; 16
    2942:	09 f4       	brne	.+2      	; 0x2946 <turnOffPWM+0x4c>
    2944:	42 c0       	rjmp	.+132    	; 0x29ca <turnOffPWM+0xd0>
    2946:	81 31       	cpi	r24, 0x11	; 17
    2948:	09 f4       	brne	.+2      	; 0x294c <turnOffPWM+0x52>
    294a:	45 c0       	rjmp	.+138    	; 0x29d6 <turnOffPWM+0xdc>
    294c:	8f 30       	cpi	r24, 0x0F	; 15
    294e:	09 f0       	breq	.+2      	; 0x2952 <turnOffPWM+0x58>
    2950:	47 c0       	rjmp	.+142    	; 0x29e0 <turnOffPWM+0xe6>
    2952:	37 c0       	rjmp	.+110    	; 0x29c2 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2954:	80 91 80 00 	lds	r24, 0x0080
    2958:	8f 77       	andi	r24, 0x7F	; 127
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    295c:	80 91 80 00 	lds	r24, 0x0080
    2960:	8f 7d       	andi	r24, 0xDF	; 223
    2962:	80 93 80 00 	sts	0x0080, r24
    2966:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2968:	84 b5       	in	r24, 0x24	; 36
    296a:	8f 77       	andi	r24, 0x7F	; 127
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    296e:	84 b5       	in	r24, 0x24	; 36
    2970:	8f 7d       	andi	r24, 0xDF	; 223
    2972:	84 bd       	out	0x24, r24	; 36
    2974:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2976:	80 91 b0 00 	lds	r24, 0x00B0
    297a:	8f 77       	andi	r24, 0x7F	; 127
    297c:	03 c0       	rjmp	.+6      	; 0x2984 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    297e:	80 91 b0 00 	lds	r24, 0x00B0
    2982:	8f 7d       	andi	r24, 0xDF	; 223
    2984:	80 93 b0 00 	sts	0x00B0, r24
    2988:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    298a:	80 91 90 00 	lds	r24, 0x0090
    298e:	8f 77       	andi	r24, 0x7F	; 127
    2990:	07 c0       	rjmp	.+14     	; 0x29a0 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2992:	80 91 90 00 	lds	r24, 0x0090
    2996:	8f 7d       	andi	r24, 0xDF	; 223
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    299a:	80 91 90 00 	lds	r24, 0x0090
    299e:	87 7f       	andi	r24, 0xF7	; 247
    29a0:	80 93 90 00 	sts	0x0090, r24
    29a4:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    29a6:	80 91 a0 00 	lds	r24, 0x00A0
    29aa:	8f 77       	andi	r24, 0x7F	; 127
    29ac:	07 c0       	rjmp	.+14     	; 0x29bc <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    29ae:	80 91 a0 00 	lds	r24, 0x00A0
    29b2:	8f 7d       	andi	r24, 0xDF	; 223
    29b4:	03 c0       	rjmp	.+6      	; 0x29bc <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    29b6:	80 91 a0 00 	lds	r24, 0x00A0
    29ba:	87 7f       	andi	r24, 0xF7	; 247
    29bc:	80 93 a0 00 	sts	0x00A0, r24
    29c0:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    29c2:	80 91 20 01 	lds	r24, 0x0120
    29c6:	8f 77       	andi	r24, 0x7F	; 127
    29c8:	03 c0       	rjmp	.+6      	; 0x29d0 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    29ca:	80 91 20 01 	lds	r24, 0x0120
    29ce:	8f 7d       	andi	r24, 0xDF	; 223
    29d0:	80 93 20 01 	sts	0x0120, r24
    29d4:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    29d6:	80 91 20 01 	lds	r24, 0x0120
    29da:	87 7f       	andi	r24, 0xF7	; 247
    29dc:	80 93 20 01 	sts	0x0120, r24
    29e0:	08 95       	ret

000029e2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    29e2:	ff 92       	push	r15
    29e4:	0f 93       	push	r16
    29e6:	1f 93       	push	r17
    29e8:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    29ea:	48 2f       	mov	r20, r24
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	ca 01       	movw	r24, r20
    29f0:	8f 58       	subi	r24, 0x8F	; 143
    29f2:	9c 4f       	sbci	r25, 0xFC	; 252
    29f4:	fc 01       	movw	r30, r24
    29f6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    29f8:	ca 01       	movw	r24, r20
    29fa:	85 5d       	subi	r24, 0xD5	; 213
    29fc:	9c 4f       	sbci	r25, 0xFC	; 252
    29fe:	fc 01       	movw	r30, r24
    2a00:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2a02:	4b 51       	subi	r20, 0x1B	; 27
    2a04:	5d 4f       	sbci	r21, 0xFD	; 253
    2a06:	fa 01       	movw	r30, r20
    2a08:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2a0a:	00 23       	and	r16, r16
    2a0c:	c9 f0       	breq	.+50     	; 0x2a40 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2a0e:	22 23       	and	r18, r18
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <digitalWrite+0x36>
    2a12:	82 2f       	mov	r24, r18
    2a14:	0e 94 7d 14 	call	0x28fa	; 0x28fa <turnOffPWM>

	out = portOutputRegister(port);
    2a18:	e0 2f       	mov	r30, r16
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	ee 0f       	add	r30, r30
    2a1e:	ff 1f       	adc	r31, r31
    2a20:	ef 54       	subi	r30, 0x4F	; 79
    2a22:	fd 4f       	sbci	r31, 0xFD	; 253
    2a24:	a5 91       	lpm	r26, Z+
    2a26:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    2a28:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2a2a:	f8 94       	cli

	if (val == LOW) {
    2a2c:	ff 20       	and	r15, r15
    2a2e:	21 f4       	brne	.+8      	; 0x2a38 <digitalWrite+0x56>
		*out &= ~bit;
    2a30:	8c 91       	ld	r24, X
    2a32:	10 95       	com	r17
    2a34:	81 23       	and	r24, r17
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <digitalWrite+0x5a>
	} else {
		*out |= bit;
    2a38:	8c 91       	ld	r24, X
    2a3a:	81 2b       	or	r24, r17
    2a3c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2a3e:	9f bf       	out	0x3f, r25	; 63
}
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	08 95       	ret

00002a48 <__mulsi3>:
    2a48:	62 9f       	mul	r22, r18
    2a4a:	d0 01       	movw	r26, r0
    2a4c:	73 9f       	mul	r23, r19
    2a4e:	f0 01       	movw	r30, r0
    2a50:	82 9f       	mul	r24, r18
    2a52:	e0 0d       	add	r30, r0
    2a54:	f1 1d       	adc	r31, r1
    2a56:	64 9f       	mul	r22, r20
    2a58:	e0 0d       	add	r30, r0
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	92 9f       	mul	r25, r18
    2a5e:	f0 0d       	add	r31, r0
    2a60:	83 9f       	mul	r24, r19
    2a62:	f0 0d       	add	r31, r0
    2a64:	74 9f       	mul	r23, r20
    2a66:	f0 0d       	add	r31, r0
    2a68:	65 9f       	mul	r22, r21
    2a6a:	f0 0d       	add	r31, r0
    2a6c:	99 27       	eor	r25, r25
    2a6e:	72 9f       	mul	r23, r18
    2a70:	b0 0d       	add	r27, r0
    2a72:	e1 1d       	adc	r30, r1
    2a74:	f9 1f       	adc	r31, r25
    2a76:	63 9f       	mul	r22, r19
    2a78:	b0 0d       	add	r27, r0
    2a7a:	e1 1d       	adc	r30, r1
    2a7c:	f9 1f       	adc	r31, r25
    2a7e:	bd 01       	movw	r22, r26
    2a80:	cf 01       	movw	r24, r30
    2a82:	11 24       	eor	r1, r1
    2a84:	08 95       	ret

00002a86 <__udivmodsi4>:
    2a86:	a1 e2       	ldi	r26, 0x21	; 33
    2a88:	1a 2e       	mov	r1, r26
    2a8a:	aa 1b       	sub	r26, r26
    2a8c:	bb 1b       	sub	r27, r27
    2a8e:	fd 01       	movw	r30, r26
    2a90:	0d c0       	rjmp	.+26     	; 0x2aac <__udivmodsi4_ep>

00002a92 <__udivmodsi4_loop>:
    2a92:	aa 1f       	adc	r26, r26
    2a94:	bb 1f       	adc	r27, r27
    2a96:	ee 1f       	adc	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	a2 17       	cp	r26, r18
    2a9c:	b3 07       	cpc	r27, r19
    2a9e:	e4 07       	cpc	r30, r20
    2aa0:	f5 07       	cpc	r31, r21
    2aa2:	20 f0       	brcs	.+8      	; 0x2aac <__udivmodsi4_ep>
    2aa4:	a2 1b       	sub	r26, r18
    2aa6:	b3 0b       	sbc	r27, r19
    2aa8:	e4 0b       	sbc	r30, r20
    2aaa:	f5 0b       	sbc	r31, r21

00002aac <__udivmodsi4_ep>:
    2aac:	66 1f       	adc	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	1a 94       	dec	r1
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <__udivmodsi4_loop>
    2ab8:	60 95       	com	r22
    2aba:	70 95       	com	r23
    2abc:	80 95       	com	r24
    2abe:	90 95       	com	r25
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	bd 01       	movw	r22, r26
    2ac6:	cf 01       	movw	r24, r30
    2ac8:	08 95       	ret

00002aca <__tablejump2__>:
    2aca:	ee 0f       	add	r30, r30
    2acc:	ff 1f       	adc	r31, r31

00002ace <__tablejump__>:
    2ace:	05 90       	lpm	r0, Z+
    2ad0:	f4 91       	lpm	r31, Z+
    2ad2:	e0 2d       	mov	r30, r0
    2ad4:	19 94       	eijmp

00002ad6 <_exit>:
    2ad6:	f8 94       	cli

00002ad8 <__stop_program>:
    2ad8:	ff cf       	rjmp	.-2      	; 0x2ad8 <__stop_program>
