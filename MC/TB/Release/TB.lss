
TB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800200  00003536  000035ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000573  008002fe  008002fe  000036c8  2**0
                  ALLOC
  3 .debug_aranges 000008c0  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000167d  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c8ee  00000000  00000000  00005605  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002129  00000000  00000000  00011ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005ff0  00000000  00000000  0001401c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000fa0  00000000  00000000  0001a00c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002c47  00000000  00000000  0001afac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005961  00000000  00000000  0001dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000860  00000000  00000000  00023554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	for (int i = 0; i < size; i++) {
		sendBuf[putPointer++] = data[i];
		++amountSendBytes;
	}
	return true;
}
       0:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__ctors_end>
/* does nothing, returns TRUE. Left for compatibility with old sketches               */
/* will be deleted eventually                                           */
///* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
///* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
///* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
boolean MAX3421E::vbusPwr ( boolean action )
       4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    dev0ep.rcvToggle = bmRCVTOG0;
}
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
				return(-251);	
			}		
			
			Temperature_Byte = Para1_Read;
	return (Temperature_Byte);               // Returns the read temperature
}
       c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}
      10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
      18:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      1c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      20:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      24:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      28:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      30:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      34:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      38:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      3c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      40:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      44:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      50:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      54:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      58:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      5c:	0c 94 36 18 	jmp	0x306c	; 0x306c <__vector_23>
      60:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      64:	0c 94 15 12 	jmp	0x242a	; 0x242a <__vector_25>
      68:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__vector_26>
      6c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      70:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      74:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      78:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      7c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      80:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      84:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      88:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      8c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      90:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__vector_36>
      94:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__vector_37>
      98:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      9c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      ac:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      bc:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      cc:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_51>
      d0:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_52>
      d4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      d8:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__vector_54>
      dc:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__vector_55>
      e0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

000000e4 <_ZZN16AndroidAccessory11isConnectedEvE3__c_4>:
      e4:	64 69 73 63 6f 6e 6e 65 63 74 65 64 20 75 73 62     disconnected usb
      f4:	20 64 65 76 69 63 65 0a 00                           device..

000000fd <_ZZN16AndroidAccessory11isConnectedEvE3__c_3>:
      fd:	66 6f 75 6e 64 20 70 6f 73 73 69 62 6c 65 20 64     found possible d
     10d:	65 76 69 63 65 2e 0a 20 73 77 69 74 63 68 69 6e     evice.. switchin
     11d:	67 20 74 6f 20 73 65 72 69 61 6c 20 6d 6f 64 65     g to serial mode
     12d:	0a 00                                               ..

0000012f <_ZZN16AndroidAccessory11isConnectedEvE3__c_2>:
     12f:	66 6f 75 6e 64 20 61 6e 64 72 6f 69 64 20 61 63     found android ac
     13f:	65 73 73 6f 72 79 20 64 65 76 69 63 65 0a 00        essory device..

0000014e <_ZZN16AndroidAccessory11isConnectedEvE3__c_1>:
     14e:	0a 44 65 76 69 63 65 20 64 65 73 63 72 69 70 74     .Device descript
     15e:	6f 72 20 63 61 6e 6e 6f 74 20 62 65 20 72 65 74     or cannot be ret
     16e:	72 69 65 76 65 64 2e 20 54 72 79 69 6e 67 20 61     rieved. Trying a
     17e:	67 61 69 6e 0a 00                                   gain..

00000184 <_ZZN16AndroidAccessory11isConnectedEvE3__c_0>:
     184:	52 65 71 75 65 73 74 69 6e 67 20 64 65 76 69 63     Requesting devic
     194:	65 20 64 65 73 63 72 69 70 74 6f 72 2e 0a 00        e descriptor...

000001a3 <_ZZN16AndroidAccessory11isConnectedEvE3__c>:
     1a3:	0a 44 65 76 69 63 65 20 61 64 64 72 65 73 73 65     .Device addresse
     1b3:	64 2e 2e 2e 20 00                                   d... .

000001b9 <_ZZN16AndroidAccessory16configureAndroidEvE3__c>:
     1b9:	43 61 6e 27 74 20 73 65 74 20 63 6f 6e 66 69 67     Can't set config
     1c9:	20 74 6f 20 31 0a 00                                 to 1..

000001d0 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_5>:
     1d0:	63 61 6e 27 74 20 66 69 6e 64 20 61 63 63 65 73     can't find acces
     1e0:	73 6f 72 79 20 65 6e 64 70 6f 69 6e 74 73 00        sory endpoints.

000001ef <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_4>:
     1ef:	75 6e 6b 6f 77 6e 20 64 65 73 63 20 74 79 70 65     unkown desc type
     1ff:	20 00                                                .

00000201 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_3>:
     201:	69 6e 74 65 72 66 61 63 65 20 64 65 73 63 0a 00     interface desc..

00000211 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_2>:
     211:	63 6f 6e 66 69 67 20 64 65 73 63 0a 00              config desc..

0000021e <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_1>:
     21e:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     22e:	20 64 65 73 63 72 69 70 74 6f 72 0a 00               descriptor..

0000023b <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_0>:
     23b:	63 6f 6e 66 69 67 20 64 65 73 63 72 69 70 74 6f     config descripto
     24b:	72 20 74 6f 6f 20 6c 61 72 67 65 0a 00              r too large..

00000258 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c>:
     258:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     268:	20 64 65 73 63 72 69 70 74 6f 72 20 6c 65 6e 67      descriptor leng
     278:	74 68 0a 00                                         th..

0000027c <_ZZN16AndroidAccessory12switchDeviceEhE3__c_0>:
     27c:	0a 00                                               ..

0000027e <_ZZN16AndroidAccessory12switchDeviceEhE3__c>:
     27e:	64 65 76 69 63 65 20 73 75 70 70 6f 72 74 73 20     device supports 
     28e:	70 72 6f 74 63 6f 6c 20 00                          protcol .

00000297 <port_to_mode_PGM>:
     297:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2a7:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002b1 <port_to_output_PGM>:
     2b1:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2c1:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002cb <port_to_input_PGM>:
     2cb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2db:	00 01 00 00 03 01 06 01 09 01                       ..........

000002e5 <digital_pin_to_port_PGM>:
     2e5:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2f5:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     305:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     315:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     325:	0b 0b 0b 0b 0b 0b                                   ......

0000032b <digital_pin_to_bit_mask_PGM>:
     32b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     33b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     34b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     35b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     36b:	04 08 10 20 40 80                                   ... @.

00000371 <digital_pin_to_timer_PGM>:
     371:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     39d:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b8 <__ctors_start>:
     3b8:	77 02       	muls	r23, r23
     3ba:	68 15       	cp	r22, r8

000003bc <__ctors_end>:
     3bc:	11 24       	eor	r1, r1
     3be:	1f be       	out	0x3f, r1	; 63
     3c0:	cf ef       	ldi	r28, 0xFF	; 255
     3c2:	d1 e2       	ldi	r29, 0x21	; 33
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	0c bf       	out	0x3c, r16	; 60

000003cc <__do_copy_data>:
     3cc:	12 e0       	ldi	r17, 0x02	; 2
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b2 e0       	ldi	r27, 0x02	; 2
     3d2:	e6 e3       	ldi	r30, 0x36	; 54
     3d4:	f5 e3       	ldi	r31, 0x35	; 53
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	0b bf       	out	0x3b, r16	; 59
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <__do_copy_data+0x14>
     3dc:	07 90       	elpm	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	ae 3f       	cpi	r26, 0xFE	; 254
     3e2:	b1 07       	cpc	r27, r17
     3e4:	d9 f7       	brne	.-10     	; 0x3dc <__do_copy_data+0x10>
     3e6:	1b be       	out	0x3b, r1	; 59

000003e8 <__do_clear_bss>:
     3e8:	18 e0       	ldi	r17, 0x08	; 8
     3ea:	ae ef       	ldi	r26, 0xFE	; 254
     3ec:	b2 e0       	ldi	r27, 0x02	; 2
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <.do_clear_bss_start>

000003f0 <.do_clear_bss_loop>:
     3f0:	1d 92       	st	X+, r1

000003f2 <.do_clear_bss_start>:
     3f2:	a1 37       	cpi	r26, 0x71	; 113
     3f4:	b1 07       	cpc	r27, r17
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <.do_clear_bss_loop>

000003f8 <__do_global_ctors>:
     3f8:	13 e0       	ldi	r17, 0x03	; 3
     3fa:	cc eb       	ldi	r28, 0xBC	; 188
     3fc:	d3 e0       	ldi	r29, 0x03	; 3
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <.do_global_ctors_start>

00000400 <.do_global_ctors_loop>:
     400:	22 97       	sbiw	r28, 0x02	; 2
     402:	fe 01       	movw	r30, r28
     404:	0e 94 95 1a 	call	0x352a	; 0x352a <__tablejump__>

00000408 <.do_global_ctors_start>:
     408:	c8 3b       	cpi	r28, 0xB8	; 184
     40a:	d1 07       	cpc	r29, r17
     40c:	c9 f7       	brne	.-14     	; 0x400 <.do_global_ctors_loop>
     40e:	0e 94 27 18 	call	0x304e	; 0x304e <main>
     412:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <_exit>

00000416 <__bad_interrupt>:
     416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041a <_ZN3Usb8sizeDataEv>:
bool Usb::isConnected() {
	return android.isConnected();
}

int Usb::sizeData() {
	return android.available();
     41a:	8e 5f       	subi	r24, 0xFE	; 254
     41c:	9e 4f       	sbci	r25, 0xFE	; 254
     41e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_ZN16AndroidAccessory9availableEv>
}
     422:	08 95       	ret

00000424 <_ZN3Usb11isConnectedEv>:
	}
	return true;
}

bool Usb::isConnected() {
	return android.isConnected();
     424:	8e 5f       	subi	r24, 0xFE	; 254
     426:	9e 4f       	sbci	r25, 0xFE	; 254
     428:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN16AndroidAccessory11isConnectedEv>
}
     42c:	08 95       	ret

0000042e <_ZN3Usb9reconnectEv>:
		amountSendBytes = 0;
	}
}

void Usb::reconnect() {
	android.powerOn();
     42e:	8e 5f       	subi	r24, 0xFE	; 254
     430:	9e 4f       	sbci	r25, 0xFE	; 254
     432:	0e 94 b5 11 	call	0x236a	; 0x236a <_ZN16AndroidAccessory7powerOnEv>
}
     436:	08 95       	ret

00000438 <_ZN3Usb4sendEv>:

u_char Usb::read() {
	return android.read();
}

void Usb::send() {
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
	if (amountSendBytes > 0) {
     440:	88 81       	ld	r24, Y
     442:	88 23       	and	r24, r24
     444:	31 f1       	breq	.+76     	; 0x492 <_ZN3Usb4sendEv+0x5a>
		if (putPointer < sendOffset) //buffer overflow
     446:	69 81       	ldd	r22, Y+1	; 0x01
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	86 17       	cp	r24, r22
     44c:	90 f4       	brcc	.+36     	; 0x472 <_ZN3Usb4sendEv+0x3a>
				{
			byte sendBytes = 255 - sendOffset;
     44e:	16 2f       	mov	r17, r22
     450:	10 95       	com	r17
			android.write(&sendBuf[sendOffset], sendBytes);
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	6d 5f       	subi	r22, 0xFD	; 253
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	6c 0f       	add	r22, r28
     45a:	7d 1f       	adc	r23, r29
     45c:	ce 01       	movw	r24, r28
     45e:	8e 5f       	subi	r24, 0xFE	; 254
     460:	9e 4f       	sbci	r25, 0xFE	; 254
     462:	41 2f       	mov	r20, r17
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN16AndroidAccessory5writeEPhj>
			sendOffset = 0;
     46a:	19 82       	std	Y+1, r1	; 0x01
			amountSendBytes -= sendBytes;
     46c:	88 81       	ld	r24, Y
     46e:	81 1b       	sub	r24, r17
     470:	88 83       	st	Y, r24
		}
		android.write(&sendBuf[sendOffset], amountSendBytes);
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	6d 5f       	subi	r22, 0xFD	; 253
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	6c 0f       	add	r22, r28
     47c:	7d 1f       	adc	r23, r29
     47e:	48 81       	ld	r20, Y
     480:	ce 01       	movw	r24, r28
     482:	8e 5f       	subi	r24, 0xFE	; 254
     484:	9e 4f       	sbci	r25, 0xFE	; 254
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN16AndroidAccessory5writeEPhj>
		sendOffset = putPointer;
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
		amountSendBytes = 0;
     490:	18 82       	st	Y, r1
	}
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	08 95       	ret

0000049a <_ZN3Usb4readEv>:
				APPLICATION_NAME, ACCESSORY_NAME, VERSIONN_NUMBER, URL,
				SERIAL_NUMBER) {
}

u_char Usb::read() {
	return android.read();
     49a:	8e 5f       	subi	r24, 0xFE	; 254
     49c:	9e 4f       	sbci	r25, 0xFE	; 254
     49e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN16AndroidAccessory4readEv>
}
     4a2:	08 95       	ret

000004a4 <_ZN3UsbC1Ev>:
#define VERSIONN_NUMBER "1.0"
#define SERIAL_NUMBER "1"
#define URL "http://labs.arduino.cc/adk/ADK_count" // the URL of your app online
Usb usb;

Usb::Usb() :
     4a4:	cf 92       	push	r12
     4a6:	df 92       	push	r13
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	fc 01       	movw	r30, r24
		amountSendBytes(0), sendOffset(0), putPointer(0), android(COMPANY_NAME,
				APPLICATION_NAME, ACCESSORY_NAME, VERSIONN_NUMBER, URL,
				SERIAL_NUMBER) {
     4b2:	10 82       	st	Z, r1
     4b4:	11 82       	std	Z+1, r1	; 0x01
     4b6:	12 82       	std	Z+2, r1	; 0x02
     4b8:	8e 5f       	subi	r24, 0xFE	; 254
     4ba:	9e 4f       	sbci	r25, 0xFE	; 254
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	4b e0       	ldi	r20, 0x0B	; 11
     4c2:	52 e0       	ldi	r21, 0x02	; 2
     4c4:	2b e1       	ldi	r18, 0x1B	; 27
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	04 e2       	ldi	r16, 0x24	; 36
     4ca:	12 e0       	ldi	r17, 0x02	; 2
     4cc:	f8 e2       	ldi	r31, 0x28	; 40
     4ce:	ef 2e       	mov	r14, r31
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	ff 2e       	mov	r15, r31
     4d4:	ed e4       	ldi	r30, 0x4D	; 77
     4d6:	ce 2e       	mov	r12, r30
     4d8:	e2 e0       	ldi	r30, 0x02	; 2
     4da:	de 2e       	mov	r13, r30
     4dc:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>
}
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	df 90       	pop	r13
     4ea:	cf 90       	pop	r12
     4ec:	08 95       	ret

000004ee <_GLOBAL__I_usb>:

// make up anything you want for these
#define VERSIONN_NUMBER "1.0"
#define SERIAL_NUMBER "1"
#define URL "http://labs.arduino.cc/adk/ADK_count" // the URL of your app online
Usb usb;
     4ee:	8e ef       	ldi	r24, 0xFE	; 254
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN3UsbC1Ev>
	return android.isConnected();
}

int Usb::sizeData() {
	return android.available();
}
     4f6:	08 95       	ret

000004f8 <_ZN5Motor4InitEv>:

#include "Motor.h"

Motor motors;

void Motor::Init() {
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
	pinMode(MOTOR_POWER, OUTPUT);
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
	digitalWrite(MOTOR_POWER, ON);
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	e8 2e       	mov	r14, r24
     514:	f1 2c       	mov	r15, r1
     516:	01 2d       	mov	r16, r1
     518:	11 2d       	mov	r17, r1

	for (int i = 1; i < 0xFF; i++) { // This "for" loop will take about 20 Sec to compelet and is used to loop though all speeds that Dynamixel can be and send reset instuction
		long Baudrate_BPS = 0;
		Baudrate_BPS = 2000000 / (i + 1); // Calculate Baudrate as ber "Robotis e-manual"
		Dynamixel.begin(Baudrate_BPS, SERVO_ControlPin); // Set Ardiuno Serial speed and control pin
     51a:	60 e8       	ldi	r22, 0x80	; 128
     51c:	74 e8       	ldi	r23, 0x84	; 132
     51e:	8e e1       	ldi	r24, 0x1E	; 30
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a8 01       	movw	r20, r16
     524:	97 01       	movw	r18, r14
     526:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__divmodsi4>
     52a:	84 eb       	ldi	r24, 0xB4	; 180
     52c:	95 e0       	ldi	r25, 0x05	; 5
     52e:	ba 01       	movw	r22, r20
     530:	a9 01       	movw	r20, r18
     532:	22 e0       	ldi	r18, 0x02	; 2
     534:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN14DynamixelClass5beginElh>
		delay(10);
     538:	6a e0       	ldi	r22, 0x0A	; 10
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 8c 18 	call	0x3118	; 0x3118 <delay>
		Dynamixel.reset(0xFE); // Broadcast to all Dynamixel IDs(0xFE is the ID for all Dynamixel to responed) and Reset Dynamixel to factory default
     544:	84 eb       	ldi	r24, 0xB4	; 180
     546:	95 e0       	ldi	r25, 0x05	; 5
     548:	6e ef       	ldi	r22, 0xFE	; 254
     54a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN14DynamixelClass5resetEh>
		delay(100);
     54e:	64 e6       	ldi	r22, 0x64	; 100
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 8c 18 	call	0x3118	; 0x3118 <delay>
     55a:	08 94       	sec
     55c:	e1 1c       	adc	r14, r1
     55e:	f1 1c       	adc	r15, r1
     560:	01 1d       	adc	r16, r1
     562:	11 1d       	adc	r17, r1

void Motor::Init() {
	pinMode(MOTOR_POWER, OUTPUT);
	digitalWrite(MOTOR_POWER, ON);

	for (int i = 1; i < 0xFF; i++) { // This "for" loop will take about 20 Sec to compelet and is used to loop though all speeds that Dynamixel can be and send reset instuction
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	e8 16       	cp	r14, r24
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	f8 06       	cpc	r15, r24
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 07       	cpc	r16, r24
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	18 07       	cpc	r17, r24
     574:	91 f6       	brne	.-92     	; 0x51a <_ZN5Motor4InitEv+0x22>
		Dynamixel.reset(0xFE); // Broadcast to all Dynamixel IDs(0xFE is the ID for all Dynamixel to responed) and Reset Dynamixel to factory default
		delay(100);
	}

	// Now that the Dynamixel is reset to factory setting we will program its Baudrate and ID
	Dynamixel.begin(1000000, SERVO_ControlPin); // Set Ardiuno Serial speed to factory default speed of 57600
     576:	84 eb       	ldi	r24, 0xB4	; 180
     578:	95 e0       	ldi	r25, 0x05	; 5
     57a:	40 e4       	ldi	r20, 0x40	; 64
     57c:	52 e4       	ldi	r21, 0x42	; 66
     57e:	6f e0       	ldi	r22, 0x0F	; 15
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	22 e0       	ldi	r18, 0x02	; 2
     584:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN14DynamixelClass5beginElh>
	Dynamixel.setID(0xFE, SERVO_ID); // Broadcast to all Dynamixel IDs(0xFE) and set with new ID
     588:	84 eb       	ldi	r24, 0xB4	; 180
     58a:	95 e0       	ldi	r25, 0x05	; 5
     58c:	6e ef       	ldi	r22, 0xFE	; 254
     58e:	41 e0       	ldi	r20, 0x01	; 1
     590:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN14DynamixelClass5setIDEhh>
	Dynamixel.setBD(SERVO_ID, SERVO_SET_Baudrate); // Set Dynamixel to new serial speed
     594:	84 eb       	ldi	r24, 0xB4	; 180
     596:	95 e0       	ldi	r25, 0x05	; 5
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	20 e4       	ldi	r18, 0x40	; 64
     59c:	32 e4       	ldi	r19, 0x42	; 66
     59e:	4f e0       	ldi	r20, 0x0F	; 15
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN14DynamixelClass5setBDEhl>

	Dynamixel.begin(SERVO_SET_Baudrate, SERVO_ControlPin); // We now need to set Ardiuno to the new Baudrate speed
     5a6:	84 eb       	ldi	r24, 0xB4	; 180
     5a8:	95 e0       	ldi	r25, 0x05	; 5
     5aa:	40 e4       	ldi	r20, 0x40	; 64
     5ac:	52 e4       	ldi	r21, 0x42	; 66
     5ae:	6f e0       	ldi	r22, 0x0F	; 15
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN14DynamixelClass5beginElh>
	Dynamixel.ledState(SERVO_ID, ON);                   // Turn Dynamixel LED on
     5b8:	84 eb       	ldi	r24, 0xB4	; 180
     5ba:	95 e0       	ldi	r25, 0x05	; 5
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	0e 94 cd 0a 	call	0x159a	; 0x159a <_ZN14DynamixelClass8ledStateEhb>
	Dynamixel.endlessEnable(SERVO_ID, ON); // Turn Wheel mode OFF, must be on if using wheel mode
     5c4:	84 eb       	ldi	r24, 0xB4	; 180
     5c6:	95 e0       	ldi	r25, 0x05	; 5
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	41 e0       	ldi	r20, 0x01	; 1
     5cc:	0e 94 cb 0b 	call	0x1796	; 0x1796 <_ZN14DynamixelClass13endlessEnableEhb>
	Dynamixel.torqueMax(SERVO_ID, 0x2FF);   // Set Dynamixel to max torque limit
     5d0:	84 eb       	ldi	r24, 0xB4	; 180
     5d2:	95 e0       	ldi	r25, 0x05	; 5
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	4f ef       	ldi	r20, 0xFF	; 255
     5d8:	52 e0       	ldi	r21, 0x02	; 2
     5da:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN14DynamixelClass9torqueMaxEhi>
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <_ZN12StateMachine4InitEv>:
#include "common/StateMachine.h"
#include "network/Usb.h"

StateMachine stateMachine; //Global StateMachine Object

void StateMachine::Init() {
     5e8:	fc 01       	movw	r30, r24
	currentState = PhoneDisconnected;
     5ea:	8b e2       	ldi	r24, 0x2B	; 43
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	91 83       	std	Z+1, r25	; 0x01
     5f0:	80 83       	st	Z, r24
}
     5f2:	08 95       	ret

000005f4 <_ZN12StateMachine12requireStateE7TBState>:
		break;
	}
	this->postHandle();
}

TBState StateMachine::requireState(TBState state) {
     5f4:	fc 01       	movw	r30, r24
	switch (currentState) {
     5f6:	20 81       	ld	r18, Z
     5f8:	31 81       	ldd	r19, Z+1	; 0x01
     5fa:	2b 32       	cpi	r18, 0x2B	; 43
     5fc:	31 05       	cpc	r19, r1
     5fe:	69 f0       	breq	.+26     	; 0x61a <_ZN12StateMachine12requireStateE7TBState+0x26>
     600:	2c 32       	cpi	r18, 0x2C	; 44
     602:	31 05       	cpc	r19, r1
     604:	89 f4       	brne	.+34     	; 0x628 <_ZN12StateMachine12requireStateE7TBState+0x34>
		return currentState;
	case PositionReached:
		return currentState;

	case PhoneConnect: {
		switch (state) {
     606:	61 15       	cp	r22, r1
     608:	71 05       	cpc	r23, r1
     60a:	21 f0       	breq	.+8      	; 0x614 <_ZN12StateMachine12requireStateE7TBState+0x20>
     60c:	6b 32       	cpi	r22, 0x2B	; 43
     60e:	71 05       	cpc	r23, r1
     610:	49 f4       	brne	.+18     	; 0x624 <_ZN12StateMachine12requireStateE7TBState+0x30>
     612:	06 c0       	rjmp	.+12     	; 0x620 <_ZN12StateMachine12requireStateE7TBState+0x2c>
		case Idle:
			currentState = Idle;
     614:	11 82       	std	Z+1, r1	; 0x01
     616:	10 82       	st	Z, r1
     618:	05 c0       	rjmp	.+10     	; 0x624 <_ZN12StateMachine12requireStateE7TBState+0x30>
		}
		return currentState;
	}

	case PhoneDisconnected: {
		switch (state) {
     61a:	6c 32       	cpi	r22, 0x2C	; 44
     61c:	71 05       	cpc	r23, r1
     61e:	11 f4       	brne	.+4      	; 0x624 <_ZN12StateMachine12requireStateE7TBState+0x30>
		case PhoneConnect:
			currentState = PhoneConnect;
     620:	71 83       	std	Z+1, r23	; 0x01
     622:	60 83       	st	Z, r22
			break;
		default:
			//TODO: Log Error
			break;
		}
		return currentState;
     624:	20 81       	ld	r18, Z
     626:	31 81       	ldd	r19, Z+1	; 0x01
	case Error:
		return currentState;
	default:
		return currentState;
	}
}
     628:	c9 01       	movw	r24, r18
     62a:	08 95       	ret

0000062c <_ZN12StateMachine10postHandleEv>:
		else
		   digitalWrite(LED13, LOW);
	}
}

void StateMachine::postHandle() {
     62c:	fc 01       	movw	r30, r24
	if (currentState != PhoneDisconnected) {
     62e:	80 81       	ld	r24, Z
     630:	91 81       	ldd	r25, Z+1	; 0x01
     632:	8b 97       	sbiw	r24, 0x2b	; 43
     634:	21 f0       	breq	.+8      	; 0x63e <_ZN12StateMachine10postHandleEv+0x12>
		usb.send();
     636:	8e ef       	ldi	r24, 0xFE	; 254
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN3Usb4sendEv>
     63e:	08 95       	ret

00000640 <_ZN12StateMachine9preHandleEv>:

void StateMachine::Init() {
	currentState = PhoneDisconnected;
}

void StateMachine::preHandle() {
     640:	1f 93       	push	r17
     642:	fc 01       	movw	r30, r24
	if (currentState != PhoneDisconnected && usb.sizeData() > 0) {
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	8b 97       	sbiw	r24, 0x2b	; 43
     64a:	41 f1       	breq	.+80     	; 0x69c <_ZN12StateMachine9preHandleEv+0x5c>
     64c:	8e ef       	ldi	r24, 0xFE	; 254
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN3Usb8sizeDataEv>
     654:	18 16       	cp	r1, r24
     656:	19 06       	cpc	r1, r25
     658:	0c f5       	brge	.+66     	; 0x69c <_ZN12StateMachine9preHandleEv+0x5c>
		u_char val = usb.read();
     65a:	8e ef       	ldi	r24, 0xFE	; 254
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN3Usb4readEv>
     662:	18 2f       	mov	r17, r24
	    Serial.print("Read from usb: ");
     664:	8c ee       	ldi	r24, 0xEC	; 236
     666:	97 e0       	ldi	r25, 0x07	; 7
     668:	6f e4       	ldi	r22, 0x4F	; 79
     66a:	72 e0       	ldi	r23, 0x02	; 2
     66c:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
	    Serial.print( val );
     670:	8c ee       	ldi	r24, 0xEC	; 236
     672:	97 e0       	ldi	r25, 0x07	; 7
     674:	61 2f       	mov	r22, r17
     676:	4a e0       	ldi	r20, 0x0A	; 10
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN5Print5printEhi>
	    Serial.print("\n\r");
     67e:	8c ee       	ldi	r24, 0xEC	; 236
     680:	97 e0       	ldi	r25, 0x07	; 7
     682:	6f e5       	ldi	r22, 0x5F	; 95
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
		if( val == 1 )
     68a:	11 30       	cpi	r17, 0x01	; 1
     68c:	19 f4       	brne	.+6      	; 0x694 <_ZN12StateMachine9preHandleEv+0x54>
		   digitalWrite(LED13, HIGH);
     68e:	8d e0       	ldi	r24, 0x0D	; 13
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	02 c0       	rjmp	.+4      	; 0x698 <_ZN12StateMachine9preHandleEv+0x58>
		else
		   digitalWrite(LED13, LOW);
     694:	8d e0       	ldi	r24, 0x0D	; 13
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
	}
}
     69c:	1f 91       	pop	r17
     69e:	08 95       	ret

000006a0 <_ZN12StateMachine4CallEv>:
	if (currentState != PhoneDisconnected) {
		usb.send();
	}
}

void StateMachine::Call() {
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
	this->preHandle();
     6a6:	0e 94 20 03 	call	0x640	; 0x640 <_ZN12StateMachine9preHandleEv>
	switch (currentState) {
     6aa:	88 81       	ld	r24, Y
     6ac:	99 81       	ldd	r25, Y+1	; 0x01
     6ae:	8b 32       	cpi	r24, 0x2B	; 43
     6b0:	91 05       	cpc	r25, r1
     6b2:	51 f1       	breq	.+84     	; 0x708 <_ZN12StateMachine4CallEv+0x68>
     6b4:	8c 32       	cpi	r24, 0x2C	; 44
     6b6:	91 05       	cpc	r25, r1
     6b8:	49 f0       	breq	.+18     	; 0x6cc <_ZN12StateMachine4CallEv+0x2c>
     6ba:	89 2b       	or	r24, r25
     6bc:	b1 f5       	brne	.+108    	; 0x72a <_ZN12StateMachine4CallEv+0x8a>
	case Idle:
		delay(100);
     6be:	64 e6       	ldi	r22, 0x64	; 100
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 8c 18 	call	0x3118	; 0x3118 <delay>
     6ca:	2f c0       	rjmp	.+94     	; 0x72a <_ZN12StateMachine4CallEv+0x8a>
		break;
	case PositionReached:
		break;

	case PhoneConnect: {
		Serial.print("Try Connect\n\r");
     6cc:	8c ee       	ldi	r24, 0xEC	; 236
     6ce:	97 e0       	ldi	r25, 0x07	; 7
     6d0:	62 e6       	ldi	r22, 0x62	; 98
     6d2:	72 e0       	ldi	r23, 0x02	; 2
     6d4:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
		usb.reconnect();
     6d8:	8e ef       	ldi	r24, 0xFE	; 254
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Usb9reconnectEv>
		if (!usb.isConnected())
     6e0:	8e ef       	ldi	r24, 0xFE	; 254
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 12 02 	call	0x424	; 0x424 <_ZN3Usb11isConnectedEv>
     6e8:	88 23       	and	r24, r24
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <_ZN12StateMachine4CallEv+0x54>
			requireState(PhoneDisconnected);
     6ec:	ce 01       	movw	r24, r28
     6ee:	6b e2       	ldi	r22, 0x2B	; 43
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	19 c0       	rjmp	.+50     	; 0x726 <_ZN12StateMachine4CallEv+0x86>
		else
		{
			Serial.print("Connected\n\r");
     6f4:	8c ee       	ldi	r24, 0xEC	; 236
     6f6:	97 e0       	ldi	r25, 0x07	; 7
     6f8:	60 e7       	ldi	r22, 0x70	; 112
     6fa:	72 e0       	ldi	r23, 0x02	; 2
     6fc:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
			requireState(Idle);
     700:	ce 01       	movw	r24, r28
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	0f c0       	rjmp	.+30     	; 0x726 <_ZN12StateMachine4CallEv+0x86>
		}
		break;
	}

	case PhoneDisconnected: {
		Serial.print("Phone Disconnected\n\r");
     708:	8c ee       	ldi	r24, 0xEC	; 236
     70a:	97 e0       	ldi	r25, 0x07	; 7
     70c:	6c e7       	ldi	r22, 0x7C	; 124
     70e:	72 e0       	ldi	r23, 0x02	; 2
     710:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
		delay(1000);
     714:	68 ee       	ldi	r22, 0xE8	; 232
     716:	73 e0       	ldi	r23, 0x03	; 3
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 8c 18 	call	0x3118	; 0x3118 <delay>
		this->requireState(PhoneConnect);
     720:	ce 01       	movw	r24, r28
     722:	6c e2       	ldi	r22, 0x2C	; 44
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN12StateMachine12requireStateE7TBState>
	}
		break;
	case Error:
		break;
	}
	this->postHandle();
     72a:	ce 01       	movw	r24, r28
     72c:	0e 94 16 03 	call	0x62c	; 0x62c <_ZN12StateMachine10postHandleEv>
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <_ZN8MAX3421E12getVbusStateEv>:
}

byte MAX3421E::getVbusState( void )
{ 
    return( vbusState );
}
     736:	80 91 9c 05 	lds	r24, 0x059C
     73a:	08 95       	ret

0000073c <_ZN8MAX3421E7bytesRdEhhPc>:
    digitalWrite(MAX_SS,HIGH); 
    return( SPDR );
}
/* multiple-bytes register read                             */
/* returns a pointer to a memory position after last read   */
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	16 2f       	mov	r17, r22
     746:	04 2f       	mov	r16, r20
     748:	e9 01       	movw	r28, r18
{
    digitalWrite(MAX_SS,LOW);
     74a:	85 e3       	ldi	r24, 0x35	; 53
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    SPDR = reg;      
     752:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));    //wait
     754:	0d b4       	in	r0, 0x2d	; 45
     756:	07 fe       	sbrs	r0, 7
     758:	fd cf       	rjmp	.-6      	; 0x754 <_ZN8MAX3421E7bytesRdEhhPc+0x18>
     75a:	90 2f       	mov	r25, r16
     75c:	fe 01       	movw	r30, r28
     75e:	07 c0       	rjmp	.+14     	; 0x76e <_ZN8MAX3421E7bytesRdEhhPc+0x32>
    while( nbytes ) {
      SPDR = 0; //send empty byte
     760:	1e bc       	out	0x2e, r1	; 46
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <_ZN8MAX3421E7bytesRdEhhPc+0x26>
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
      SPDR = 0; //send empty byte
      nbytes--;
     768:	91 50       	subi	r25, 0x01	; 1
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
     76a:	8e b5       	in	r24, 0x2e	; 46
     76c:	81 93       	st	Z+, r24
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
     76e:	99 23       	and	r25, r25
     770:	b9 f7       	brne	.-18     	; 0x760 <_ZN8MAX3421E7bytesRdEhhPc+0x24>
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
      data++;
    }
    digitalWrite(MAX_SS,HIGH);
     772:	85 e3       	ldi	r24, 0x35	; 53
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
     77a:	9e 01       	movw	r18, r28
     77c:	20 0f       	add	r18, r16
     77e:	31 1d       	adc	r19, r1
    return( data );   
}
     780:	c9 01       	movw	r24, r18
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <_ZN8MAX3421E5regRdEh>:
    regWr( rIOPINS2, val );
    
    return;     
}
/* Single host register read        */
byte MAX3421E::regRd( byte reg )    
     78c:	1f 93       	push	r17
     78e:	16 2f       	mov	r17, r22
{
  byte tmp;
    digitalWrite(MAX_SS,LOW);
     790:	85 e3       	ldi	r24, 0x35	; 53
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    SPDR = reg;
     798:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));
     79a:	0d b4       	in	r0, 0x2d	; 45
     79c:	07 fe       	sbrs	r0, 7
     79e:	fd cf       	rjmp	.-6      	; 0x79a <_ZN8MAX3421E5regRdEh+0xe>
    SPDR = 0; //send empty byte
     7a0:	1e bc       	out	0x2e, r1	; 46
    while(!( SPSR & ( 1 << SPIF )));
     7a2:	0d b4       	in	r0, 0x2d	; 45
     7a4:	07 fe       	sbrs	r0, 7
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <_ZN8MAX3421E5regRdEh+0x16>
    digitalWrite(MAX_SS,HIGH); 
     7a8:	85 e3       	ldi	r24, 0x35	; 53
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    return( SPDR );
     7b0:	8e b5       	in	r24, 0x2e	; 46
}
     7b2:	1f 91       	pop	r17
     7b4:	08 95       	ret

000007b6 <_ZN8MAX3421E10GpxHandlerEv>:
    regWr( rHIRQ, HIRQ_sendback );
    return( HIRQ_sendback );
}
byte MAX3421E::GpxHandler()
{
 byte GPINIRQ = regRd( rGPINIRQ );          //read GPIN IRQ register
     7b6:	60 eb       	ldi	r22, 0xB0	; 176
     7b8:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
//        delay( 1000 );
//        vbusPwr( ON );
//        regWr( rGPINIRQ, bmGPINIRQ7 );
//    }       
    return( GPINIRQ );
}
     7bc:	08 95       	ret

000007be <_ZN8MAX3421E7bytesWrEhhPc>:
      digitalWrite(MAX_SS,HIGH);
      return;
}
/* multiple-byte write */
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	16 2f       	mov	r17, r22
     7c8:	04 2f       	mov	r16, r20
     7ca:	e9 01       	movw	r28, r18
{
    digitalWrite(MAX_SS,LOW);
     7cc:	85 e3       	ldi	r24, 0x35	; 53
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    SPDR = ( reg | 0x02 );
     7d4:	12 60       	ori	r17, 0x02	; 2
     7d6:	1e bd       	out	0x2e, r17	; 46
     7d8:	fe 01       	movw	r30, r28
     7da:	90 2f       	mov	r25, r16
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <_ZN8MAX3421E7bytesWrEhhPc+0x2c>
    while( nbytes-- ) {
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <_ZN8MAX3421E7bytesWrEhhPc+0x20>
      SPDR = ( *data );               // send next data byte
     7e4:	81 91       	ld	r24, Z+
     7e6:	8e bd       	out	0x2e, r24	; 46
      data++;                         // advance data pointer
     7e8:	91 50       	subi	r25, 0x01	; 1
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = ( reg | 0x02 );
    while( nbytes-- ) {
     7ea:	99 23       	and	r25, r25
     7ec:	c1 f7       	brne	.-16     	; 0x7de <_ZN8MAX3421E7bytesWrEhhPc+0x20>
     7ee:	c0 0f       	add	r28, r16
     7f0:	d1 1d       	adc	r29, r1
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
      SPDR = ( *data );               // send next data byte
      data++;                         // advance data pointer
    }
    while(!( SPSR & ( 1 << SPIF )));
     7f2:	0d b4       	in	r0, 0x2d	; 45
     7f4:	07 fe       	sbrs	r0, 7
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <_ZN8MAX3421E7bytesWrEhhPc+0x34>
    digitalWrite(MAX_SS,HIGH);
     7f8:	85 e3       	ldi	r24, 0x35	; 53
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    return( data );
}
     800:	ce 01       	movw	r24, r28
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <_ZN8MAX3421E5regWrEhh>:
//{
//    digitalWrite( pin, HIGH );
//    digitalWrite( pin, LOW );
//}
/* Single host register write   */
void MAX3421E::regWr( byte reg, byte val)
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	18 2f       	mov	r17, r24
     812:	06 2f       	mov	r16, r22
{
      digitalWrite(MAX_SS,LOW);
     814:	85 e3       	ldi	r24, 0x35	; 53
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
      SPDR = ( reg | 0x02 );
     81c:	12 60       	ori	r17, 0x02	; 2
     81e:	1e bd       	out	0x2e, r17	; 46
      while(!( SPSR & ( 1 << SPIF )));
     820:	0d b4       	in	r0, 0x2d	; 45
     822:	07 fe       	sbrs	r0, 7
     824:	fd cf       	rjmp	.-6      	; 0x820 <_ZN8MAX3421E5regWrEhh+0x14>
      SPDR = val;
     826:	0e bd       	out	0x2e, r16	; 46
      while(!( SPSR & ( 1 << SPIF )));
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <_ZN8MAX3421E5regWrEhh+0x1c>
      digitalWrite(MAX_SS,HIGH);
     82e:	85 e3       	ldi	r24, 0x35	; 53
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
      return;
}
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	08 95       	ret

0000083c <_ZN8MAX3421E8busprobeEv>:
//        return( false );
//    }                      
    return( true );                                             // power on/off successful                       
}
/* probe bus to determine device presense and speed and switch host to this speed */
void MAX3421E::busprobe( void )
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ec 01       	movw	r28, r24
{
 byte bus_sample;
    bus_sample = regRd( rHRSL );            //Get J,K status
     842:	68 ef       	ldi	r22, 0xF8	; 248
     844:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
    bus_sample &= ( bmJSTATUS|bmKSTATUS );      //zero the rest of the byte
    switch( bus_sample ) {                          //start full-speed or low-speed host 
     848:	80 7c       	andi	r24, 0xC0	; 192
     84a:	80 34       	cpi	r24, 0x40	; 64
     84c:	89 f0       	breq	.+34     	; 0x870 <_ZN8MAX3421E8busprobeEv+0x34>
     84e:	81 34       	cpi	r24, 0x41	; 65
     850:	18 f4       	brcc	.+6      	; 0x858 <_ZN8MAX3421E8busprobeEv+0x1c>
     852:	88 23       	and	r24, r24
     854:	19 f1       	breq	.+70     	; 0x89c <_ZN8MAX3421E8busprobeEv+0x60>
     856:	28 c0       	rjmp	.+80     	; 0x8a8 <_ZN8MAX3421E8busprobeEv+0x6c>
     858:	80 38       	cpi	r24, 0x80	; 128
     85a:	19 f0       	breq	.+6      	; 0x862 <_ZN8MAX3421E8busprobeEv+0x26>
     85c:	80 3c       	cpi	r24, 0xC0	; 192
     85e:	21 f5       	brne	.+72     	; 0x8a8 <_ZN8MAX3421E8busprobeEv+0x6c>
     860:	19 c0       	rjmp	.+50     	; 0x894 <_ZN8MAX3421E8busprobeEv+0x58>
        case( bmJSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
     862:	ce 01       	movw	r24, r28
     864:	68 ed       	ldi	r22, 0xD8	; 216
     866:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     86a:	81 fd       	sbrc	r24, 1
     86c:	07 c0       	rjmp	.+14     	; 0x87c <_ZN8MAX3421E8busprobeEv+0x40>
     86e:	0c c0       	rjmp	.+24     	; 0x888 <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST);        //start low-speed host
                vbusState = LSHOST;
            }
            break;
        case( bmKSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
     870:	ce 01       	movw	r24, r28
     872:	68 ed       	ldi	r22, 0xD8	; 216
     874:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     878:	81 fd       	sbrc	r24, 1
     87a:	06 c0       	rjmp	.+12     	; 0x888 <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST );       //start low-speed host
     87c:	88 ed       	ldi	r24, 0xD8	; 216
     87e:	6b ec       	ldi	r22, 0xCB	; 203
     880:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
                vbusState = LSHOST;
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	07 c0       	rjmp	.+14     	; 0x896 <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            else {
                regWr( rMODE, MODE_FS_HOST );       //start full-speed host
     888:	88 ed       	ldi	r24, 0xD8	; 216
     88a:	69 ec       	ldi	r22, 0xC9	; 201
     88c:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
                vbusState = FSHOST;
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	01 c0       	rjmp	.+2      	; 0x896 <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            break;
        case( bmSE1 ):              //illegal state
            vbusState = SE1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 9c 05 	sts	0x059C, r24
     89a:	06 c0       	rjmp	.+12     	; 0x8a8 <_ZN8MAX3421E8busprobeEv+0x6c>
            break;
        case( bmSE0 ):              //disconnected state
            regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ);
     89c:	88 ed       	ldi	r24, 0xD8	; 216
     89e:	61 ed       	ldi	r22, 0xD1	; 209
     8a0:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
            vbusState = SE0;
     8a4:	10 92 9c 05 	sts	0x059C, r1
            break;
        }//end switch( bus_sample )
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <_ZN8MAX3421E10IntHandlerEv>:
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
byte MAX3421E::IntHandler()
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
{
 byte HIRQ;
 byte HIRQ_sendback = 0x00;
    HIRQ = regRd( rHIRQ );                  //determine interrupt source
     8b6:	68 ec       	ldi	r22, 0xC8	; 200
     8b8:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
    //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
    //    HIRQ_sendback |= bmFRAMEIRQ;
    //}//end FRAMEIRQ handling
    if( HIRQ & bmCONDETIRQ ) {
     8bc:	85 fd       	sbrc	r24, 5
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <_ZN8MAX3421E10IntHandlerEv+0x16>
     8c0:	10 e0       	ldi	r17, 0x00	; 0
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <_ZN8MAX3421E10IntHandlerEv+0x1e>
        busprobe();
     8c4:	ce 01       	movw	r24, r28
     8c6:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN8MAX3421E8busprobeEv>
     8ca:	10 e2       	ldi	r17, 0x20	; 32
        HIRQ_sendback |= bmCONDETIRQ;
    }
    /* End HIRQ interrupts handling, clear serviced IRQs    */
    regWr( rHIRQ, HIRQ_sendback );
     8cc:	88 ec       	ldi	r24, 0xC8	; 200
     8ce:	61 2f       	mov	r22, r17
     8d0:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    return( HIRQ_sendback );
}
     8d4:	81 2f       	mov	r24, r17
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	08 95       	ret

000008de <_ZN8MAX3421E4TaskEv>:
    busprobe();                                                             //check if anything is connected
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
}
/* MAX3421 state change task and interrupt handler */
byte MAX3421E::Task( void )
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_INT );    
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
     8e6:	66 9b       	sbis	0x0c, 6	; 12
     8e8:	0a c0       	rjmp	.+20     	; 0x8fe <_ZN8MAX3421E4TaskEv+0x20>
     8ea:	10 e0       	ldi	r17, 0x00	; 0

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_GPX );
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
     8ec:	80 91 03 01 	lds	r24, 0x0103
     8f0:	83 ff       	sbrs	r24, 3
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <_ZN8MAX3421E4TaskEv+0x28>
    if( pinvalue == LOW ) {
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
     8f4:	81 2f       	mov	r24, r17
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	08 95       	ret
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
#endif
    if( pinvalue  == LOW ) {
        rcode = IntHandler();
     8fe:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN8MAX3421E10IntHandlerEv>
     902:	18 2f       	mov	r17, r24
     904:	f3 cf       	rjmp	.-26     	; 0x8ec <_ZN8MAX3421E4TaskEv+0xe>
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
#endif
    if( pinvalue == LOW ) {
        GpxHandler();
     906:	ce 01       	movw	r24, r28
     908:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN8MAX3421E10GpxHandlerEv>
     90c:	f3 cf       	rjmp	.-26     	; 0x8f4 <_ZN8MAX3421E4TaskEv+0x16>

0000090e <_ZN8MAX3421E5resetEv>:
    tmpbyte &= 0xf0;                        //clean lower nibble
    tmpbyte |= ( regRd( rIOPINS1 ) >>4 ) ;  //shift low bits and OR with upper from previous operation. Upper nibble zeroes during shift, at least with this compiler
    return( tmpbyte );
}
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
boolean MAX3421E::reset()
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	8c 01       	movw	r16, r24
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
     918:	88 e7       	ldi	r24, 0x78	; 120
     91a:	60 e2       	ldi	r22, 0x20	; 32
     91c:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
     920:	88 e7       	ldi	r24, 0x78	; 120
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
     928:	c0 e0       	ldi	r28, 0x00	; 0
     92a:	d0 e0       	ldi	r29, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <_ZN8MAX3421E5resetEv+0x28>
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
     92e:	21 97       	sbiw	r28, 0x01	; 1
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) {
     930:	11 f4       	brne	.+4      	; 0x936 <_ZN8MAX3421E5resetEv+0x28>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	07 c0       	rjmp	.+14     	; 0x944 <_ZN8MAX3421E5resetEv+0x36>
boolean MAX3421E::reset()
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
     936:	c8 01       	movw	r24, r16
     938:	68 e6       	ldi	r22, 0x68	; 104
     93a:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     93e:	80 ff       	sbrs	r24, 0
     940:	f6 cf       	rjmp	.-20     	; 0x92e <_ZN8MAX3421E5resetEv+0x20>
     942:	81 e0       	ldi	r24, 0x01	; 1
        if( tmp == 0 ) {
            return( false );
        }
    }
    return( true );
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <_ZN8MAX3421E7powerOnEv>:
            vbusState = SE0;
            break;
        }//end switch( bus_sample )
}
/* MAX3421E initialization after power-on   */
void MAX3421E::powerOn()
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
{
    /* Configure full-duplex SPI, interrupt pulse   */
    regWr( rPINCTL,( bmFDUPSPI + bmINTLEVEL + bmGPXB ));    //Full-duplex SPI, level interrupt, GPX
     954:	88 e8       	ldi	r24, 0x88	; 136
     956:	6a e1       	ldi	r22, 0x1A	; 26
     958:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    if( reset() == false ) {                                //stop/start the oscillator
     95c:	ce 01       	movw	r24, r28
     95e:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN8MAX3421E5resetEv>
     962:	88 23       	and	r24, r24
     964:	31 f4       	brne	.+12     	; 0x972 <_ZN8MAX3421E7powerOnEv+0x24>
        Serial.println("Error: OSCOKIRQ failed to assert");
     966:	8c ee       	ldi	r24, 0xEC	; 236
     968:	97 e0       	ldi	r25, 0x07	; 7
     96a:	61 e9       	ldi	r22, 0x91	; 145
     96c:	72 e0       	ldi	r23, 0x02	; 2
     96e:	0e 94 14 18 	call	0x3028	; 0x3028 <_ZN5Print7printlnEPKc>
    }

    /* configure host operation */
    regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ );      // set pull-downs, Host, Separate GPIN IRQ on GPX
     972:	88 ed       	ldi	r24, 0xD8	; 216
     974:	61 ed       	ldi	r22, 0xD1	; 209
     976:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    regWr( rHIEN, bmCONDETIE|bmFRAMEIE );                                             //connection detection
     97a:	80 ed       	ldi	r24, 0xD0	; 208
     97c:	60 e6       	ldi	r22, 0x60	; 96
     97e:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    /* check if device is connected */
    regWr( rHCTL,bmSAMPLEBUS );                                             // sample USB bus
     982:	88 ee       	ldi	r24, 0xE8	; 232
     984:	64 e0       	ldi	r22, 0x04	; 4
     986:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHCTL ) & bmSAMPLEBUS ));                                //wait for sample operation to finish
     98a:	ce 01       	movw	r24, r28
     98c:	68 ee       	ldi	r22, 0xE8	; 232
     98e:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     992:	82 ff       	sbrs	r24, 2
     994:	fa cf       	rjmp	.-12     	; 0x98a <_ZN8MAX3421E7powerOnEv+0x3c>
    busprobe();                                                             //check if anything is connected
     996:	ce 01       	movw	r24, r28
     998:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN8MAX3421E8busprobeEv>
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
     99c:	88 ec       	ldi	r24, 0xC8	; 200
     99e:	60 e2       	ldi	r22, 0x20	; 32
     9a0:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
     9a4:	80 e8       	ldi	r24, 0x80	; 128
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <_ZN8MAX3421E8spi_initEv>:
        byte Task();
    private:
      static void spi_init() {
        uint8_t tmp;
        // initialize SPI pins
        pinMode(SCK_PIN, OUTPUT);
     9b2:	84 e3       	ldi	r24, 0x34	; 52
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
        pinMode(MOSI_PIN, OUTPUT);
     9ba:	83 e3       	ldi	r24, 0x33	; 51
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
        pinMode(MISO_PIN, INPUT);
     9c2:	82 e3       	ldi	r24, 0x32	; 50
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
        pinMode(SS_PIN, OUTPUT);
     9ca:	85 e3       	ldi	r24, 0x35	; 53
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
        digitalWrite( SS_PIN, HIGH ); 
     9d2:	85 e3       	ldi	r24, 0x35	; 53
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
        /* mode 00 (CPOL=0, CPHA=0) master, fclk/2. Mode 11 (CPOL=11, CPHA=11) is also supported by MAX3421E */
        SPCR = 0x50;
     9da:	80 e5       	ldi	r24, 0x50	; 80
     9dc:	8c bd       	out	0x2c, r24	; 44
        SPSR = 0x01;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	8d bd       	out	0x2d, r24	; 45
        /**/
        tmp = SPSR;
     9e2:	8d b5       	in	r24, 0x2d	; 45
        tmp = SPDR;
     9e4:	8e b5       	in	r24, 0x2e	; 46
    }
     9e6:	08 95       	ret

000009e8 <_ZN8MAX3421EC1Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
{
    spi_init();  
     9ec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
     9f0:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
     9f2:	04 e0       	ldi	r16, 0x04	; 4
     9f4:	11 e0       	ldi	r17, 0x01	; 1
     9f6:	f8 01       	movw	r30, r16
     9f8:	80 81       	ld	r24, Z
     9fa:	87 7f       	andi	r24, 0xF7	; 247
     9fc:	80 83       	st	Z, r24
#endif
    pinMode( MAX_SS, OUTPUT );
     9fe:	85 e3       	ldi	r24, 0x35	; 53
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
    digitalWrite(MAX_SS,HIGH);   
     a06:	85 e3       	ldi	r24, 0x35	; 53
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
     a0e:	f8 01       	movw	r30, r16
     a10:	80 81       	ld	r24, Z
     a12:	84 60       	ori	r24, 0x04	; 4
     a14:	80 83       	st	Z, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
     a16:	e5 e0       	ldi	r30, 0x05	; 5
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	80 81       	ld	r24, Z
     a1c:	84 60       	ori	r24, 0x04	; 4
     a1e:	80 83       	st	Z, r24
#endif
}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <_ZN8MAX3421EC2Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
{
    spi_init();  
     a2a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
     a2e:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
     a30:	04 e0       	ldi	r16, 0x04	; 4
     a32:	11 e0       	ldi	r17, 0x01	; 1
     a34:	f8 01       	movw	r30, r16
     a36:	80 81       	ld	r24, Z
     a38:	87 7f       	andi	r24, 0xF7	; 247
     a3a:	80 83       	st	Z, r24
#endif
    pinMode( MAX_SS, OUTPUT );
     a3c:	85 e3       	ldi	r24, 0x35	; 53
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
    digitalWrite(MAX_SS,HIGH);   
     a44:	85 e3       	ldi	r24, 0x35	; 53
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
     a4c:	f8 01       	movw	r30, r16
     a4e:	80 81       	ld	r24, Z
     a50:	84 60       	ori	r24, 0x04	; 4
     a52:	80 83       	st	Z, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
     a54:	e5 e0       	ldi	r30, 0x05	; 5
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	80 81       	ld	r24, Z
     a5a:	84 60       	ori	r24, 0x04	; 4
     a5c:	80 83       	st	Z, r24
#endif
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <_ZN3USB15getUsbTaskStateEv>:
byte USB::getUsbTaskState( void )
{
    return( usb_task_state );
}
     a64:	80 91 ad 05 	lds	r24, 0x05AD
     a68:	08 95       	ret

00000a6a <_ZN3USB15setUsbTaskStateEh>:
void USB::setUsbTaskState( byte state )
{
    usb_task_state = state;
     a6a:	60 93 ad 05 	sts	0x05AD, r22
}     
     a6e:	08 95       	ret

00000a70 <_ZN3USB16getDevTableEntryEhh>:
EP_RECORD* USB::getDevTableEntry( byte addr, byte ep )
{
  EP_RECORD* ptr;
    ptr = devtable[ addr ].epinfo;
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	fb 01       	movw	r30, r22
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	e6 0f       	add	r30, r22
     a7a:	f7 1f       	adc	r31, r23
     a7c:	e3 56       	subi	r30, 0x63	; 99
     a7e:	fa 4f       	sbci	r31, 0xFA	; 250
     a80:	20 81       	ld	r18, Z
     a82:	31 81       	ldd	r19, Z+1	; 0x01
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	48 9f       	mul	r20, r24
     a88:	a0 01       	movw	r20, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	24 0f       	add	r18, r20
     a8e:	35 1f       	adc	r19, r21
    ptr += ep;
    return( ptr );
}
     a90:	c9 01       	movw	r24, r18
     a92:	08 95       	ret

00000a94 <_ZN3USB16setDevTableEntryEhP9EP_RECORD>:
/* set device table entry */
/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
void USB::setDevTableEntry( byte addr, EP_RECORD* eprecord_ptr )
{
    devtable[ addr ].epinfo = eprecord_ptr;
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	fb 01       	movw	r30, r22
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	e6 0f       	add	r30, r22
     a9e:	f7 1f       	adc	r31, r23
     aa0:	e3 56       	subi	r30, 0x63	; 99
     aa2:	fa 4f       	sbci	r31, 0xFA	; 250
     aa4:	51 83       	std	Z+1, r21	; 0x01
     aa6:	40 83       	st	Z, r20
    //return();
}
     aa8:	08 95       	ret

00000aaa <_ZN3USB11dispatchPktEhhj>:
/* dispatch usb packet. Assumes peripheral address is set and relevant buffer is loaded/empty       */
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
byte USB::dispatchPkt( byte token, byte ep, unsigned int nak_limit )
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	78 2e       	mov	r7, r24
     ac6:	a9 2e       	mov	r10, r25
     ac8:	16 2f       	mov	r17, r22
     aca:	b4 2e       	mov	r11, r20
     acc:	49 01       	movw	r8, r18
{
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
     ace:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
     ad2:	6b 01       	movw	r12, r22
     ad4:	7c 01       	movw	r14, r24
     ad6:	88 e8       	ldi	r24, 0x88	; 136
     ad8:	93 e1       	ldi	r25, 0x13	; 19
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	c8 0e       	add	r12, r24
     ae0:	d9 1e       	adc	r13, r25
     ae2:	ea 1e       	adc	r14, r26
     ae4:	fb 1e       	adc	r15, r27
     ae6:	c0 e0       	ldi	r28, 0x00	; 0
     ae8:	d0 e0       	ldi	r29, 0x00	; 0
     aea:	00 e0       	ldi	r16, 0x00	; 0
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
     aec:	b1 2a       	or	r11, r17
     aee:	30 c0       	rjmp	.+96     	; 0xb50 <_ZN3USB11dispatchPktEhhj+0xa6>
     af0:	80 ef       	ldi	r24, 0xF0	; 240
     af2:	6b 2d       	mov	r22, r11
     af4:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
     af8:	17 c0       	rjmp	.+46     	; 0xb28 <_ZN3USB11dispatchPktEhhj+0x7e>
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
      tmpdata = regRd( rHIRQ );
     afa:	87 2d       	mov	r24, r7
     afc:	9a 2d       	mov	r25, r10
     afe:	68 ec       	ldi	r22, 0xC8	; 200
     b00:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
      if( tmpdata & bmHXFRDNIRQ ) {
     b04:	87 ff       	sbrs	r24, 7
     b06:	10 c0       	rjmp	.+32     	; 0xb28 <_ZN3USB11dispatchPktEhhj+0x7e>
        regWr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
     b08:	88 ec       	ldi	r24, 0xC8	; 200
     b0a:	60 e8       	ldi	r22, 0x80	; 128
     b0c:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
      }//if( tmpdata & bmHXFRDNIRQ
    }//while ( millis() < timeout
    if( rcode != 0x00 ) {                //exit if timeout
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
     b10:	87 2d       	mov	r24, r7
     b12:	9a 2d       	mov	r25, r10
     b14:	68 ef       	ldi	r22, 0xF8	; 248
     b16:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     b1a:	18 2f       	mov	r17, r24
     b1c:	1f 70       	andi	r17, 0x0F	; 15
    switch( rcode ) {
     b1e:	14 30       	cpi	r17, 0x04	; 4
     b20:	61 f0       	breq	.+24     	; 0xb3a <_ZN3USB11dispatchPktEhhj+0x90>
     b22:	1e 30       	cpi	r17, 0x0E	; 14
     b24:	e1 f4       	brne	.+56     	; 0xb5e <_ZN3USB11dispatchPktEhhj+0xb4>
     b26:	11 c0       	rjmp	.+34     	; 0xb4a <_ZN3USB11dispatchPktEhhj+0xa0>
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
     b28:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
     b2c:	6c 15       	cp	r22, r12
     b2e:	7d 05       	cpc	r23, r13
     b30:	8e 05       	cpc	r24, r14
     b32:	9f 05       	cpc	r25, r15
     b34:	10 f3       	brcs	.-60     	; 0xafa <_ZN3USB11dispatchPktEhhj+0x50>
     b36:	1f ef       	ldi	r17, 0xFF	; 255
     b38:	12 c0       	rjmp	.+36     	; 0xb5e <_ZN3USB11dispatchPktEhhj+0xb4>
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
    switch( rcode ) {
      case hrNAK:
        nak_count ++;
     b3a:	21 96       	adiw	r28, 0x01	; 1
        if( nak_limit && ( nak_count == nak_limit )) {
     b3c:	81 14       	cp	r8, r1
     b3e:	91 04       	cpc	r9, r1
     b40:	39 f0       	breq	.+14     	; 0xb50 <_ZN3USB11dispatchPktEhhj+0xa6>
     b42:	c8 15       	cp	r28, r8
     b44:	d9 05       	cpc	r29, r9
     b46:	21 f4       	brne	.+8      	; 0xb50 <_ZN3USB11dispatchPktEhhj+0xa6>
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <_ZN3USB11dispatchPktEhhj+0xb4>
          return( rcode );
        }
        break;
      case hrTIMEOUT:
        retry_count ++;
     b4a:	0f 5f       	subi	r16, 0xFF	; 255
        if( retry_count == USB_RETRY_LIMIT ) {
     b4c:	03 30       	cpi	r16, 0x03	; 3
     b4e:	39 f0       	breq	.+14     	; 0xb5e <_ZN3USB11dispatchPktEhhj+0xb4>
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
     b50:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
     b54:	6c 15       	cp	r22, r12
     b56:	7d 05       	cpc	r23, r13
     b58:	8e 05       	cpc	r24, r14
     b5a:	9f 05       	cpc	r25, r15
     b5c:	48 f2       	brcs	.-110    	; 0xaf0 <_ZN3USB11dispatchPktEhhj+0x46>
      default:
        return( rcode );
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
     b5e:	81 2f       	mov	r24, r17
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	08 95       	ret

00000b7c <_ZN3USB10ctrlStatusEhhj>:
    rcode = ctrlStatus( ep, direction );                //status stage
    return( rcode );
}
/* Control transfer with status stage and no data stage */
/* Assumed peripheral address is already set */
byte USB::ctrlStatus( byte ep, boolean direction, unsigned int nak_limit )
     b7c:	56 2f       	mov	r21, r22
{
  byte rcode;
    if( direction ) { //GET
     b7e:	44 23       	and	r20, r20
     b80:	29 f0       	breq	.+10     	; 0xb8c <_ZN3USB10ctrlStatusEhhj+0x10>
        rcode = dispatchPkt( tokOUTHS, ep, nak_limit );
     b82:	60 ea       	ldi	r22, 0xA0	; 160
     b84:	45 2f       	mov	r20, r21
     b86:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN3USB11dispatchPktEhhj>
     b8a:	08 95       	ret
    }
    else {
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
     b8c:	60 e8       	ldi	r22, 0x80	; 128
     b8e:	45 2f       	mov	r20, r21
     b90:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN3USB11dispatchPktEhhj>
    }
    return( rcode );
}
     b94:	08 95       	ret

00000b96 <_ZN3USB11outTransferEhhjPcj>:

/* OUT transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */
/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
/* major part of this function borrowed from code shared by Richard Ibbotson    */
byte USB::outTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     b96:	2f 92       	push	r2
     b98:	3f 92       	push	r3
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	2c 97       	sbiw	r28, 0x0c	; 12
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8d 83       	std	Y+5, r24	; 0x05
     bcc:	9e 83       	std	Y+6, r25	; 0x06
     bce:	4a 83       	std	Y+2, r20	; 0x02
     bd0:	82 2e       	mov	r8, r18
     bd2:	3f 83       	std	Y+7, r19	; 0x07
     bd4:	91 2e       	mov	r9, r17
     bd6:	fc 82       	std	Y+4, r15	; 0x04
     bd8:	eb 82       	std	Y+3, r14	; 0x03
{
 byte rcode, retry_count;
 char* data_p = data;   //local copy of the data pointer
 unsigned int bytes_tosend, nak_count;
 unsigned int bytes_left = nbytes;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     bda:	46 2e       	mov	r4, r22
     bdc:	55 24       	eor	r5, r5
     bde:	87 e0       	ldi	r24, 0x07	; 7
     be0:	48 9f       	mul	r20, r24
     be2:	10 01       	movw	r2, r0
     be4:	11 24       	eor	r1, r1
     be6:	32 01       	movw	r6, r4
     be8:	66 0c       	add	r6, r6
     bea:	77 1c       	adc	r7, r7
     bec:	64 0c       	add	r6, r4
     bee:	75 1c       	adc	r7, r5
     bf0:	8d e9       	ldi	r24, 0x9D	; 157
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	68 0e       	add	r6, r24
     bf6:	79 1e       	adc	r7, r25
     bf8:	d3 01       	movw	r26, r6
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	e2 0d       	add	r30, r2
     c00:	f3 1d       	adc	r31, r3
     c02:	12 81       	ldd	r17, Z+2	; 0x02
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
     c04:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
     c08:	5b 01       	movw	r10, r22
     c0a:	6c 01       	movw	r12, r24
     c0c:	88 e8       	ldi	r24, 0x88	; 136
     c0e:	93 e1       	ldi	r25, 0x13	; 19
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	a8 0e       	add	r10, r24
     c16:	b9 1e       	adc	r11, r25
     c18:	ca 1e       	adc	r12, r26
     c1a:	db 1e       	adc	r13, r27
 
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
     c1c:	11 23       	and	r17, r17
     c1e:	19 f4       	brne	.+6      	; 0xc26 <_ZN3USB11outTransferEhhjPcj+0x90>
     c20:	5e ef       	ldi	r21, 0xFE	; 254
     c22:	f5 2e       	mov	r15, r21
     c24:	ac c0       	rjmp	.+344    	; 0xd7e <_ZN3USB11outTransferEhhjPcj+0x1e8>
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
     c26:	d3 01       	movw	r26, r6
     c28:	ed 91       	ld	r30, X+
     c2a:	fc 91       	ld	r31, X
     c2c:	e2 0d       	add	r30, r2
     c2e:	f3 1d       	adc	r31, r3
     c30:	88 ee       	ldi	r24, 0xE8	; 232
     c32:	65 81       	ldd	r22, Z+5	; 0x05
     c34:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
     c38:	20 2f       	mov	r18, r16
     c3a:	39 2d       	mov	r19, r9
     c3c:	c9 01       	movw	r24, r18
     c3e:	3c 01       	movw	r6, r24
     c40:	28 2d       	mov	r18, r8
     c42:	3f 81       	ldd	r19, Y+7	; 0x07
     c44:	c9 01       	movw	r24, r18
     c46:	4c 01       	movw	r8, r24
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
     c48:	e1 2f       	mov	r30, r17
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	f9 87       	std	Y+9, r31	; 0x09
     c4e:	e8 87       	std	Y+8, r30	; 0x08
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     c50:	fa 81       	ldd	r31, Y+2	; 0x02
     c52:	f0 62       	ori	r31, 0x20	; 32
     c54:	fa 87       	std	Y+10, r31	; 0x0a
     c56:	77 c0       	rjmp	.+238    	; 0xd46 <_ZN3USB11outTransferEhhjPcj+0x1b0>
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
     c58:	9c 86       	std	Y+12, r9	; 0x0c
     c5a:	8b 86       	std	Y+11, r8	; 0x0b
     c5c:	88 85       	ldd	r24, Y+8	; 0x08
     c5e:	99 85       	ldd	r25, Y+9	; 0x09
     c60:	88 15       	cp	r24, r8
     c62:	99 05       	cpc	r25, r9
     c64:	10 f4       	brcc	.+4      	; 0xc6a <_ZN3USB11outTransferEhhjPcj+0xd4>
     c66:	9c 87       	std	Y+12, r25	; 0x0c
     c68:	8b 87       	std	Y+11, r24	; 0x0b
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
     c6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c6c:	99 83       	std	Y+1, r25	; 0x01
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	60 e1       	ldi	r22, 0x10	; 16
     c74:	4b 85       	ldd	r20, Y+11	; 0x0b
     c76:	93 01       	movw	r18, r6
     c78:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN8MAX3421E7bytesWrEhhPc>
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
     c7c:	88 e3       	ldi	r24, 0x38	; 56
     c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c80:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     c84:	80 ef       	ldi	r24, 0xF0	; 240
     c86:	6a 85       	ldd	r22, Y+10	; 0x0a
     c88:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	68 ec       	ldi	r22, 0xC8	; 200
     c92:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     c96:	87 ff       	sbrs	r24, 7
     c98:	f9 cf       	rjmp	.-14     	; 0xc8c <_ZN3USB11outTransferEhhjPcj+0xf6>
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
     c9a:	88 ec       	ldi	r24, 0xC8	; 200
     c9c:	60 e8       	ldi	r22, 0x80	; 128
     c9e:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
    rcode = ( regRd( rHRSL ) & 0x0f );
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	9e 81       	ldd	r25, Y+6	; 0x06
     ca6:	68 ef       	ldi	r22, 0xF8	; 248
     ca8:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     cac:	4f e0       	ldi	r20, 0x0F	; 15
     cae:	f4 2e       	mov	r15, r20
     cb0:	f8 22       	and	r15, r24
     cb2:	ee 24       	eor	r14, r14
     cb4:	00 e0       	ldi	r16, 0x00	; 0
     cb6:	10 e0       	ldi	r17, 0x00	; 0
     cb8:	34 c0       	rjmp	.+104    	; 0xd22 <_ZN3USB11outTransferEhhjPcj+0x18c>
    while( rcode && ( timeout > millis())) {
      switch( rcode ) {
        case hrNAK:
          nak_count++;
     cba:	0f 5f       	subi	r16, 0xFF	; 255
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
          if( nak_limit && ( nak_count == USB_NAK_LIMIT )) {
     cbe:	ab 81       	ldd	r26, Y+3	; 0x03
     cc0:	bc 81       	ldd	r27, Y+4	; 0x04
     cc2:	ab 2b       	or	r26, r27
     cc4:	51 f0       	breq	.+20     	; 0xcda <_ZN3USB11outTransferEhhjPcj+0x144>
     cc6:	bd e7       	ldi	r27, 0x7D	; 125
     cc8:	00 30       	cpi	r16, 0x00	; 0
     cca:	1b 07       	cpc	r17, r27
     ccc:	31 f4       	brne	.+12     	; 0xcda <_ZN3USB11outTransferEhhjPcj+0x144>
     cce:	57 c0       	rjmp	.+174    	; 0xd7e <_ZN3USB11outTransferEhhjPcj+0x1e8>
            return( rcode);                                   //return NAK
          }
          break;
        case hrTIMEOUT:
          retry_count++;
     cd0:	e3 94       	inc	r14
          if( retry_count == USB_RETRY_LIMIT ) {
     cd2:	e3 e0       	ldi	r30, 0x03	; 3
     cd4:	ee 16       	cp	r14, r30
     cd6:	09 f4       	brne	.+2      	; 0xcda <_ZN3USB11outTransferEhhjPcj+0x144>
     cd8:	52 c0       	rjmp	.+164    	; 0xd7e <_ZN3USB11outTransferEhhjPcj+0x1e8>
          break;
        default:  
          return( rcode );
      }//switch( rcode...
      /* process NAK according to Host out NAK bug */
      regWr( rSNDBC, 0 );
     cda:	88 e3       	ldi	r24, 0x38	; 56
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDFIFO, *data_p );
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	d3 01       	movw	r26, r6
     ce6:	6c 91       	ld	r22, X
     ce8:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDBC, bytes_tosend );
     cec:	88 e3       	ldi	r24, 0x38	; 56
     cee:	69 81       	ldd	r22, Y+1	; 0x01
     cf0:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     cf4:	80 ef       	ldi	r24, 0xF0	; 240
     cf6:	6a 85       	ldd	r22, Y+10	; 0x0a
     cf8:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	9e 81       	ldd	r25, Y+6	; 0x06
     d00:	68 ec       	ldi	r22, 0xC8	; 200
     d02:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     d06:	87 ff       	sbrs	r24, 7
     d08:	f9 cf       	rjmp	.-14     	; 0xcfc <_ZN3USB11outTransferEhhjPcj+0x166>
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
     d0a:	88 ec       	ldi	r24, 0xC8	; 200
     d0c:	60 e8       	ldi	r22, 0x80	; 128
     d0e:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
      rcode = ( regRd( rHRSL ) & 0x0f );
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	9e 81       	ldd	r25, Y+6	; 0x06
     d16:	68 ef       	ldi	r22, 0xF8	; 248
     d18:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     d1c:	3f e0       	ldi	r19, 0x0F	; 15
     d1e:	f3 2e       	mov	r15, r19
     d20:	f8 22       	and	r15, r24
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    rcode = ( regRd( rHRSL ) & 0x0f );
    while( rcode && ( timeout > millis())) {
     d22:	ff 20       	and	r15, r15
     d24:	09 f4       	brne	.+2      	; 0xd28 <_ZN3USB11outTransferEhhjPcj+0x192>
     d26:	45 c0       	rjmp	.+138    	; 0xdb2 <_ZN3USB11outTransferEhhjPcj+0x21c>
     d28:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
     d2c:	6a 15       	cp	r22, r10
     d2e:	7b 05       	cpc	r23, r11
     d30:	8c 05       	cpc	r24, r12
     d32:	9d 05       	cpc	r25, r13
     d34:	f0 f5       	brcc	.+124    	; 0xdb2 <_ZN3USB11outTransferEhhjPcj+0x21c>
      switch( rcode ) {
     d36:	b4 e0       	ldi	r27, 0x04	; 4
     d38:	fb 16       	cp	r15, r27
     d3a:	09 f4       	brne	.+2      	; 0xd3e <_ZN3USB11outTransferEhhjPcj+0x1a8>
     d3c:	be cf       	rjmp	.-132    	; 0xcba <_ZN3USB11outTransferEhhjPcj+0x124>
     d3e:	ee e0       	ldi	r30, 0x0E	; 14
     d40:	fe 16       	cp	r15, r30
     d42:	e9 f4       	brne	.+58     	; 0xd7e <_ZN3USB11outTransferEhhjPcj+0x1e8>
     d44:	c5 cf       	rjmp	.-118    	; 0xcd0 <_ZN3USB11outTransferEhhjPcj+0x13a>
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
     d46:	81 14       	cp	r8, r1
     d48:	91 04       	cpc	r9, r1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <_ZN3USB11outTransferEhhjPcj+0x1b8>
     d4c:	85 cf       	rjmp	.-246    	; 0xc58 <_ZN3USB11outTransferEhhjPcj+0xc2>
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
    data_p += bytes_tosend;
  }//while( bytes_left...
  devtable[ addr ].epinfo[ ep ].sndToggle = ( regRd( rHRSL ) & bmSNDTOGRD ) ? bmSNDTOG1 : bmSNDTOG0;  //update toggle
     d4e:	f2 01       	movw	r30, r4
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	e4 0d       	add	r30, r4
     d56:	f5 1d       	adc	r31, r5
     d58:	e3 56       	subi	r30, 0x63	; 99
     d5a:	fa 4f       	sbci	r31, 0xFA	; 250
     d5c:	00 81       	ld	r16, Z
     d5e:	11 81       	ldd	r17, Z+1	; 0x01
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	68 ef       	ldi	r22, 0xF8	; 248
     d66:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     d6a:	85 fd       	sbrc	r24, 5
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <_ZN3USB11outTransferEhhjPcj+0x1dc>
     d6e:	80 e4       	ldi	r24, 0x40	; 64
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <_ZN3USB11outTransferEhhjPcj+0x1de>
     d72:	80 e8       	ldi	r24, 0x80	; 128
     d74:	02 0d       	add	r16, r2
     d76:	13 1d       	adc	r17, r3
     d78:	d8 01       	movw	r26, r16
     d7a:	15 96       	adiw	r26, 0x05	; 5
     d7c:	8c 93       	st	X, r24
  return( rcode );    //should be 0 in all cases
}
     d7e:	8f 2d       	mov	r24, r15
     d80:	2c 96       	adiw	r28, 0x0c	; 12
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	9f 90       	pop	r9
     da2:	8f 90       	pop	r8
     da4:	7f 90       	pop	r7
     da6:	6f 90       	pop	r6
     da8:	5f 90       	pop	r5
     daa:	4f 90       	pop	r4
     dac:	3f 90       	pop	r3
     dae:	2f 90       	pop	r2
     db0:	08 95       	ret
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
     db2:	eb 85       	ldd	r30, Y+11	; 0x0b
     db4:	fc 85       	ldd	r31, Y+12	; 0x0c
     db6:	8e 1a       	sub	r8, r30
     db8:	9f 0a       	sbc	r9, r31
    data_p += bytes_tosend;
     dba:	6e 0e       	add	r6, r30
     dbc:	7f 1e       	adc	r7, r31
     dbe:	c3 cf       	rjmp	.-122    	; 0xd46 <_ZN3USB11outTransferEhhjPcj+0x1b0>

00000dc0 <_ZN3USB13newInTransferEhhjPcj>:
        }
  }//while( 1 )
}

/* Google variant of inTransfer. Pasted verbatim from ADK. Returns length instead of error code. Provided for compatibility with Google Open Accessory code */
int USB::newInTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     dc0:	3f 92       	push	r3
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	98 2e       	mov	r9, r24
     de4:	89 2e       	mov	r8, r25
     de6:	34 2e       	mov	r3, r20
     de8:	59 01       	movw	r10, r18
     dea:	38 01       	movw	r6, r16
     dec:	27 01       	movw	r4, r14
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     dee:	e6 2e       	mov	r14, r22
     df0:	ff 24       	eor	r15, r15
     df2:	87 e0       	ldi	r24, 0x07	; 7
     df4:	48 9f       	mul	r20, r24
     df6:	60 01       	movw	r12, r0
     df8:	11 24       	eor	r1, r1
     dfa:	f7 01       	movw	r30, r14
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	ee 0d       	add	r30, r14
     e02:	ff 1d       	adc	r31, r15
     e04:	e3 56       	subi	r30, 0x63	; 99
     e06:	fa 4f       	sbci	r31, 0xFA	; 250
     e08:	01 90       	ld	r0, Z+
     e0a:	f0 81       	ld	r31, Z
     e0c:	e0 2d       	mov	r30, r0
     e0e:	ec 0d       	add	r30, r12
     e10:	fd 1d       	adc	r31, r13
     e12:	02 81       	ldd	r16, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
     e14:	88 ee       	ldi	r24, 0xE8	; 232
     e16:	66 81       	ldd	r22, Z+6	; 0x06
     e18:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
     e1c:	c0 e0       	ldi	r28, 0x00	; 0
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
     e20:	89 2d       	mov	r24, r9
     e22:	98 2d       	mov	r25, r8
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	43 2d       	mov	r20, r3
     e28:	92 01       	movw	r18, r4
     e2a:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN3USB11dispatchPktEhhj>
        if( rcode ) {
     e2e:	88 23       	and	r24, r24
     e30:	09 f0       	breq	.+2      	; 0xe34 <_ZN3USB13newInTransferEhhjPcj+0x74>
     e32:	46 c0       	rjmp	.+140    	; 0xec0 <_ZN3USB13newInTransferEhhjPcj+0x100>
		return -1;                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
     e34:	89 2d       	mov	r24, r9
     e36:	98 2d       	mov	r25, r8
     e38:	68 ec       	ldi	r22, 0xC8	; 200
     e3a:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     e3e:	82 ff       	sbrs	r24, 2
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <_ZN3USB13newInTransferEhhjPcj+0x100>
            return -1;                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
     e42:	89 2d       	mov	r24, r9
     e44:	98 2d       	mov	r25, r8
     e46:	60 e3       	ldi	r22, 0x30	; 48
     e48:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     e4c:	18 2f       	mov	r17, r24
	if (xfrlen+pktsize <= nbytes) {
     e4e:	c8 0f       	add	r28, r24
     e50:	d1 1d       	adc	r29, r1
     e52:	ac 16       	cp	r10, r28
     e54:	bd 06       	cpc	r11, r29
     e56:	40 f0       	brcs	.+16     	; 0xe68 <_ZN3USB13newInTransferEhhjPcj+0xa8>
	  // Only copy the data to the buffer if the buffer's large enough.
	  data = bytesRd( rRCVFIFO, pktsize, data );
     e58:	89 2d       	mov	r24, r9
     e5a:	98 2d       	mov	r25, r8
     e5c:	68 e0       	ldi	r22, 0x08	; 8
     e5e:	41 2f       	mov	r20, r17
     e60:	93 01       	movw	r18, r6
     e62:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN8MAX3421E7bytesRdEhhPc>
     e66:	3c 01       	movw	r6, r24
	}
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
     e68:	88 ec       	ldi	r24, 0xC8	; 200
     e6a:	64 e0       	ldi	r22, 0x04	; 4
     e6c:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     e70:	10 17       	cp	r17, r16
     e72:	18 f0       	brcs	.+6      	; 0xe7a <_ZN3USB13newInTransferEhhjPcj+0xba>
     e74:	ca 15       	cp	r28, r10
     e76:	db 05       	cpc	r29, r11
     e78:	98 f2       	brcs	.-90     	; 0xe20 <_ZN3USB13newInTransferEhhjPcj+0x60>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
     e7a:	89 2d       	mov	r24, r9
     e7c:	98 2d       	mov	r25, r8
     e7e:	68 ef       	ldi	r22, 0xF8	; 248
     e80:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     e84:	f7 01       	movw	r30, r14
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	84 ff       	sbrs	r24, 4
     e8c:	0b c0       	rjmp	.+22     	; 0xea4 <_ZN3USB13newInTransferEhhjPcj+0xe4>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     e8e:	ee 0d       	add	r30, r14
     e90:	ff 1d       	adc	r31, r15
     e92:	e3 56       	subi	r30, 0x63	; 99
     e94:	fa 4f       	sbci	r31, 0xFA	; 250
     e96:	01 90       	ld	r0, Z+
     e98:	f0 81       	ld	r31, Z
     e9a:	e0 2d       	mov	r30, r0
     e9c:	ec 0d       	add	r30, r12
     e9e:	fd 1d       	adc	r31, r13
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	0a c0       	rjmp	.+20     	; 0xeb8 <_ZN3USB13newInTransferEhhjPcj+0xf8>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
     ea4:	ee 0d       	add	r30, r14
     ea6:	ff 1d       	adc	r31, r15
     ea8:	e3 56       	subi	r30, 0x63	; 99
     eaa:	fa 4f       	sbci	r31, 0xFA	; 250
     eac:	01 90       	ld	r0, Z+
     eae:	f0 81       	ld	r31, Z
     eb0:	e0 2d       	mov	r30, r0
     eb2:	ec 0d       	add	r30, r12
     eb4:	fd 1d       	adc	r31, r13
     eb6:	80 e1       	ldi	r24, 0x10	; 16
     eb8:	86 83       	std	Z+6, r24	; 0x06
            }
	    if (xfrlen <= nbytes) {
     eba:	ac 16       	cp	r10, r28
     ebc:	bd 06       	cpc	r11, r29
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <_ZN3USB13newInTransferEhhjPcj+0x106>
     ec0:	2f ef       	ldi	r18, 0xFF	; 255
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <_ZN3USB13newInTransferEhhjPcj+0x108>
	      return xfrlen;
     ec6:	9e 01       	movw	r18, r28
	      // than return partial data.
	      return -1;
	    }
        }
  }//while( 1 )
}
     ec8:	c9 01       	movw	r24, r18
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	9f 90       	pop	r9
     ee0:	8f 90       	pop	r8
     ee2:	7f 90       	pop	r7
     ee4:	6f 90       	pop	r6
     ee6:	5f 90       	pop	r5
     ee8:	4f 90       	pop	r4
     eea:	3f 90       	pop	r3
     eec:	08 95       	ret

00000eee <_ZN3USB10inTransferEhhjPcj>:
}
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */
/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
byte USB::inTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     eee:	2f 92       	push	r2
     ef0:	3f 92       	push	r3
     ef2:	4f 92       	push	r4
     ef4:	5f 92       	push	r5
     ef6:	6f 92       	push	r6
     ef8:	7f 92       	push	r7
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	b8 2e       	mov	r11, r24
     f14:	a9 2e       	mov	r10, r25
     f16:	34 2e       	mov	r3, r20
     f18:	29 01       	movw	r4, r18
     f1a:	48 01       	movw	r8, r16
     f1c:	37 01       	movw	r6, r14
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     f1e:	e6 2e       	mov	r14, r22
     f20:	ff 24       	eor	r15, r15
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	48 9f       	mul	r20, r24
     f26:	60 01       	movw	r12, r0
     f28:	11 24       	eor	r1, r1
     f2a:	f7 01       	movw	r30, r14
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ee 0d       	add	r30, r14
     f32:	ff 1d       	adc	r31, r15
     f34:	e3 56       	subi	r30, 0x63	; 99
     f36:	fa 4f       	sbci	r31, 0xFA	; 250
     f38:	01 90       	ld	r0, Z+
     f3a:	f0 81       	ld	r31, Z
     f3c:	e0 2d       	mov	r30, r0
     f3e:	ec 0d       	add	r30, r12
     f40:	fd 1d       	adc	r31, r13
     f42:	22 80       	ldd	r2, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
     f44:	88 ee       	ldi	r24, 0xE8	; 232
     f46:	66 81       	ldd	r22, Z+6	; 0x06
     f48:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
     f4c:	c0 e0       	ldi	r28, 0x00	; 0
     f4e:	d0 e0       	ldi	r29, 0x00	; 0
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
     f50:	8b 2d       	mov	r24, r11
     f52:	9a 2d       	mov	r25, r10
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	43 2d       	mov	r20, r3
     f58:	93 01       	movw	r18, r6
     f5a:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN3USB11dispatchPktEhhj>
     f5e:	08 2f       	mov	r16, r24
        if( rcode ) {
     f60:	88 23       	and	r24, r24
     f62:	09 f0       	breq	.+2      	; 0xf66 <_ZN3USB10inTransferEhhjPcj+0x78>
     f64:	42 c0       	rjmp	.+132    	; 0xfea <_ZN3USB10inTransferEhhjPcj+0xfc>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
     f66:	8b 2d       	mov	r24, r11
     f68:	9a 2d       	mov	r25, r10
     f6a:	68 ec       	ldi	r22, 0xC8	; 200
     f6c:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     f70:	82 fd       	sbrc	r24, 2
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <_ZN3USB10inTransferEhhjPcj+0x8a>
     f74:	00 ef       	ldi	r16, 0xF0	; 240
     f76:	39 c0       	rjmp	.+114    	; 0xfea <_ZN3USB10inTransferEhhjPcj+0xfc>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
     f78:	8b 2d       	mov	r24, r11
     f7a:	9a 2d       	mov	r25, r10
     f7c:	60 e3       	ldi	r22, 0x30	; 48
     f7e:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     f82:	18 2f       	mov	r17, r24
        data = bytesRd( rRCVFIFO, pktsize, data );
     f84:	8b 2d       	mov	r24, r11
     f86:	9a 2d       	mov	r25, r10
     f88:	68 e0       	ldi	r22, 0x08	; 8
     f8a:	41 2f       	mov	r20, r17
     f8c:	94 01       	movw	r18, r8
     f8e:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN8MAX3421E7bytesRdEhhPc>
     f92:	4c 01       	movw	r8, r24
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     f9c:	12 15       	cp	r17, r2
     f9e:	28 f0       	brcs	.+10     	; 0xfaa <_ZN3USB10inTransferEhhjPcj+0xbc>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
        data = bytesRd( rRCVFIFO, pktsize, data );
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
     fa0:	c1 0f       	add	r28, r17
     fa2:	d1 1d       	adc	r29, r1
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     fa4:	c4 15       	cp	r28, r4
     fa6:	d5 05       	cpc	r29, r5
     fa8:	98 f2       	brcs	.-90     	; 0xf50 <_ZN3USB10inTransferEhhjPcj+0x62>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
     faa:	8b 2d       	mov	r24, r11
     fac:	9a 2d       	mov	r25, r10
     fae:	68 ef       	ldi	r22, 0xF8	; 248
     fb0:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
     fb4:	f7 01       	movw	r30, r14
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	84 ff       	sbrs	r24, 4
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <_ZN3USB10inTransferEhhjPcj+0xe6>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     fbe:	ee 0d       	add	r30, r14
     fc0:	ff 1d       	adc	r31, r15
     fc2:	e3 56       	subi	r30, 0x63	; 99
     fc4:	fa 4f       	sbci	r31, 0xFA	; 250
     fc6:	01 90       	ld	r0, Z+
     fc8:	f0 81       	ld	r31, Z
     fca:	e0 2d       	mov	r30, r0
     fcc:	ec 0d       	add	r30, r12
     fce:	fd 1d       	adc	r31, r13
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	0a c0       	rjmp	.+20     	; 0xfe8 <_ZN3USB10inTransferEhhjPcj+0xfa>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
     fd4:	ee 0d       	add	r30, r14
     fd6:	ff 1d       	adc	r31, r15
     fd8:	e3 56       	subi	r30, 0x63	; 99
     fda:	fa 4f       	sbci	r31, 0xFA	; 250
     fdc:	01 90       	ld	r0, Z+
     fde:	f0 81       	ld	r31, Z
     fe0:	e0 2d       	mov	r30, r0
     fe2:	ec 0d       	add	r30, r12
     fe4:	fd 1d       	adc	r31, r13
     fe6:	80 e1       	ldi	r24, 0x10	; 16
     fe8:	86 83       	std	Z+6, r24	; 0x06
            }
            return( 0 );
        }
  }//while( 1 )
}
     fea:	80 2f       	mov	r24, r16
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	9f 90       	pop	r9
    1002:	8f 90       	pop	r8
    1004:	7f 90       	pop	r7
    1006:	6f 90       	pop	r6
    1008:	5f 90       	pop	r5
    100a:	4f 90       	pop	r4
    100c:	3f 90       	pop	r3
    100e:	2f 90       	pop	r2
    1010:	08 95       	ret

00001012 <_ZN3USB8ctrlDataEhhjPchj>:
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
    }
    return( rcode );
}
/* Control transfer with data stage. Stages 2 and 3 of control transfer. Assumes preipheral address is set and setup packet has been sent */
byte USB::ctrlData( byte addr, byte ep, unsigned int nbytes, char* dataptr, boolean direction, unsigned int nak_limit )
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
    1024:	86 2f       	mov	r24, r22
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a4 2f       	mov	r26, r20
    102a:	b0 e0       	ldi	r27, 0x00	; 0
{
 byte rcode;
  if( direction ) {                      //IN transfer
    102c:	ee 20       	and	r14, r14
    102e:	d9 f0       	breq	.+54     	; 0x1066 <_ZN3USB8ctrlDataEhhjPchj+0x54>
    devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    1030:	fc 01       	movw	r30, r24
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	e8 0f       	add	r30, r24
    1038:	f9 1f       	adc	r31, r25
    103a:	e3 56       	subi	r30, 0x63	; 99
    103c:	fa 4f       	sbci	r31, 0xFA	; 250
    103e:	cd 01       	movw	r24, r26
    1040:	53 e0       	ldi	r21, 0x03	; 3
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	5a 95       	dec	r21
    1048:	e1 f7       	brne	.-8      	; 0x1042 <_ZN3USB8ctrlDataEhhjPchj+0x30>
    104a:	8a 1b       	sub	r24, r26
    104c:	9b 0b       	sbc	r25, r27
    104e:	01 90       	ld	r0, Z+
    1050:	f0 81       	ld	r31, Z
    1052:	e0 2d       	mov	r30, r0
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	86 83       	std	Z+6, r24	; 0x06
    rcode = inTransfer( addr, ep, nbytes, dataptr, nak_limit );
    105c:	ce 01       	movw	r24, r28
    105e:	76 01       	movw	r14, r12
    1060:	0e 94 77 07 	call	0xeee	; 0xeee <_ZN3USB10inTransferEhhjPcj>
    1064:	1a c0       	rjmp	.+52     	; 0x109a <_ZN3USB8ctrlDataEhhjPchj+0x88>
    return( rcode );
  }
  else {              //OUT transfer
    devtable[ addr ].epinfo[ ep ].sndToggle = bmSNDTOG1;
    1066:	fc 01       	movw	r30, r24
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	e8 0f       	add	r30, r24
    106e:	f9 1f       	adc	r31, r25
    1070:	e3 56       	subi	r30, 0x63	; 99
    1072:	fa 4f       	sbci	r31, 0xFA	; 250
    1074:	cd 01       	movw	r24, r26
    1076:	53 e0       	ldi	r21, 0x03	; 3
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	5a 95       	dec	r21
    107e:	e1 f7       	brne	.-8      	; 0x1078 <_ZN3USB8ctrlDataEhhjPchj+0x66>
    1080:	8a 1b       	sub	r24, r26
    1082:	9b 0b       	sbc	r25, r27
    1084:	01 90       	ld	r0, Z+
    1086:	f0 81       	ld	r31, Z
    1088:	e0 2d       	mov	r30, r0
    108a:	e8 0f       	add	r30, r24
    108c:	f9 1f       	adc	r31, r25
    108e:	80 e8       	ldi	r24, 0x80	; 128
    1090:	85 83       	std	Z+5, r24	; 0x05
    rcode = outTransfer( addr, ep, nbytes, dataptr, nak_limit );
    1092:	ce 01       	movw	r24, r28
    1094:	76 01       	movw	r14, r12
    1096:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN3USB11outTransferEhhjPcj>
    return( rcode );
  }    
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	08 95       	ret

000010ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>:
/* Control transfer. Sets address, endpoint, fills control packet with necessary data, dispatches control packet, and initiates bulk IN transfer,   */
/* depending on request. Actual requests are defined as inlines                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
byte USB::ctrlReq( byte addr, byte ep, byte bmReqType, byte bRequest, byte wValLo, byte wValHi, unsigned int wInd, unsigned int nbytes, char* dataptr, unsigned int nak_limit )
    10ac:	4f 92       	push	r4
    10ae:	5f 92       	push	r5
    10b0:	6f 92       	push	r6
    10b2:	7f 92       	push	r7
    10b4:	8f 92       	push	r8
    10b6:	9f 92       	push	r9
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	28 97       	sbiw	r28, 0x08	; 8
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	3c 01       	movw	r6, r24
    10de:	16 2f       	mov	r17, r22
    10e0:	f4 2e       	mov	r15, r20
    10e2:	d2 2e       	mov	r13, r18
    10e4:	4c 8c       	ldd	r4, Y+28	; 0x1c
    10e6:	5d 8c       	ldd	r5, Y+29	; 0x1d
{
 boolean direction = false;     //request direction, IN or OUT
 byte rcode;   
 SETUP_PKT setup_pkt;

  regWr( rPERADDR, addr );                    //set peripheral address
    10e8:	80 ee       	ldi	r24, 0xE0	; 224
    10ea:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
  if( bmReqType & 0x80 ) {
    direction = true;                       //determine request direction
  }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
    10ee:	d9 82       	std	Y+1, r13	; 0x01
    setup_pkt.bRequest = bRequest;
    10f0:	0a 83       	std	Y+2, r16	; 0x02
    setup_pkt.wVal_u.wValueLo = wValLo;
    10f2:	eb 82       	std	Y+3, r14	; 0x03
    setup_pkt.wVal_u.wValueHi = wValHi;
    10f4:	cc 82       	std	Y+4, r12	; 0x04
    setup_pkt.wIndex = wInd;
    10f6:	be 82       	std	Y+6, r11	; 0x06
    10f8:	ad 82       	std	Y+5, r10	; 0x05
    setup_pkt.wLength = nbytes;
    10fa:	98 86       	std	Y+8, r9	; 0x08
    10fc:	8f 82       	std	Y+7, r8	; 0x07
    bytesWr( rSUDFIFO, 8, ( char *)&setup_pkt );    //transfer to setup packet FIFO
    10fe:	c3 01       	movw	r24, r6
    1100:	60 e2       	ldi	r22, 0x20	; 32
    1102:	48 e0       	ldi	r20, 0x08	; 8
    1104:	9e 01       	movw	r18, r28
    1106:	2f 5f       	subi	r18, 0xFF	; 255
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN8MAX3421E7bytesWrEhhPc>
    rcode = dispatchPkt( tokSETUP, ep, nak_limit );            //dispatch packet
    110e:	c3 01       	movw	r24, r6
    1110:	60 e1       	ldi	r22, 0x10	; 16
    1112:	4f 2d       	mov	r20, r15
    1114:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1116:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1118:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN3USB11dispatchPktEhhj>
    111c:	08 2f       	mov	r16, r24
    //Serial.println("Setup packet");   //DEBUG
    if( rcode ) {                                   //return HRSLT if not zero
    111e:	88 23       	and	r24, r24
    1120:	29 f0       	breq	.+10     	; 0x112c <_ZN3USB7ctrlReqEhhhhhhjjPcj+0x80>
        Serial.print("Setup packet error: ");
    1122:	8c ee       	ldi	r24, 0xEC	; 236
    1124:	97 e0       	ldi	r25, 0x07	; 7
    1126:	62 eb       	ldi	r22, 0xB2	; 178
    1128:	72 e0       	ldi	r23, 0x02	; 2
    112a:	19 c0       	rjmp	.+50     	; 0x115e <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xb2>
        Serial.print( rcode, HEX );                                          
        return( rcode );
    112c:	bd 2c       	mov	r11, r13
    112e:	bb 1c       	adc	r11, r11
    1130:	bb 24       	eor	r11, r11
    1132:	bb 1c       	adc	r11, r11
    }
    //Serial.println( direction, HEX ); 
    if( dataptr != NULL ) {                         //data stage, if present
    1134:	41 14       	cp	r4, r1
    1136:	51 04       	cpc	r5, r1
    1138:	e1 f0       	breq	.+56     	; 0x1172 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xc6>
        rcode = ctrlData( addr, ep, nbytes, dataptr, direction );
    113a:	c3 01       	movw	r24, r6
    113c:	61 2f       	mov	r22, r17
    113e:	4f 2d       	mov	r20, r15
    1140:	94 01       	movw	r18, r8
    1142:	82 01       	movw	r16, r4
    1144:	eb 2c       	mov	r14, r11
    1146:	c1 2c       	mov	r12, r1
    1148:	ed e7       	ldi	r30, 0x7D	; 125
    114a:	de 2e       	mov	r13, r30
    114c:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN3USB8ctrlDataEhhjPchj>
    1150:	08 2f       	mov	r16, r24
    }
    if( rcode ) {   //return error
    1152:	88 23       	and	r24, r24
    1154:	71 f0       	breq	.+28     	; 0x1172 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xc6>
        Serial.print("Data packet error: ");
    1156:	8c ee       	ldi	r24, 0xEC	; 236
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	67 ec       	ldi	r22, 0xC7	; 199
    115c:	72 e0       	ldi	r23, 0x02	; 2
    115e:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
        Serial.print( rcode, HEX );                                          
    1162:	8c ee       	ldi	r24, 0xEC	; 236
    1164:	97 e0       	ldi	r25, 0x07	; 7
    1166:	60 2f       	mov	r22, r16
    1168:	40 e1       	ldi	r20, 0x10	; 16
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN5Print5printEhi>
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xd6>
        return( rcode );
    }
    rcode = ctrlStatus( ep, direction );                //status stage
    1172:	c3 01       	movw	r24, r6
    1174:	6f 2d       	mov	r22, r15
    1176:	4b 2d       	mov	r20, r11
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	3d e7       	ldi	r19, 0x7D	; 125
    117c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN3USB10ctrlStatusEhhj>
    1180:	08 2f       	mov	r16, r24
    return( rcode );
}
    1182:	80 2f       	mov	r24, r16
    1184:	28 96       	adiw	r28, 0x08	; 8
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	7f 90       	pop	r7
    11aa:	6f 90       	pop	r6
    11ac:	5f 90       	pop	r5
    11ae:	4f 90       	pop	r4
    11b0:	08 95       	ret

000011b2 <_ZN3USB4TaskEv>:
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
/* USB main task. Performs enumeration/cleanup */
void USB::Task( void )      //USB state machine
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	62 97       	sbiw	r28, 0x12	; 18
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	08 2f       	mov	r16, r24
    11da:	e9 2e       	mov	r14, r25
  static byte tmpaddr; 
  byte tmpdata;
  static unsigned long delay = 0;
  USB_DEVICE_DESCRIPTOR buf;
  /**/
    tmpdata = getVbusState();
    11dc:	0e 94 9b 03 	call	0x736	; 0x736 <_ZN8MAX3421E12getVbusStateEv>
//
//    Serial.print("\n");
    /**/
    /* modify USB task state if Vbus changed */

    switch( tmpdata ) {
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	29 f0       	breq	.+10     	; 0x11ee <_ZN3USB4TaskEv+0x3c>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	28 f0       	brcs	.+10     	; 0x11f2 <_ZN3USB4TaskEv+0x40>
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	00 f5       	brcc	.+64     	; 0x122c <_ZN3USB4TaskEv+0x7a>
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <_ZN3USB4TaskEv+0x4e>
        case SE1:   //illegal state
            usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    11ee:	83 e1       	ldi	r24, 0x13	; 19
    11f0:	1b c0       	rjmp	.+54     	; 0x1228 <_ZN3USB4TaskEv+0x76>
            break;
        case SE0:   //disconnected
            if(( usb_task_state & USB_STATE_MASK ) != USB_STATE_DETACHED ) {
    11f2:	80 91 ad 05 	lds	r24, 0x05AD
    11f6:	80 7f       	andi	r24, 0xF0	; 240
    11f8:	80 31       	cpi	r24, 0x10	; 16
    11fa:	c1 f0       	breq	.+48     	; 0x122c <_ZN3USB4TaskEv+0x7a>
                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    11fc:	81 e1       	ldi	r24, 0x11	; 17
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <_ZN3USB4TaskEv+0x76>
            }
            break;
        case FSHOST:    //attached
        case LSHOST:
            if(( usb_task_state & USB_STATE_MASK ) == USB_STATE_DETACHED ) {
    1200:	80 91 ad 05 	lds	r24, 0x05AD
    1204:	80 7f       	andi	r24, 0xF0	; 240
    1206:	80 31       	cpi	r24, 0x10	; 16
    1208:	89 f4       	brne	.+34     	; 0x122c <_ZN3USB4TaskEv+0x7a>
                delay = millis() + USB_SETTLE_DELAY;
    120a:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    120e:	68 53       	subi	r22, 0x38	; 56
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	8f 4f       	sbci	r24, 0xFF	; 255
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	60 93 af 05 	sts	0x05AF, r22
    121a:	70 93 b0 05 	sts	0x05B0, r23
    121e:	80 93 b1 05 	sts	0x05B1, r24
    1222:	90 93 b2 05 	sts	0x05B2, r25
                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	80 93 ad 05 	sts	0x05AD, r24
            }
            break;
        }// switch( tmpdata
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
    122c:	10 91 ad 05 	lds	r17, 0x05AD
    1230:	10 34       	cpi	r17, 0x40	; 64
    1232:	09 f4       	brne	.+2      	; 0x1236 <_ZN3USB4TaskEv+0x84>
    1234:	48 c0       	rjmp	.+144    	; 0x12c6 <_ZN3USB4TaskEv+0x114>
    1236:	11 34       	cpi	r17, 0x41	; 65
    1238:	40 f4       	brcc	.+16     	; 0x124a <_ZN3USB4TaskEv+0x98>
    123a:	10 32       	cpi	r17, 0x20	; 32
    123c:	61 f1       	breq	.+88     	; 0x1296 <_ZN3USB4TaskEv+0xe4>
    123e:	10 33       	cpi	r17, 0x30	; 48
    1240:	e1 f1       	breq	.+120    	; 0x12ba <_ZN3USB4TaskEv+0x108>
    1242:	11 31       	cpi	r17, 0x11	; 17
    1244:	09 f0       	breq	.+2      	; 0x1248 <_ZN3USB4TaskEv+0x96>
    1246:	f2 c0       	rjmp	.+484    	; 0x142c <_ZN3USB4TaskEv+0x27a>
    1248:	0a c0       	rjmp	.+20     	; 0x125e <_ZN3USB4TaskEv+0xac>
    124a:	10 36       	cpi	r17, 0x60	; 96
    124c:	09 f4       	brne	.+2      	; 0x1250 <_ZN3USB4TaskEv+0x9e>
    124e:	77 c0       	rjmp	.+238    	; 0x133e <_ZN3USB4TaskEv+0x18c>
    1250:	10 37       	cpi	r17, 0x70	; 112
    1252:	09 f4       	brne	.+2      	; 0x1256 <_ZN3USB4TaskEv+0xa4>
    1254:	aa c0       	rjmp	.+340    	; 0x13aa <_ZN3USB4TaskEv+0x1f8>
    1256:	10 35       	cpi	r17, 0x50	; 80
    1258:	09 f0       	breq	.+2      	; 0x125c <_ZN3USB4TaskEv+0xaa>
    125a:	e8 c0       	rjmp	.+464    	; 0x142c <_ZN3USB4TaskEv+0x27a>
    125c:	57 c0       	rjmp	.+174    	; 0x130c <_ZN3USB4TaskEv+0x15a>
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    125e:	10 92 9f 05 	sts	0x059F, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    1262:	10 92 a1 05 	sts	0x05A1, r1
    1266:	10 92 a0 05 	sts	0x05A0, r1
        devtable[ i ].devclass = 0;
    126a:	10 92 a2 05 	sts	0x05A2, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    126e:	10 92 a4 05 	sts	0x05A4, r1
    1272:	10 92 a3 05 	sts	0x05A3, r1
        devtable[ i ].devclass = 0;
    1276:	10 92 a5 05 	sts	0x05A5, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    127a:	86 ea       	ldi	r24, 0xA6	; 166
    127c:	95 e0       	ldi	r25, 0x05	; 5
    127e:	90 93 9e 05 	sts	0x059E, r25
    1282:	80 93 9d 05 	sts	0x059D, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    1286:	80 e4       	ldi	r24, 0x40	; 64
    1288:	80 93 ab 05 	sts	0x05AB, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    128c:	80 e1       	ldi	r24, 0x10	; 16
    128e:	80 93 ac 05 	sts	0x05AC, r24
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
        case USB_DETACHED_SUBSTATE_INITIALIZE:
            init();
            usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1292:	82 e1       	ldi	r24, 0x12	; 18
    1294:	c9 c0       	rjmp	.+402    	; 0x1428 <_ZN3USB4TaskEv+0x276>
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE:     //just sit here
            break;
        case USB_DETACHED_SUBSTATE_ILLEGAL:             //just sit here
            break;
        case USB_ATTACHED_SUBSTATE_SETTLE:              //setlle time for just attached device                  
            if( delay < millis() ) {
    1296:	e0 90 af 05 	lds	r14, 0x05AF
    129a:	f0 90 b0 05 	lds	r15, 0x05B0
    129e:	00 91 b1 05 	lds	r16, 0x05B1
    12a2:	10 91 b2 05 	lds	r17, 0x05B2
    12a6:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    12aa:	e6 16       	cp	r14, r22
    12ac:	f7 06       	cpc	r15, r23
    12ae:	08 07       	cpc	r16, r24
    12b0:	19 07       	cpc	r17, r25
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <_ZN3USB4TaskEv+0x104>
    12b4:	bb c0       	rjmp	.+374    	; 0x142c <_ZN3USB4TaskEv+0x27a>
                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    12b6:	80 e3       	ldi	r24, 0x30	; 48
    12b8:	b7 c0       	rjmp	.+366    	; 0x1428 <_ZN3USB4TaskEv+0x276>
            }
            break;
        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
            regWr( rHCTL, bmBUSRST );                   //issue bus reset
    12ba:	88 ee       	ldi	r24, 0xE8	; 232
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
            usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    12c2:	80 e4       	ldi	r24, 0x40	; 64
    12c4:	b1 c0       	rjmp	.+354    	; 0x1428 <_ZN3USB4TaskEv+0x276>
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
            if(( regRd( rHCTL ) & bmBUSRST ) == 0 ) {
    12c6:	80 2f       	mov	r24, r16
    12c8:	9e 2d       	mov	r25, r14
    12ca:	68 ee       	ldi	r22, 0xE8	; 232
    12cc:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
    12d0:	80 fd       	sbrc	r24, 0
    12d2:	ac c0       	rjmp	.+344    	; 0x142c <_ZN3USB4TaskEv+0x27a>
                tmpdata = regRd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    12d4:	80 2f       	mov	r24, r16
    12d6:	9e 2d       	mov	r25, r14
    12d8:	68 ed       	ldi	r22, 0xD8	; 216
    12da:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
                regWr( rMODE, tmpdata );
    12de:	68 2f       	mov	r22, r24
    12e0:	68 60       	ori	r22, 0x08	; 8
    12e2:	88 ed       	ldi	r24, 0xD8	; 216
    12e4:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN8MAX3421E5regWrEhh>
//                  regWr( rMODE, bmSOFKAENAB );
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    12e8:	80 e5       	ldi	r24, 0x50	; 80
    12ea:	80 93 ad 05 	sts	0x05AD, r24
                delay = millis() + 20; //20ms wait after reset per USB spec
    12ee:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    12f2:	6c 5e       	subi	r22, 0xEC	; 236
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	8f 4f       	sbci	r24, 0xFF	; 255
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	60 93 af 05 	sts	0x05AF, r22
    12fe:	70 93 b0 05 	sts	0x05B0, r23
    1302:	80 93 b1 05 	sts	0x05B1, r24
    1306:	90 93 b2 05 	sts	0x05B2, r25
    130a:	90 c0       	rjmp	.+288    	; 0x142c <_ZN3USB4TaskEv+0x27a>
            }
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_SOF:  //todo: change check order
            if( regRd( rHIRQ ) & bmFRAMEIRQ ) {                         //when first SOF received we can continue
    130c:	80 2f       	mov	r24, r16
    130e:	9e 2d       	mov	r25, r14
    1310:	68 ec       	ldi	r22, 0xC8	; 200
    1312:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MAX3421E5regRdEh>
    1316:	86 ff       	sbrs	r24, 6
    1318:	89 c0       	rjmp	.+274    	; 0x142c <_ZN3USB4TaskEv+0x27a>
              if( delay < millis() ) {                                    //20ms passed
    131a:	e0 90 af 05 	lds	r14, 0x05AF
    131e:	f0 90 b0 05 	lds	r15, 0x05B0
    1322:	00 91 b1 05 	lds	r16, 0x05B1
    1326:	10 91 b2 05 	lds	r17, 0x05B2
    132a:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    132e:	e6 16       	cp	r14, r22
    1330:	f7 06       	cpc	r15, r23
    1332:	08 07       	cpc	r16, r24
    1334:	19 07       	cpc	r17, r25
    1336:	08 f0       	brcs	.+2      	; 0x133a <_ZN3USB4TaskEv+0x188>
    1338:	79 c0       	rjmp	.+242    	; 0x142c <_ZN3USB4TaskEv+0x27a>
                usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    133a:	80 e6       	ldi	r24, 0x60	; 96
    133c:	75 c0       	rjmp	.+234    	; 0x1428 <_ZN3USB4TaskEv+0x276>
              }
            }
            break;
        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
            // toggle( BPNT_0 );
            devtable[ 0 ].epinfo->MaxPktSize = 8;   //set max.packet size to min.allowed
    133e:	e0 91 9d 05 	lds	r30, 0x059D
    1342:	f0 91 9e 05 	lds	r31, 0x059E
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	93 83       	std	Z+3, r25	; 0x03
    134c:	82 83       	std	Z+2, r24	; 0x02
        void init();
};

//get device descriptor
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
    134e:	00 d0       	rcall	.+0      	; 0x1350 <_ZN3USB4TaskEv+0x19e>
    1350:	0f 92       	push	r0
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	ed b7       	in	r30, 0x3d	; 61
    1358:	fe b7       	in	r31, 0x3e	; 62
    135a:	92 83       	std	Z+2, r25	; 0x02
    135c:	81 83       	std	Z+1, r24	; 0x01
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	9d e7       	ldi	r25, 0x7D	; 125
    1362:	94 83       	std	Z+4, r25	; 0x04
    1364:	83 83       	std	Z+3, r24	; 0x03
    1366:	80 2f       	mov	r24, r16
    1368:	9e 2d       	mov	r25, r14
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	20 e8       	ldi	r18, 0x80	; 128
    1370:	06 e0       	ldi	r16, 0x06	; 6
    1372:	ee 24       	eor	r14, r14
    1374:	cc 24       	eor	r12, r12
    1376:	c3 94       	inc	r12
    1378:	aa 24       	eor	r10, r10
    137a:	bb 24       	eor	r11, r11
    137c:	f8 e0       	ldi	r31, 0x08	; 8
    137e:	8f 2e       	mov	r8, r31
    1380:	91 2c       	mov	r9, r1
    1382:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>
            rcode = getDevDescr( 0, 0, 8, ( char* )&buf );
            if( rcode == 0 ) {
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	88 23       	and	r24, r24
    1390:	49 f4       	brne	.+18     	; 0x13a4 <_ZN3USB4TaskEv+0x1f2>
                devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    1392:	e0 91 9d 05 	lds	r30, 0x059D
    1396:	f0 91 9e 05 	lds	r31, 0x059E
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	82 83       	std	Z+2, r24	; 0x02
    139e:	13 82       	std	Z+3, r1	; 0x03
                usb_task_state = USB_STATE_ADDRESSING;
    13a0:	80 e7       	ldi	r24, 0x70	; 112
    13a2:	42 c0       	rjmp	.+132    	; 0x1428 <_ZN3USB4TaskEv+0x276>
            }
            else {
                usb_error = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    13a4:	10 93 ae 05 	sts	0x05AE, r17
    13a8:	3e c0       	rjmp	.+124    	; 0x1426 <_ZN3USB4TaskEv+0x274>
                usb_task_state = USB_STATE_ERROR;
            }
            break;
        case USB_STATE_ADDRESSING:
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
    13aa:	80 91 a0 05 	lds	r24, 0x05A0
    13ae:	90 91 a1 05 	lds	r25, 0x05A1
    13b2:	89 2b       	or	r24, r25
    13b4:	89 f5       	brne	.+98     	; 0x1418 <_ZN3USB4TaskEv+0x266>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    13b6:	80 91 9d 05 	lds	r24, 0x059D
    13ba:	90 91 9e 05 	lds	r25, 0x059E
    13be:	90 93 a1 05 	sts	0x05A1, r25
    13c2:	80 93 a0 05 	sts	0x05A0, r24
inline byte USB::getStrDescr( byte addr, byte ep, unsigned int nbytes, byte index, unsigned int langid, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, nbytes, dataptr, nak_limit ));
}
//set address 
inline byte USB::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <_ZN3USB4TaskEv+0x216>
    13c8:	0f 92       	push	r0
    13ca:	ed b7       	in	r30, 0x3d	; 61
    13cc:	fe b7       	in	r31, 0x3e	; 62
    13ce:	12 82       	std	Z+2, r1	; 0x02
    13d0:	11 82       	std	Z+1, r1	; 0x01
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	9d e7       	ldi	r25, 0x7D	; 125
    13d6:	94 83       	std	Z+4, r25	; 0x04
    13d8:	83 83       	std	Z+3, r24	; 0x03
    13da:	80 2f       	mov	r24, r16
    13dc:	9e 2d       	mov	r25, r14
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	05 e0       	ldi	r16, 0x05	; 5
    13e6:	ee 24       	eor	r14, r14
    13e8:	e3 94       	inc	r14
    13ea:	cc 24       	eor	r12, r12
    13ec:	aa 24       	eor	r10, r10
    13ee:	bb 24       	eor	r11, r11
    13f0:	88 24       	eor	r8, r8
    13f2:	99 24       	eor	r9, r9
    13f4:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>
                                                                        //temporary record
                                                                        //until plugged with real device endpoint structure
                    rcode = setAddr( 0, 0, i );
                    if( rcode == 0 ) {
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	88 23       	and	r24, r24
    1402:	29 f4       	brne	.+10     	; 0x140e <_ZN3USB4TaskEv+0x25c>
                        tmpaddr = i;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 93 b3 05 	sts	0x05B3, r24
                        usb_task_state = USB_STATE_CONFIGURING;
    140a:	80 e8       	ldi	r24, 0x80	; 128
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <_ZN3USB4TaskEv+0x262>
                    }
                    else {
                        usb_error = USB_STATE_ADDRESSING;          //set address error
    140e:	10 93 ae 05 	sts	0x05AE, r17
                        usb_task_state = USB_STATE_ERROR;
    1412:	80 ea       	ldi	r24, 0xA0	; 160
    1414:	80 93 ad 05 	sts	0x05AD, r24
                    }
                    break;  //break if address assigned or error occured during address assignment attempt                      
                }
            }//for( i = 1; i < USB_NUMDEVICES; i++
            if( usb_task_state == USB_STATE_ADDRESSING ) {     //no vacant place in devtable
    1418:	80 91 ad 05 	lds	r24, 0x05AD
    141c:	80 37       	cpi	r24, 0x70	; 112
    141e:	31 f4       	brne	.+12     	; 0x142c <_ZN3USB4TaskEv+0x27a>
                usb_error = 0xfe;
    1420:	8e ef       	ldi	r24, 0xFE	; 254
    1422:	80 93 ae 05 	sts	0x05AE, r24
                usb_task_state = USB_STATE_ERROR;
    1426:	80 ea       	ldi	r24, 0xA0	; 160
    1428:	80 93 ad 05 	sts	0x05AD, r24
        case USB_STATE_RUNNING:
            break;
        case USB_STATE_ERROR:
            break;
    }// switch( usb_task_state
}    
    142c:	62 96       	adiw	r28, 0x12	; 18
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	9f 90       	pop	r9
    144c:	8f 90       	pop	r8
    144e:	08 95       	ret

00001450 <_ZN3USBC1Ev>:
EP_RECORD dev0ep;           //Endpoint data structure used during enumeration for uninitialized device


/* constructor */

USB::USB () {
    1450:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN8MAX3421EC2Ev>
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    1454:	81 e1       	ldi	r24, 0x11	; 17
    1456:	80 93 ad 05 	sts	0x05AD, r24
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    145a:	10 92 9f 05 	sts	0x059F, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    145e:	10 92 a1 05 	sts	0x05A1, r1
    1462:	10 92 a0 05 	sts	0x05A0, r1
        devtable[ i ].devclass = 0;
    1466:	10 92 a2 05 	sts	0x05A2, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    146a:	10 92 a4 05 	sts	0x05A4, r1
    146e:	10 92 a3 05 	sts	0x05A3, r1
        devtable[ i ].devclass = 0;
    1472:	10 92 a5 05 	sts	0x05A5, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    1476:	86 ea       	ldi	r24, 0xA6	; 166
    1478:	95 e0       	ldi	r25, 0x05	; 5
    147a:	90 93 9e 05 	sts	0x059E, r25
    147e:	80 93 9d 05 	sts	0x059D, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    1482:	80 e4       	ldi	r24, 0x40	; 64
    1484:	80 93 ab 05 	sts	0x05AB, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    1488:	80 e1       	ldi	r24, 0x10	; 16
    148a:	80 93 ac 05 	sts	0x05AC, r24
/* constructor */

USB::USB () {
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    init(); 
}
    148e:	08 95       	ret

00001490 <_ZN14DynamixelClass10read_errorEv>:
#endif


// Private Methods //////////////////////////////////////////////////////////////

int DynamixelClass::read_error(void)
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	ec 01       	movw	r28, r24
{
int Length_Read;

	Time_Counter = READ_TIME_OUT + millis(); 					// Setup time out error
    149a:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    149e:	6e 5f       	subi	r22, 0xFE	; 254
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	68 83       	st	Y, r22
    14a8:	79 83       	std	Y+1, r23	; 0x01
    14aa:	8a 83       	std	Y+2, r24	; 0x02
    14ac:	9b 83       	std	Y+3, r25	; 0x03
    14ae:	19 c0       	rjmp	.+50     	; 0x14e2 <_ZN14DynamixelClass10read_errorEv+0x52>
	
    while(Serial.available() < 5 ) {							// Wait for header data, ID Length and error data from Dynamixel									
			if ( millis() >= Time_Counter) {
    14b0:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    14b4:	28 81       	ld	r18, Y
    14b6:	39 81       	ldd	r19, Y+1	; 0x01
    14b8:	4a 81       	ldd	r20, Y+2	; 0x02
    14ba:	5b 81       	ldd	r21, Y+3	; 0x03
    14bc:	62 17       	cp	r22, r18
    14be:	73 07       	cpc	r23, r19
    14c0:	84 07       	cpc	r24, r20
    14c2:	95 07       	cpc	r25, r21
    14c4:	18 f0       	brcs	.+6      	; 0x14cc <_ZN14DynamixelClass10read_errorEv+0x3c>
    14c6:	22 e0       	ldi	r18, 0x02	; 2
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	61 c0       	rjmp	.+194    	; 0x158e <_ZN14DynamixelClass10read_errorEv+0xfe>
				return(-254);									// time out error , exit with fauilt code
			}					
		if( Serial.peek() != 0xFF )	{					
    14cc:	8c ee       	ldi	r24, 0xEC	; 236
    14ce:	97 e0       	ldi	r25, 0x07	; 7
    14d0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <_ZN14HardwareSerial4peekEv>
    14d4:	8f 3f       	cpi	r24, 0xFF	; 255
    14d6:	91 05       	cpc	r25, r1
    14d8:	21 f0       	breq	.+8      	; 0x14e2 <_ZN14DynamixelClass10read_errorEv+0x52>
			Serial.read(); 										// Clear Present Byte so next Byte can be read as we are looking for header (start of Frame) data "0xFF"							
    14da:	8c ee       	ldi	r24, 0xEC	; 236
    14dc:	97 e0       	ldi	r25, 0x07	; 7
    14de:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN14HardwareSerial4readEv>
{
int Length_Read;

	Time_Counter = READ_TIME_OUT + millis(); 					// Setup time out error
	
    while(Serial.available() < 5 ) {							// Wait for header data, ID Length and error data from Dynamixel									
    14e2:	8c ee       	ldi	r24, 0xEC	; 236
    14e4:	97 e0       	ldi	r25, 0x07	; 7
    14e6:	0e 94 c3 14 	call	0x2986	; 0x2986 <_ZN14HardwareSerial9availableEv>
    14ea:	05 97       	sbiw	r24, 0x05	; 5
    14ec:	0c f3       	brlt	.-62     	; 0x14b0 <_ZN14DynamixelClass10read_errorEv+0x20>
		if( Serial.peek() != 0xFF )	{					
			Serial.read(); 										// Clear Present Byte so next Byte can be read as we are looking for header (start of Frame) data "0xFF"							
		} 

	}		
		Incoming_Byte = Serial.read();
    14ee:	8c ee       	ldi	r24, 0xEC	; 236
    14f0:	97 e0       	ldi	r25, 0x07	; 7
    14f2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN14HardwareSerial4readEv>
    14f6:	18 2f       	mov	r17, r24
    14f8:	8e 83       	std	Y+6, r24	; 0x06
		if (Incoming_Byte == 0xFF & Serial.peek() == 0xFF){		// check that there are 2 "0xFF" header data
    14fa:	8c ee       	ldi	r24, 0xEC	; 236
    14fc:	97 e0       	ldi	r25, 0x07	; 7
    14fe:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <_ZN14HardwareSerial4peekEv>
    1502:	1f 3f       	cpi	r17, 0xFF	; 255
    1504:	19 f4       	brne	.+6      	; 0x150c <_ZN14DynamixelClass10read_errorEv+0x7c>
    1506:	8f 3f       	cpi	r24, 0xFF	; 255
    1508:	91 05       	cpc	r25, r1
    150a:	19 f0       	breq	.+6      	; 0x1512 <_ZN14DynamixelClass10read_errorEv+0x82>
    150c:	24 e0       	ldi	r18, 0x04	; 4
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	3e c0       	rjmp	.+124    	; 0x158e <_ZN14DynamixelClass10read_errorEv+0xfe>
			Serial.read(); 										// clear 2nd 0xFF
    1512:	8c ee       	ldi	r24, 0xEC	; 236
    1514:	97 e0       	ldi	r25, 0x07	; 7
    1516:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN14HardwareSerial4readEv>
			Serial.read();                    					// ID sent from Dynamixel
    151a:	8c ee       	ldi	r24, 0xEC	; 236
    151c:	97 e0       	ldi	r25, 0x07	; 7
    151e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN14HardwareSerial4readEv>
			Length_Read = Serial.read();						// Frame Length
    1522:	8c ee       	ldi	r24, 0xEC	; 236
    1524:	97 e0       	ldi	r25, 0x07	; 7
    1526:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN14HardwareSerial4readEv>
    152a:	8c 01       	movw	r16, r24
			Serial.read();
    152c:	8c ee       	ldi	r24, 0xEC	; 236
    152e:	97 e0       	ldi	r25, 0x07	; 7
    1530:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN14HardwareSerial4readEv>
			if( Error_Byte != 0 ) {   							// See if error code was sent from Dynamixel	
    1534:	8e 89       	ldd	r24, Y+22	; 0x16
    1536:	9f 89       	ldd	r25, Y+23	; 0x17
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <_ZN14DynamixelClass10read_errorEv+0xb6>
				return (Error_Byte*(-1));					
    153c:	22 27       	eor	r18, r18
    153e:	33 27       	eor	r19, r19
    1540:	28 1b       	sub	r18, r24
    1542:	39 0b       	sbc	r19, r25
    1544:	24 c0       	rjmp	.+72     	; 0x158e <_ZN14DynamixelClass10read_errorEv+0xfe>
				}
				
					Time_Counter = READ_TIME_OUT + millis(); 	// Setup time out error
    1546:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    154a:	6e 5f       	subi	r22, 0xFE	; 254
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	8f 4f       	sbci	r24, 0xFF	; 255
    1550:	9f 4f       	sbci	r25, 0xFF	; 255
    1552:	68 83       	st	Y, r22
    1554:	79 83       	std	Y+1, r23	; 0x01
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	9b 83       	std	Y+3, r25	; 0x03
					while(Serial.available() < Length_Read - 1)	// Wait loop for rest of data from Dynamixel			
    155a:	01 50       	subi	r16, 0x01	; 1
    155c:	10 40       	sbci	r17, 0x00	; 0
    155e:	0e c0       	rjmp	.+28     	; 0x157c <_ZN14DynamixelClass10read_errorEv+0xec>
					{					
						if ( millis() >= Time_Counter){
    1560:	0e 94 7e 18 	call	0x30fc	; 0x30fc <millis>
    1564:	28 81       	ld	r18, Y
    1566:	39 81       	ldd	r19, Y+1	; 0x01
    1568:	4a 81       	ldd	r20, Y+2	; 0x02
    156a:	5b 81       	ldd	r21, Y+3	; 0x03
    156c:	62 17       	cp	r22, r18
    156e:	73 07       	cpc	r23, r19
    1570:	84 07       	cpc	r24, r20
    1572:	95 07       	cpc	r25, r21
    1574:	18 f0       	brcs	.+6      	; 0x157c <_ZN14DynamixelClass10read_errorEv+0xec>
    1576:	23 e0       	ldi	r18, 0x03	; 3
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	09 c0       	rjmp	.+18     	; 0x158e <_ZN14DynamixelClass10read_errorEv+0xfe>
			if( Error_Byte != 0 ) {   							// See if error code was sent from Dynamixel	
				return (Error_Byte*(-1));					
				}
				
					Time_Counter = READ_TIME_OUT + millis(); 	// Setup time out error
					while(Serial.available() < Length_Read - 1)	// Wait loop for rest of data from Dynamixel			
    157c:	8c ee       	ldi	r24, 0xEC	; 236
    157e:	97 e0       	ldi	r25, 0x07	; 7
    1580:	0e 94 c3 14 	call	0x2986	; 0x2986 <_ZN14HardwareSerial9availableEv>
    1584:	80 17       	cp	r24, r16
    1586:	91 07       	cpc	r25, r17
    1588:	5c f3       	brlt	.-42     	; 0x1560 <_ZN14DynamixelClass10read_errorEv+0xd0>
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
									
		}else{
			return(-252);										//2nd Header data not recived, exit with fauilt code
			}
	return (0x00);											 	// No Ax Response
}
    158e:	c9 01       	movw	r24, r18
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	08 95       	ret

0000159a <_ZN14DynamixelClass8ledStateEhb>:
    digitalWrite(Direction_Pin,LOW);    // Set Rx Mode
    
    return (read_error());              // Return the read error
}

int DynamixelClass::ledState(unsigned char ID, bool Status)
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	7c 01       	movw	r14, r24
    15a8:	d6 2e       	mov	r13, r22
    15aa:	c4 2e       	mov	r12, r20
{    
    Checksum = ~(ID + AX_LED_LENGTH + AX_WRITE_DATA + AX_LED + Status);
    15ac:	86 2f       	mov	r24, r22
    15ae:	80 5e       	subi	r24, 0xE0	; 224
    15b0:	84 0f       	add	r24, r20
    15b2:	80 95       	com	r24
    15b4:	f7 01       	movw	r30, r14
    15b6:	84 83       	std	Z+4, r24	; 0x04

    
    digitalWrite(Direction_Pin,HIGH);   // Set Tx Mode
    15b8:	85 81       	ldd	r24, Z+5	; 0x05
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    Serial.write(AX_START);              // Send Instructions over Serial
    15c0:	0c ee       	ldi	r16, 0xEC	; 236
    15c2:	17 e0       	ldi	r17, 0x07	; 7
    15c4:	c8 01       	movw	r24, r16
    15c6:	6f ef       	ldi	r22, 0xFF	; 255
    15c8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_START);
    15cc:	c8 01       	movw	r24, r16
    15ce:	6f ef       	ldi	r22, 0xFF	; 255
    15d0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(ID);
    15d4:	c8 01       	movw	r24, r16
    15d6:	6d 2d       	mov	r22, r13
    15d8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_LED_LENGTH);
    15dc:	c8 01       	movw	r24, r16
    15de:	64 e0       	ldi	r22, 0x04	; 4
    15e0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_WRITE_DATA);
    15e4:	c8 01       	movw	r24, r16
    15e6:	63 e0       	ldi	r22, 0x03	; 3
    15e8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_LED);
    15ec:	c8 01       	movw	r24, r16
    15ee:	69 e1       	ldi	r22, 0x19	; 25
    15f0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(Status);
    15f4:	c8 01       	movw	r24, r16
    15f6:	6c 2d       	mov	r22, r12
    15f8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(Checksum);
    15fc:	c8 01       	movw	r24, r16
    15fe:	f7 01       	movw	r30, r14
    1600:	64 81       	ldd	r22, Z+4	; 0x04
    1602:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    delayMicroseconds(TX_DELAY_TIME);
    1606:	8c e0       	ldi	r24, 0x0C	; 12
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
    digitalWrite(Direction_Pin,LOW);    // Set Rx Mode
    160e:	f7 01       	movw	r30, r14
    1610:	85 81       	ldd	r24, Z+5	; 0x05
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    
    return (read_error());              // Return the read error
    1618:	c7 01       	movw	r24, r14
    161a:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>
}
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	08 95       	ret

0000162c <_ZN14DynamixelClass9torqueMaxEhi>:
	digitalWrite(Direction_Pin,LOW);     // Set Rx Mode
	
	return (read_error()); 				// Return the read error
}

int DynamixelClass::torqueMax( unsigned char ID, int Status)
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	7c 01       	movw	r14, r24
    1640:	96 2e       	mov	r9, r22
    1642:	6a 01       	movw	r12, r20
{
    char TorqueMax_L,TorqueMax_H;
	TorqueMax_L = Status & 0xFF;      	
    TorqueMax_H = Status >> 8;    
	
	Checksum = ~(ID + AX_TORQUE_MAX_LENGTH + AX_WRITE_DATA + AX_MAX_TORQUE_L + TorqueMax_L + TorqueMax_H);
    1644:	a5 2e       	mov	r10, r21
    1646:	bb 24       	eor	r11, r11
    1648:	a7 fc       	sbrc	r10, 7
    164a:	ba 94       	dec	r11
    164c:	86 2f       	mov	r24, r22
    164e:	8a 5e       	subi	r24, 0xEA	; 234
    1650:	84 0f       	add	r24, r20
    1652:	8a 0d       	add	r24, r10
    1654:	80 95       	com	r24
    1656:	f7 01       	movw	r30, r14
    1658:	84 83       	std	Z+4, r24	; 0x04
	
    digitalWrite(Direction_Pin,HIGH);   // Set Tx Mode
    165a:	85 81       	ldd	r24, Z+5	; 0x05
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    Serial.write(AX_START);              // Send Instructions over Serial
    1662:	0c ee       	ldi	r16, 0xEC	; 236
    1664:	17 e0       	ldi	r17, 0x07	; 7
    1666:	c8 01       	movw	r24, r16
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_START);
    166e:	c8 01       	movw	r24, r16
    1670:	6f ef       	ldi	r22, 0xFF	; 255
    1672:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(ID);
    1676:	c8 01       	movw	r24, r16
    1678:	69 2d       	mov	r22, r9
    167a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_TORQUE_MAX_LENGTH);
    167e:	c8 01       	movw	r24, r16
    1680:	65 e0       	ldi	r22, 0x05	; 5
    1682:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_WRITE_DATA);
    1686:	c8 01       	movw	r24, r16
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_MAX_TORQUE_L);
    168e:	c8 01       	movw	r24, r16
    1690:	6e e0       	ldi	r22, 0x0E	; 14
    1692:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(TorqueMax_L);
    1696:	c8 01       	movw	r24, r16
    1698:	6c 2d       	mov	r22, r12
    169a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(TorqueMax_H);
    169e:	c8 01       	movw	r24, r16
    16a0:	6a 2d       	mov	r22, r10
    16a2:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(Checksum);
    16a6:	c8 01       	movw	r24, r16
    16a8:	f7 01       	movw	r30, r14
    16aa:	64 81       	ldd	r22, Z+4	; 0x04
    16ac:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    delayMicroseconds(TX_DELAY_TIME);
    16b0:	8c e0       	ldi	r24, 0x0C	; 12
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
    digitalWrite(Direction_Pin,LOW);    // Set Rx Mode
    16b8:	f7 01       	movw	r30, r14
    16ba:	85 81       	ldd	r24, Z+5	; 0x05
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    
    return (read_error());              // Return the read error
    16c2:	c7 01       	movw	r24, r14
    16c4:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>
}
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	9f 90       	pop	r9
    16da:	08 95       	ret

000016dc <_ZN14DynamixelClass4turnEhbi>:
	 
	 return (read_error());                 // Return the read error
  }
 } 

int DynamixelClass::turn(unsigned char ID, bool SIDE, int Speed)
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	ec 01       	movw	r28, r24
    16ea:	e6 2e       	mov	r14, r22
    16ec:	89 01       	movw	r16, r18
    16ee:	63 2f       	mov	r22, r19
    16f0:	77 27       	eor	r23, r23
    16f2:	67 fd       	sbrc	r22, 7
    16f4:	7a 95       	dec	r23
{	
	char Speed_H,Speed_L;
	Speed_L = Speed & 0xFF;	
		if (SIDE == 0){                          // Move Left                     
    16f6:	44 23       	and	r20, r20
    16f8:	11 f4       	brne	.+4      	; 0x16fe <_ZN14DynamixelClass4turnEhbi+0x22>
			Speed_H = Speed >> 8;
    16fa:	f6 2e       	mov	r15, r22
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <_ZN14DynamixelClass4turnEhbi+0x28>
			}
		else if (SIDE == 1){					// Move Right
			Speed_H = (Speed >> 8)+4;	
    16fe:	74 e0       	ldi	r23, 0x04	; 4
    1700:	f7 2e       	mov	r15, r23
    1702:	f6 0e       	add	r15, r22
			}	
			
			Checksum = ~(ID + AX_SPEED_LENGTH + AX_WRITE_DATA + AX_GOAL_SPEED_L + Speed_L + Speed_H);
    1704:	8e 2d       	mov	r24, r14
    1706:	88 5d       	subi	r24, 0xD8	; 216
    1708:	80 0f       	add	r24, r16
    170a:	8f 0d       	add	r24, r15
    170c:	80 95       	com	r24
    170e:	8c 83       	std	Y+4, r24	; 0x04
			
			digitalWrite(Direction_Pin,HIGH);     // Set Tx Mode
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
			Serial.write(AX_START);                // Send Instructions over Serial
    1718:	8c ee       	ldi	r24, 0xEC	; 236
    171a:	97 e0       	ldi	r25, 0x07	; 7
    171c:	6f ef       	ldi	r22, 0xFF	; 255
    171e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(AX_START);
    1722:	8c ee       	ldi	r24, 0xEC	; 236
    1724:	97 e0       	ldi	r25, 0x07	; 7
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(ID);
    172c:	8c ee       	ldi	r24, 0xEC	; 236
    172e:	97 e0       	ldi	r25, 0x07	; 7
    1730:	6e 2d       	mov	r22, r14
    1732:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(AX_SPEED_LENGTH);
    1736:	8c ee       	ldi	r24, 0xEC	; 236
    1738:	97 e0       	ldi	r25, 0x07	; 7
    173a:	65 e0       	ldi	r22, 0x05	; 5
    173c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(AX_WRITE_DATA);
    1740:	8c ee       	ldi	r24, 0xEC	; 236
    1742:	97 e0       	ldi	r25, 0x07	; 7
    1744:	63 e0       	ldi	r22, 0x03	; 3
    1746:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(AX_GOAL_SPEED_L);
    174a:	8c ee       	ldi	r24, 0xEC	; 236
    174c:	97 e0       	ldi	r25, 0x07	; 7
    174e:	60 e2       	ldi	r22, 0x20	; 32
    1750:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(Speed_L);
    1754:	8c ee       	ldi	r24, 0xEC	; 236
    1756:	97 e0       	ldi	r25, 0x07	; 7
    1758:	60 2f       	mov	r22, r16
    175a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(Speed_H);
    175e:	8c ee       	ldi	r24, 0xEC	; 236
    1760:	97 e0       	ldi	r25, 0x07	; 7
    1762:	6f 2d       	mov	r22, r15
    1764:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			Serial.write(Checksum);
    1768:	8c ee       	ldi	r24, 0xEC	; 236
    176a:	97 e0       	ldi	r25, 0x07	; 7
    176c:	6c 81       	ldd	r22, Y+4	; 0x04
    176e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
			delayMicroseconds(TX_DELAY_TIME);
    1772:	8c e0       	ldi	r24, 0x0C	; 12
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
			digitalWrite(Direction_Pin,LOW);     // Set Rx Mode
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
			
			return(read_error());               // Return the read error		
    1782:	ce 01       	movw	r24, r28
    1784:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>

}
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	08 95       	ret

00001796 <_ZN14DynamixelClass13endlessEnableEhb>:
    digitalWrite(Direction_Pin,LOW);     // Set Rx Mode
    
    return (read_error());               // Return the read error
}

int DynamixelClass::endlessEnable(unsigned char ID, bool Status)
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	ec 01       	movw	r28, r24
    179e:	16 2f       	mov	r17, r22
{
 if ( Status == 1) {	
    17a0:	44 23       	and	r20, r20
    17a2:	79 f1       	breq	.+94     	; 0x1802 <_ZN14DynamixelClass13endlessEnableEhb+0x6c>
	  char AX_CW_AL_L = 0;
	  Checksum = ~(ID + AX_GOAL_LENGTH + AX_WRITE_DATA + AX_CCW_ANGLE_LIMIT_L );
    17a4:	86 2f       	mov	r24, r22
    17a6:	80 5f       	subi	r24, 0xF0	; 240
    17a8:	80 95       	com	r24
    17aa:	8c 83       	std	Y+4, r24	; 0x04
	
	  // Changing the CCW Angle Limits for Full Rotation.
	
	  digitalWrite(Direction_Pin,HIGH);     // Set Tx Mode
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
      Serial.write(AX_START);                // Send Instructions over Serial
    17b4:	8c ee       	ldi	r24, 0xEC	; 236
    17b6:	97 e0       	ldi	r25, 0x07	; 7
    17b8:	6f ef       	ldi	r22, 0xFF	; 255
    17ba:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(AX_START);
    17be:	8c ee       	ldi	r24, 0xEC	; 236
    17c0:	97 e0       	ldi	r25, 0x07	; 7
    17c2:	6f ef       	ldi	r22, 0xFF	; 255
    17c4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(ID);
    17c8:	8c ee       	ldi	r24, 0xEC	; 236
    17ca:	97 e0       	ldi	r25, 0x07	; 7
    17cc:	61 2f       	mov	r22, r17
    17ce:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(AX_GOAL_LENGTH);
    17d2:	8c ee       	ldi	r24, 0xEC	; 236
    17d4:	97 e0       	ldi	r25, 0x07	; 7
    17d6:	65 e0       	ldi	r22, 0x05	; 5
    17d8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(AX_WRITE_DATA);
    17dc:	8c ee       	ldi	r24, 0xEC	; 236
    17de:	97 e0       	ldi	r25, 0x07	; 7
    17e0:	63 e0       	ldi	r22, 0x03	; 3
    17e2:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(AX_CCW_ANGLE_LIMIT_L );
    17e6:	8c ee       	ldi	r24, 0xEC	; 236
    17e8:	97 e0       	ldi	r25, 0x07	; 7
    17ea:	68 e0       	ldi	r22, 0x08	; 8
    17ec:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(AX_CW_AL_L);
    17f0:	8c ee       	ldi	r24, 0xEC	; 236
    17f2:	97 e0       	ldi	r25, 0x07	; 7
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
      Serial.write(AX_CW_AL_L);
    17fa:	8c ee       	ldi	r24, 0xEC	; 236
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	33 c0       	rjmp	.+102    	; 0x1868 <_ZN14DynamixelClass13endlessEnableEhb+0xd2>
      digitalWrite(Direction_Pin,LOW);     // Set Rx Mode
	return(read_error());
 }
 else
 {
	 turn(ID,0,0);
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN14DynamixelClass4turnEhbi>
	 char CCW_Limit_H,CCW_Limit_L;
	 CCW_Limit_L = CCW_Limit & 0xFF;
	 CCW_Limit_H = CCW_Limit >> 8;           // 16 bits - 2 x 8 bits variables

	 
	 Checksum = ~(ID + AX_GOAL_LENGTH + AX_WRITE_DATA + AX_CCW_ANGLE_LIMIT_L +CCW_Limit_L + CCW_Limit_H);
    180c:	81 2f       	mov	r24, r17
    180e:	8e 5e       	subi	r24, 0xEE	; 238
    1810:	80 95       	com	r24
    1812:	8c 83       	std	Y+4, r24	; 0x04

	 
	 digitalWrite(Direction_Pin,HIGH);      // Set Tx Mode
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
	 Serial.write(AX_START);                 // Send Instructions over Serial
    181c:	8c ee       	ldi	r24, 0xEC	; 236
    181e:	97 e0       	ldi	r25, 0x07	; 7
    1820:	6f ef       	ldi	r22, 0xFF	; 255
    1822:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(AX_START);
    1826:	8c ee       	ldi	r24, 0xEC	; 236
    1828:	97 e0       	ldi	r25, 0x07	; 7
    182a:	6f ef       	ldi	r22, 0xFF	; 255
    182c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(ID);
    1830:	8c ee       	ldi	r24, 0xEC	; 236
    1832:	97 e0       	ldi	r25, 0x07	; 7
    1834:	61 2f       	mov	r22, r17
    1836:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(AX_GOAL_LENGTH);
    183a:	8c ee       	ldi	r24, 0xEC	; 236
    183c:	97 e0       	ldi	r25, 0x07	; 7
    183e:	65 e0       	ldi	r22, 0x05	; 5
    1840:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(AX_WRITE_DATA);
    1844:	8c ee       	ldi	r24, 0xEC	; 236
    1846:	97 e0       	ldi	r25, 0x07	; 7
    1848:	63 e0       	ldi	r22, 0x03	; 3
    184a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(AX_CCW_ANGLE_LIMIT_L);
    184e:	8c ee       	ldi	r24, 0xEC	; 236
    1850:	97 e0       	ldi	r25, 0x07	; 7
    1852:	68 e0       	ldi	r22, 0x08	; 8
    1854:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(CCW_Limit_L);
    1858:	8c ee       	ldi	r24, 0xEC	; 236
    185a:	97 e0       	ldi	r25, 0x07	; 7
    185c:	6f ef       	ldi	r22, 0xFF	; 255
    185e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(CCW_Limit_H);
    1862:	8c ee       	ldi	r24, 0xEC	; 236
    1864:	97 e0       	ldi	r25, 0x07	; 7
    1866:	63 e0       	ldi	r22, 0x03	; 3
    1868:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 Serial.write(Checksum);
    186c:	8c ee       	ldi	r24, 0xEC	; 236
    186e:	97 e0       	ldi	r25, 0x07	; 7
    1870:	6c 81       	ldd	r22, Y+4	; 0x04
    1872:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	 delayMicroseconds(TX_DELAY_TIME);
    1876:	8c e0       	ldi	r24, 0x0C	; 12
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
	 digitalWrite(Direction_Pin,LOW);       // Set Rx Mode
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
	 
	 return (read_error());                 // Return the read error
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>
  }
 } 
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	08 95       	ret

00001894 <_ZN14DynamixelClass5setBDEhl>:
	digitalWrite(Direction_Pin,LOW);      // Set Rx Mode
    
    return (read_error());                // Return the read error
}

int DynamixelClass::setBD(unsigned char ID, long Baud)
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	7c 01       	movw	r14, r24
    18a2:	c6 2e       	mov	r12, r22
{    
	unsigned char Baud_Rate = (2000000/Baud) - 1;
    18a4:	60 e8       	ldi	r22, 0x80	; 128
    18a6:	74 e8       	ldi	r23, 0x84	; 132
    18a8:	8e e1       	ldi	r24, 0x1E	; 30
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__divmodsi4>
    18b0:	d2 2e       	mov	r13, r18
    18b2:	da 94       	dec	r13
//	unsigned char Baud_Rate = (Baud);
    Checksum = ~(ID + AX_BD_LENGTH + AX_WRITE_DATA + AX_BAUD_RATE + Baud_Rate); 
    18b4:	8c 2d       	mov	r24, r12
    18b6:	85 5f       	subi	r24, 0xF5	; 245
    18b8:	8d 0d       	add	r24, r13
    18ba:	80 95       	com	r24
    18bc:	f7 01       	movw	r30, r14
    18be:	84 83       	std	Z+4, r24	; 0x04
 	
    digitalWrite(Direction_Pin,HIGH);      // Set Tx Mode
    18c0:	85 81       	ldd	r24, Z+5	; 0x05
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    Serial.write(AX_START);                 // Send Instructions over Serial
    18c8:	0c ee       	ldi	r16, 0xEC	; 236
    18ca:	17 e0       	ldi	r17, 0x07	; 7
    18cc:	c8 01       	movw	r24, r16
    18ce:	6f ef       	ldi	r22, 0xFF	; 255
    18d0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_START);
    18d4:	c8 01       	movw	r24, r16
    18d6:	6f ef       	ldi	r22, 0xFF	; 255
    18d8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(ID);
    18dc:	c8 01       	movw	r24, r16
    18de:	6c 2d       	mov	r22, r12
    18e0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(AX_BD_LENGTH);
    18e4:	c8 01       	movw	r24, r16
    18e6:	64 e0       	ldi	r22, 0x04	; 4
    18e8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_WRITE_DATA);
    18ec:	c8 01       	movw	r24, r16
    18ee:	63 e0       	ldi	r22, 0x03	; 3
    18f0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_BAUD_RATE);
    18f4:	c8 01       	movw	r24, r16
    18f6:	64 e0       	ldi	r22, 0x04	; 4
    18f8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(Baud_Rate);
    18fc:	c8 01       	movw	r24, r16
    18fe:	6d 2d       	mov	r22, r13
    1900:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(Checksum);
    1904:	c8 01       	movw	r24, r16
    1906:	f7 01       	movw	r30, r14
    1908:	64 81       	ldd	r22, Z+4	; 0x04
    190a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    delayMicroseconds(TX_BD_DELAY_TIME);
    190e:	84 ef       	ldi	r24, 0xF4	; 244
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
    digitalWrite(Direction_Pin,LOW);      // Set Rx Mode
    1916:	f7 01       	movw	r30, r14
    1918:	85 81       	ldd	r24, Z+5	; 0x05
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    
    return (read_error());                // Return the read error
    1920:	c7 01       	movw	r24, r14
    1922:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>
}
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	df 90       	pop	r13
    1930:	cf 90       	pop	r12
    1932:	08 95       	ret

00001934 <_ZN14DynamixelClass5setIDEhh>:
    digitalWrite(Direction_Pin,LOW);      // Set Rx Mode
    
    return (read_error());                // Return the read error
}

int DynamixelClass::setID(unsigned char ID, unsigned char New_ID)
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	7c 01       	movw	r14, r24
    1942:	d6 2e       	mov	r13, r22
    1944:	c4 2e       	mov	r12, r20
{    
    Checksum = ~(ID + AX_ID_LENGTH + AX_WRITE_DATA + AX_ID + New_ID);  
    1946:	86 2f       	mov	r24, r22
    1948:	86 5f       	subi	r24, 0xF6	; 246
    194a:	84 0f       	add	r24, r20
    194c:	80 95       	com	r24
    194e:	f7 01       	movw	r30, r14
    1950:	84 83       	std	Z+4, r24	; 0x04
	
    digitalWrite(Direction_Pin,HIGH);     // Set Tx Mode
    1952:	85 81       	ldd	r24, Z+5	; 0x05
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    Serial.write(AX_START);                // Send Instructions over Serial
    195a:	0c ee       	ldi	r16, 0xEC	; 236
    195c:	17 e0       	ldi	r17, 0x07	; 7
    195e:	c8 01       	movw	r24, r16
    1960:	6f ef       	ldi	r22, 0xFF	; 255
    1962:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_START);
    1966:	c8 01       	movw	r24, r16
    1968:	6f ef       	ldi	r22, 0xFF	; 255
    196a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(ID);
    196e:	c8 01       	movw	r24, r16
    1970:	6d 2d       	mov	r22, r13
    1972:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(AX_ID_LENGTH);
    1976:	c8 01       	movw	r24, r16
    1978:	64 e0       	ldi	r22, 0x04	; 4
    197a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_WRITE_DATA);
    197e:	c8 01       	movw	r24, r16
    1980:	63 e0       	ldi	r22, 0x03	; 3
    1982:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(AX_ID);
    1986:	c8 01       	movw	r24, r16
    1988:	63 e0       	ldi	r22, 0x03	; 3
    198a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(New_ID);
    198e:	c8 01       	movw	r24, r16
    1990:	6c 2d       	mov	r22, r12
    1992:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
    Serial.write(Checksum);
    1996:	c8 01       	movw	r24, r16
    1998:	f7 01       	movw	r30, r14
    199a:	64 81       	ldd	r22, Z+4	; 0x04
    199c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	delayMicroseconds(TX_DELAY_TIME);
    19a0:	8c e0       	ldi	r24, 0x0C	; 12
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
	digitalWrite(Direction_Pin,LOW);      // Set Rx Mode
    19a8:	f7 01       	movw	r30, r14
    19aa:	85 81       	ldd	r24, Z+5	; 0x05
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    
    return (read_error());                // Return the read error
    19b2:	c7 01       	movw	r24, r14
    19b4:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>
}
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	08 95       	ret

000019c6 <_ZN14DynamixelClass5resetEh>:
void DynamixelClass::end()
{
	Serial.end();
}

int DynamixelClass::reset(unsigned char ID)
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	7c 01       	movw	r14, r24
    19d2:	d6 2e       	mov	r13, r22
{
	Checksum = ~(ID + AX_RESET_LENGTH + AX_RESET);    // Bitwise not, then "AND" with HEX "FF" so only lower 8 bits are use      
    19d4:	86 2f       	mov	r24, r22
    19d6:	88 5f       	subi	r24, 0xF8	; 248
    19d8:	80 95       	com	r24
    19da:	f7 01       	movw	r30, r14
    19dc:	84 83       	std	Z+4, r24	; 0x04
	
	digitalWrite(Direction_Pin,HIGH);
    19de:	85 81       	ldd	r24, Z+5	; 0x05
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
	Serial.write(AX_START);                     
    19e6:	0c ee       	ldi	r16, 0xEC	; 236
    19e8:	17 e0       	ldi	r17, 0x07	; 7
    19ea:	c8 01       	movw	r24, r16
    19ec:	6f ef       	ldi	r22, 0xFF	; 255
    19ee:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(AX_START);
    19f2:	c8 01       	movw	r24, r16
    19f4:	6f ef       	ldi	r22, 0xFF	; 255
    19f6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(ID);
    19fa:	c8 01       	movw	r24, r16
    19fc:	6d 2d       	mov	r22, r13
    19fe:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(AX_RESET_LENGTH);
    1a02:	c8 01       	movw	r24, r16
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(AX_RESET);    
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	66 e0       	ldi	r22, 0x06	; 6
    1a0e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	Serial.write(Checksum);
    1a12:	c8 01       	movw	r24, r16
    1a14:	f7 01       	movw	r30, r14
    1a16:	64 81       	ldd	r22, Z+4	; 0x04
    1a18:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <_ZN14HardwareSerial5writeEh>
	delayMicroseconds(TX_DELAY_TIME);
    1a1c:	8c e0       	ldi	r24, 0x0C	; 12
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 e5 18 	call	0x31ca	; 0x31ca <delayMicroseconds>
	digitalWrite(Direction_Pin,LOW);
    1a24:	f7 01       	movw	r30, r14
    1a26:	85 81       	ldd	r24, Z+5	; 0x05
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
    
    return (read_error());  
    1a2e:	c7 01       	movw	r24, r14
    1a30:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14DynamixelClass10read_errorEv>
}
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	08 95       	ret

00001a40 <_ZN14DynamixelClass5beginElh>:
{	
	Serial.begin(baud);
	
}

void DynamixelClass::begin(long baud, unsigned char D_Pin)
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	8c 01       	movw	r16, r24
    1a50:	6a 01       	movw	r12, r20
    1a52:	7b 01       	movw	r14, r22
    1a54:	b2 2e       	mov	r11, r18
{	
	pinMode(D_Pin,OUTPUT);
    1a56:	82 2f       	mov	r24, r18
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
	Direction_Pin = D_Pin;
    1a5e:	f8 01       	movw	r30, r16
    1a60:	b5 82       	std	Z+5, r11	; 0x05
	Serial.begin(baud);
    1a62:	8c ee       	ldi	r24, 0xEC	; 236
    1a64:	97 e0       	ldi	r25, 0x07	; 7
    1a66:	b7 01       	movw	r22, r14
    1a68:	a6 01       	movw	r20, r12
    1a6a:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN14HardwareSerial5beginEm>
	
}	
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	bf 90       	pop	r11
    1a7c:	08 95       	ret

00001a7e <_ZN16AndroidAccessory5writeEh>:
{
    usb.outTransfer(1, out, len, (char *)buff);
    return len;
}

size_t AndroidAccessory::write(uint8_t c) {
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	fc 01       	movw	r30, r24
    1a8a:	69 83       	std	Y+1, r22	; 0x01
  return write(&c, 1);
    1a8c:	a0 81       	ld	r26, Z
    1a8e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a90:	1c 96       	adiw	r26, 0x0c	; 12
    1a92:	2d 91       	ld	r18, X+
    1a94:	3c 91       	ld	r19, X
    1a96:	1d 97       	sbiw	r26, 0x0d	; 13
    1a98:	be 01       	movw	r22, r28
    1a9a:	6f 5f       	subi	r22, 0xFF	; 255
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	19 95       	eicall
}
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <_ZN16AndroidAccessory5flushEv>:

    from <http://arduino.cc/en/Serial/Flush>

    We're treating this as a no-op at the moment.
  */
}
    1aae:	08 95       	ret

00001ab0 <_ZN16AndroidAccessory5writeEPhj>:
int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
}

size_t AndroidAccessory::write(uint8_t *buff, size_t len)
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	fc 01       	movw	r30, r24
    1abe:	8b 01       	movw	r16, r22
    1ac0:	d4 2e       	mov	r13, r20
    1ac2:	c5 2e       	mov	r12, r21
{
    usb.outTransfer(1, out, len, (char *)buff);
    1ac4:	49 96       	adiw	r24, 0x19	; 25
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	44 8d       	ldd	r20, Z+28	; 0x1c
    1aca:	2d 2d       	mov	r18, r13
    1acc:	35 2f       	mov	r19, r21
    1ace:	e1 2c       	mov	r14, r1
    1ad0:	5d e7       	ldi	r21, 0x7D	; 125
    1ad2:	f5 2e       	mov	r15, r21
    1ad4:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN3USB11outTransferEhhjPcj>
    return len;
}
    1ad8:	8d 2d       	mov	r24, r13
    1ada:	9c 2d       	mov	r25, r12
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <_ZN16AndroidAccessory4readEPvij>:
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}

int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	fc 01       	movw	r30, r24
    1af4:	8b 01       	movw	r16, r22
    1af6:	da 01       	movw	r26, r20
    1af8:	79 01       	movw	r14, r18
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
    1afa:	49 96       	adiw	r24, 0x19	; 25
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	43 8d       	ldd	r20, Z+27	; 0x1b
    1b00:	9d 01       	movw	r18, r26
    1b02:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN3USB13newInTransferEhhjPcj>
}
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	ff 90       	pop	r15
    1b0c:	ef 90       	pop	r14
    1b0e:	08 95       	ret

00001b10 <_ZN16AndroidAccessory16refillDataBufferEv>:

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}

void AndroidAccessory::refillDataBuffer() {
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	fc 01       	movw	r30, r24
  int bytesRead = 0;

  numBytesInDataBuff = nextByteInDataBuffOffset = 0;
    1b16:	e9 56       	subi	r30, 0x69	; 105
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	11 82       	std	Z+1, r1	; 0x01
    1b1c:	10 82       	st	Z, r1
    1b1e:	e7 59       	subi	r30, 0x97	; 151
    1b20:	f1 40       	sbci	r31, 0x01	; 1
    1b22:	ef 01       	movw	r28, r30
    1b24:	cb 56       	subi	r28, 0x6B	; 107
    1b26:	de 4f       	sbci	r29, 0xFE	; 254
    1b28:	19 82       	std	Y+1, r1	; 0x01
    1b2a:	18 82       	st	Y, r1
  
  // TODO: Add is connected check?

  bytesRead = read(dataBuff, sizeof(dataBuff));
    1b2c:	cf 01       	movw	r24, r30
    1b2e:	eb 5a       	subi	r30, 0xAB	; 171
    1b30:	fe 4f       	sbci	r31, 0xFE	; 254
    1b32:	bf 01       	movw	r22, r30
    1b34:	40 e4       	ldi	r20, 0x40	; 64
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3d e7       	ldi	r19, 0x7D	; 125
    1b3c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN16AndroidAccessory4readEPvij>

  if (bytesRead >= 1) {
    1b40:	18 16       	cp	r1, r24
    1b42:	19 06       	cpc	r1, r25
    1b44:	14 f4       	brge	.+4      	; 0x1b4a <_ZN16AndroidAccessory16refillDataBufferEv+0x3a>
    numBytesInDataBuff = bytesRead;
    1b46:	99 83       	std	Y+1, r25	; 0x01
    1b48:	88 83       	st	Y, r24
  }
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <_ZN16AndroidAccessory9availableEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
}

int AndroidAccessory::available() {
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	ec 01       	movw	r28, r24
  // Strictly speaking this doesn't meet the "This is only for bytes
  // that have already arrived" definition from
  // <http://arduino.cc/en/Reference/StreamAvailable> but since the
  // data isn't handled by an ISR it's the only way to avoid hanging
  // waiting for `available()` to return true.
  if (dataBufferIsEmpty()) {
    1b56:	fc 01       	movw	r30, r24
    1b58:	eb 56       	subi	r30, 0x6B	; 107
    1b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5c:	c9 56       	subi	r28, 0x69	; 105
    1b5e:	de 4f       	sbci	r29, 0xFE	; 254
    1b60:	20 81       	ld	r18, Z
    1b62:	31 81       	ldd	r19, Z+1	; 0x01
    1b64:	88 81       	ld	r24, Y
    1b66:	99 81       	ldd	r25, Y+1	; 0x01
    1b68:	c7 59       	subi	r28, 0x97	; 151
    1b6a:	d1 40       	sbci	r29, 0x01	; 1
    1b6c:	28 17       	cp	r18, r24
    1b6e:	39 07       	cpc	r19, r25
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <_ZN16AndroidAccessory9availableEv+0x28>
    refillDataBuffer();
    1b72:	ce 01       	movw	r24, r28
    1b74:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN16AndroidAccessory16refillDataBufferEv>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e9 56       	subi	r30, 0x69	; 105
    1b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7e:	cb 56       	subi	r28, 0x6B	; 107
    1b80:	de 4f       	sbci	r29, 0xFE	; 254
    1b82:	28 81       	ld	r18, Y
    1b84:	39 81       	ldd	r19, Y+1	; 0x01
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	28 1b       	sub	r18, r24
    1b8c:	39 0b       	sbc	r19, r25
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}
    1b8e:	c9 01       	movw	r24, r18
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <_ZN16AndroidAccessory4peekEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
}

int AndroidAccessory::peek() {
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	ec 01       	movw	r28, r24

  if (dataBufferIsEmpty()) {
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	eb 56       	subi	r30, 0x6B	; 107
    1ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba2:	c9 56       	subi	r28, 0x69	; 105
    1ba4:	de 4f       	sbci	r29, 0xFE	; 254
    1ba6:	20 81       	ld	r18, Z
    1ba8:	31 81       	ldd	r19, Z+1	; 0x01
    1baa:	88 81       	ld	r24, Y
    1bac:	99 81       	ldd	r25, Y+1	; 0x01
    1bae:	c7 59       	subi	r28, 0x97	; 151
    1bb0:	d1 40       	sbci	r29, 0x01	; 1
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <_ZN16AndroidAccessory4peekEv+0x28>
    refillDataBuffer();
    1bb8:	ce 01       	movw	r24, r28
    1bba:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    1bbe:	c9 56       	subi	r28, 0x69	; 105
    1bc0:	de 4f       	sbci	r29, 0xFE	; 254
    1bc2:	28 81       	ld	r18, Y
    1bc4:	39 81       	ldd	r19, Y+1	; 0x01

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
    1bc6:	9a 91       	ld	r25, -Y
    1bc8:	8a 91       	ld	r24, -Y
    1bca:	c5 59       	subi	r28, 0x95	; 149
    1bcc:	d1 40       	sbci	r29, 0x01	; 1
    1bce:	82 17       	cp	r24, r18
    1bd0:	93 07       	cpc	r25, r19
    1bd2:	19 f4       	brne	.+6      	; 0x1bda <_ZN16AndroidAccessory4peekEv+0x44>
    1bd4:	ef ef       	ldi	r30, 0xFF	; 255
    1bd6:	ff ef       	ldi	r31, 0xFF	; 255
    1bd8:	07 c0       	rjmp	.+14     	; 0x1be8 <_ZN16AndroidAccessory4peekEv+0x52>
    1bda:	c2 0f       	add	r28, r18
    1bdc:	d3 1f       	adc	r29, r19
    1bde:	cb 5a       	subi	r28, 0xAB	; 171
    1be0:	de 4f       	sbci	r29, 0xFE	; 254
    1be2:	88 81       	ld	r24, Y
    1be4:	e8 2f       	mov	r30, r24
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
}
    1be8:	cf 01       	movw	r24, r30
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <_ZN16AndroidAccessory4readEv>:
  if (bytesRead >= 1) {
    numBytesInDataBuff = bytesRead;
  }
}

int AndroidAccessory::read() {
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	ec 01       	movw	r28, r24

  if (dataBufferIsEmpty()) {
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	eb 56       	subi	r30, 0x6B	; 107
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	c9 56       	subi	r28, 0x69	; 105
    1bfe:	de 4f       	sbci	r29, 0xFE	; 254
    1c00:	20 81       	ld	r18, Z
    1c02:	31 81       	ldd	r19, Z+1	; 0x01
    1c04:	88 81       	ld	r24, Y
    1c06:	99 81       	ldd	r25, Y+1	; 0x01
    1c08:	c7 59       	subi	r28, 0x97	; 151
    1c0a:	d1 40       	sbci	r29, 0x01	; 1
    1c0c:	28 17       	cp	r18, r24
    1c0e:	39 07       	cpc	r19, r25
    1c10:	19 f4       	brne	.+6      	; 0x1c18 <_ZN16AndroidAccessory4readEv+0x28>
    refillDataBuffer();
    1c12:	ce 01       	movw	r24, r28
    1c14:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    1c18:	de 01       	movw	r26, r28
    1c1a:	a9 56       	subi	r26, 0x69	; 105
    1c1c:	be 4f       	sbci	r27, 0xFE	; 254
    1c1e:	2d 91       	ld	r18, X+
    1c20:	3c 91       	ld	r19, X
    1c22:	11 97       	sbiw	r26, 0x01	; 1

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
    1c24:	cb 56       	subi	r28, 0x6B	; 107
    1c26:	de 4f       	sbci	r29, 0xFE	; 254
    1c28:	88 81       	ld	r24, Y
    1c2a:	99 81       	ldd	r25, Y+1	; 0x01
    1c2c:	c5 59       	subi	r28, 0x95	; 149
    1c2e:	d1 40       	sbci	r29, 0x01	; 1
    1c30:	82 17       	cp	r24, r18
    1c32:	93 07       	cpc	r25, r19
    1c34:	19 f4       	brne	.+6      	; 0x1c3c <_ZN16AndroidAccessory4readEv+0x4c>
    1c36:	ef ef       	ldi	r30, 0xFF	; 255
    1c38:	ff ef       	ldi	r31, 0xFF	; 255
    1c3a:	0b c0       	rjmp	.+22     	; 0x1c52 <_ZN16AndroidAccessory4readEv+0x62>
    1c3c:	c2 0f       	add	r28, r18
    1c3e:	d3 1f       	adc	r29, r19
    1c40:	cb 5a       	subi	r28, 0xAB	; 171
    1c42:	de 4f       	sbci	r29, 0xFE	; 254
    1c44:	88 81       	ld	r24, Y
    1c46:	e8 2f       	mov	r30, r24
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	2f 5f       	subi	r18, 0xFF	; 255
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	2d 93       	st	X+, r18
    1c50:	3c 93       	st	X, r19
}
    1c52:	cf 01       	movw	r24, r30
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <_ZN16AndroidAccessory11getProtocolEh>:
{
    max.powerOn();
    delay(200);
}

int AndroidAccessory::getProtocol(byte addr)
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	ef 92       	push	r14
    1c66:	0f 93       	push	r16
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	0f 92       	push	r0
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
{
    uint16_t protocol = -1;
    1c74:	2f ef       	ldi	r18, 0xFF	; 255
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	3a 83       	std	Y+2, r19	; 0x02
    1c7a:	29 83       	std	Y+1, r18	; 0x01
    usb.ctrlReq(addr, 0,
                USB_SETUP_DEVICE_TO_HOST |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <_ZN16AndroidAccessory11getProtocolEh+0x24>
    1c7e:	0f 92       	push	r0
    1c80:	9e 01       	movw	r18, r28
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	ed b7       	in	r30, 0x3d	; 61
    1c88:	fe b7       	in	r31, 0x3e	; 62
    1c8a:	32 83       	std	Z+2, r19	; 0x02
    1c8c:	21 83       	std	Z+1, r18	; 0x01
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3d e7       	ldi	r19, 0x7D	; 125
    1c92:	34 83       	std	Z+4, r19	; 0x04
    1c94:	23 83       	std	Z+3, r18	; 0x03
    1c96:	49 96       	adiw	r24, 0x19	; 25
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	20 ec       	ldi	r18, 0xC0	; 192
    1c9c:	03 e3       	ldi	r16, 0x33	; 51
    1c9e:	ee 24       	eor	r14, r14
    1ca0:	cc 24       	eor	r12, r12
    1ca2:	aa 24       	eor	r10, r10
    1ca4:	bb 24       	eor	r11, r11
    1ca6:	72 e0       	ldi	r23, 0x02	; 2
    1ca8:	87 2e       	mov	r8, r23
    1caa:	91 2c       	mov	r9, r1
    1cac:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    return protocol;
}
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	0f 91       	pop	r16
    1cc6:	ef 90       	pop	r14
    1cc8:	cf 90       	pop	r12
    1cca:	bf 90       	pop	r11
    1ccc:	af 90       	pop	r10
    1cce:	9f 90       	pop	r9
    1cd0:	8f 90       	pop	r8
    1cd2:	08 95       	ret

00001cd4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>:

    return true;
}

// Finds the first bulk IN and bulk OUT endpoints
bool AndroidAccessory::findEndpoints(byte addr, EP_RECORD *inEp, EP_RECORD *outEp)
    1cd4:	2f 92       	push	r2
    1cd6:	3f 92       	push	r3
    1cd8:	4f 92       	push	r4
    1cda:	5f 92       	push	r5
    1cdc:	6f 92       	push	r6
    1cde:	7f 92       	push	r7
    1ce0:	8f 92       	push	r8
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	ef 92       	push	r14
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x22>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x24>
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	16 2f       	mov	r17, r22
    1d02:	1a 01       	movw	r2, r20
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
{
    int len;
    byte err;
    uint8_t *p;

    err = usb.getConfDescr(addr, 0, 4, 0, (char *)descBuff);
    1d08:	49 96       	adiw	r24, 0x19	; 25
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	65 e5       	ldi	r22, 0x55	; 85
    1d10:	46 2e       	mov	r4, r22
    1d12:	51 2c       	mov	r5, r1
    1d14:	4d 81       	ldd	r20, Y+5	; 0x05
    1d16:	5e 81       	ldd	r21, Y+6	; 0x06
    1d18:	44 0e       	add	r4, r20
    1d1a:	55 1e       	adc	r5, r21
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
}
//get configuration descriptor  
inline byte USB::getConfDescr( byte addr, byte ep, unsigned int nbytes, byte conf, char* dataptr, unsigned int nak_limit ) {
        return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, dataptr, nak_limit ));
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x4a>
    1d1e:	0f 92       	push	r0
    1d20:	ad b7       	in	r26, 0x3d	; 61
    1d22:	be b7       	in	r27, 0x3e	; 62
    1d24:	12 96       	adiw	r26, 0x02	; 2
    1d26:	5c 92       	st	X, r5
    1d28:	4e 92       	st	-X, r4
    1d2a:	11 97       	sbiw	r26, 0x01	; 1
    1d2c:	e0 e0       	ldi	r30, 0x00	; 0
    1d2e:	fd e7       	ldi	r31, 0x7D	; 125
    1d30:	14 96       	adiw	r26, 0x04	; 4
    1d32:	fc 93       	st	X, r31
    1d34:	ee 93       	st	-X, r30
    1d36:	13 97       	sbiw	r26, 0x03	; 3
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	61 2f       	mov	r22, r17
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	20 e8       	ldi	r18, 0x80	; 128
    1d42:	06 e0       	ldi	r16, 0x06	; 6
    1d44:	ee 24       	eor	r14, r14
    1d46:	52 e0       	ldi	r21, 0x02	; 2
    1d48:	c5 2e       	mov	r12, r21
    1d4a:	aa 24       	eor	r10, r10
    1d4c:	bb 24       	eor	r11, r11
    1d4e:	34 e0       	ldi	r19, 0x04	; 4
    1d50:	83 2e       	mov	r8, r19
    1d52:	91 2c       	mov	r9, r1
    1d54:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    if (err) {
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	88 23       	and	r24, r24
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x9a>
        Serial.print(F("Can't get config descriptor length\n"));
    1d64:	8c ee       	ldi	r24, 0xEC	; 236
    1d66:	97 e0       	ldi	r25, 0x07	; 7
    1d68:	68 e5       	ldi	r22, 0x58	; 88
    1d6a:	72 e0       	ldi	r23, 0x02	; 2
    1d6c:	3c c0       	rjmp	.+120    	; 0x1de6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x112>
        return false;
    }


    len = descBuff[2] | ((int)descBuff[3] << 8);
    if (len > sizeof(descBuff)) {
    1d6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1d70:	5e 81       	ldd	r21, Y+6	; 0x06
    1d72:	48 5a       	subi	r20, 0xA8	; 168
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255
    1d76:	da 01       	movw	r26, r20
    1d78:	9c 91       	ld	r25, X
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	2e 91       	ld	r18, -X
    1d7e:	a7 55       	subi	r26, 0x57	; 87
    1d80:	b0 40       	sbci	r27, 0x00	; 0
    1d82:	be 83       	std	Y+6, r27	; 0x06
    1d84:	ad 83       	std	Y+5, r26	; 0x05
    1d86:	62 2e       	mov	r6, r18
    1d88:	77 24       	eor	r7, r7
    1d8a:	68 2a       	or	r6, r24
    1d8c:	79 2a       	or	r7, r25
    1d8e:	b1 e0       	ldi	r27, 0x01	; 1
    1d90:	6b 16       	cp	r6, r27
    1d92:	b1 e0       	ldi	r27, 0x01	; 1
    1d94:	7b 06       	cpc	r7, r27
    1d96:	28 f0       	brcs	.+10     	; 0x1da2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xce>
        Serial.print(F("config descriptor too large\n"));
    1d98:	8c ee       	ldi	r24, 0xEC	; 236
    1d9a:	97 e0       	ldi	r25, 0x07	; 7
    1d9c:	6b e3       	ldi	r22, 0x3B	; 59
    1d9e:	72 e0       	ldi	r23, 0x02	; 2
    1da0:	22 c0       	rjmp	.+68     	; 0x1de6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x112>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xd0>
    1da4:	0f 92       	push	r0
    1da6:	ed b7       	in	r30, 0x3d	; 61
    1da8:	fe b7       	in	r31, 0x3e	; 62
    1daa:	52 82       	std	Z+2, r5	; 0x02
    1dac:	41 82       	std	Z+1, r4	; 0x01
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	5d e7       	ldi	r21, 0x7D	; 125
    1db2:	54 83       	std	Z+4, r21	; 0x04
    1db4:	43 83       	std	Z+3, r20	; 0x03
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	61 2f       	mov	r22, r17
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	20 e8       	ldi	r18, 0x80	; 128
    1dc0:	06 e0       	ldi	r16, 0x06	; 6
    1dc2:	ee 24       	eor	r14, r14
    1dc4:	b2 e0       	ldi	r27, 0x02	; 2
    1dc6:	cb 2e       	mov	r12, r27
    1dc8:	aa 24       	eor	r10, r10
    1dca:	bb 24       	eor	r11, r11
    1dcc:	43 01       	movw	r8, r6
    1dce:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>
            /* might want to truncate here */
        return false;
    }

    err = usb.getConfDescr(addr, 0, len, 0, (char *)descBuff);
    if (err) {
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	88 23       	and	r24, r24
    1ddc:	41 f0       	breq	.+16     	; 0x1dee <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x11a>
        Serial.print(F("Can't get config descriptor\n"));
    1dde:	8c ee       	ldi	r24, 0xEC	; 236
    1de0:	97 e0       	ldi	r25, 0x07	; 7
    1de2:	6e e1       	ldi	r22, 0x1E	; 30
    1de4:	72 e0       	ldi	r23, 0x02	; 2
    1de6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	78 c0       	rjmp	.+240    	; 0x1ede <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x20a>
        return false;
    }

    p = descBuff;
    1dee:	52 01       	movw	r10, r4
    inEp->epAddr = 0;
    1df0:	d1 01       	movw	r26, r2
    1df2:	1c 92       	st	X, r1
    outEp->epAddr = 0;
    1df4:	eb 81       	ldd	r30, Y+3	; 0x03
    1df6:	fc 81       	ldd	r31, Y+4	; 0x04
    1df8:	10 82       	st	Z, r1
    while (p < (descBuff + len)){
    1dfa:	a5 e5       	ldi	r26, 0x55	; 85
    1dfc:	8a 2e       	mov	r8, r26
    1dfe:	91 2c       	mov	r9, r1
    1e00:	86 0c       	add	r8, r6
    1e02:	97 1c       	adc	r9, r7
    1e04:	4d 81       	ldd	r20, Y+5	; 0x05
    1e06:	5e 81       	ldd	r21, Y+6	; 0x06
    1e08:	84 0e       	add	r8, r20
    1e0a:	95 1e       	adc	r9, r21

            if (ep) {
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
                ep->Attr = epDesc->bmAttributes;
                ep->MaxPktSize = epDesc->wMaxPacketSize;
                ep->sndToggle = bmSNDTOG0;
    1e0c:	f0 e4       	ldi	r31, 0x40	; 64
    1e0e:	cf 2e       	mov	r12, r31
                ep->rcvToggle = bmRCVTOG0;
    1e10:	e0 e1       	ldi	r30, 0x10	; 16
    1e12:	ee 2e       	mov	r14, r30
    1e14:	48 c0       	rjmp	.+144    	; 0x1ea6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1d2>

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
        uint8_t descLen = p[0];
    1e16:	d5 01       	movw	r26, r10
    1e18:	1c 91       	ld	r17, X
        uint8_t descType = p[1];
    1e1a:	11 96       	adiw	r26, 0x01	; 1
    1e1c:	0c 91       	ld	r16, X
        USB_ENDPOINT_DESCRIPTOR *epDesc;
        EP_RECORD *ep;

        switch (descType) {
    1e1e:	04 30       	cpi	r16, 0x04	; 4
    1e20:	49 f0       	breq	.+18     	; 0x1e34 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x160>
    1e22:	05 30       	cpi	r16, 0x05	; 5
    1e24:	71 f0       	breq	.+28     	; 0x1e42 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x16e>
    1e26:	02 30       	cpi	r16, 0x02	; 2
    1e28:	79 f5       	brne	.+94     	; 0x1e88 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1b4>
        case USB_DESCRIPTOR_CONFIGURATION:
            Serial.print(F("config desc\n"));
    1e2a:	8c ee       	ldi	r24, 0xEC	; 236
    1e2c:	97 e0       	ldi	r25, 0x07	; 7
    1e2e:	61 e1       	ldi	r22, 0x11	; 17
    1e30:	72 e0       	ldi	r23, 0x02	; 2
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x168>
            break;

        case USB_DESCRIPTOR_INTERFACE:
            Serial.print(F("interface desc\n"));
    1e34:	8c ee       	ldi	r24, 0xEC	; 236
    1e36:	97 e0       	ldi	r25, 0x07	; 7
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	72 e0       	ldi	r23, 0x02	; 2
    1e3c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
    1e40:	30 c0       	rjmp	.+96     	; 0x1ea2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
            break;

        case USB_DESCRIPTOR_ENDPOINT:
            epDesc = (USB_ENDPOINT_DESCRIPTOR *)p;
            if (!inEp->epAddr && (epDesc->bEndpointAddress & 0x80))
    1e42:	f1 01       	movw	r30, r2
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	29 f4       	brne	.+10     	; 0x1e54 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x180>
    1e4a:	d5 01       	movw	r26, r10
    1e4c:	12 96       	adiw	r26, 0x02	; 2
    1e4e:	8c 91       	ld	r24, X
    1e50:	88 23       	and	r24, r24
    1e52:	2c f0       	brlt	.+10     	; 0x1e5e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x18a>
                ep = inEp;
            else if (!outEp->epAddr)
    1e54:	eb 81       	ldd	r30, Y+3	; 0x03
    1e56:	fc 81       	ldd	r31, Y+4	; 0x04
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	11 f5       	brne	.+68     	; 0x1ea2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
                ep = outEp;
            else
                ep = NULL;

            if (ep) {
    1e5e:	30 97       	sbiw	r30, 0x00	; 0
    1e60:	01 f1       	breq	.+64     	; 0x1ea2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
    1e62:	d5 01       	movw	r26, r10
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	8c 91       	ld	r24, X
    1e68:	12 97       	sbiw	r26, 0x02	; 2
    1e6a:	8f 77       	andi	r24, 0x7F	; 127
    1e6c:	80 83       	st	Z, r24
                ep->Attr = epDesc->bmAttributes;
    1e6e:	13 96       	adiw	r26, 0x03	; 3
    1e70:	8c 91       	ld	r24, X
    1e72:	13 97       	sbiw	r26, 0x03	; 3
    1e74:	81 83       	std	Z+1, r24	; 0x01
                ep->MaxPktSize = epDesc->wMaxPacketSize;
    1e76:	14 96       	adiw	r26, 0x04	; 4
    1e78:	8d 91       	ld	r24, X+
    1e7a:	9c 91       	ld	r25, X
    1e7c:	15 97       	sbiw	r26, 0x05	; 5
    1e7e:	93 83       	std	Z+3, r25	; 0x03
    1e80:	82 83       	std	Z+2, r24	; 0x02
                ep->sndToggle = bmSNDTOG0;
    1e82:	c5 82       	std	Z+5, r12	; 0x05
                ep->rcvToggle = bmRCVTOG0;
    1e84:	e6 82       	std	Z+6, r14	; 0x06
    1e86:	0d c0       	rjmp	.+26     	; 0x1ea2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
            }
            break;

        default:
            Serial.print(F("unkown desc type "));
    1e88:	8c ee       	ldi	r24, 0xEC	; 236
    1e8a:	97 e0       	ldi	r25, 0x07	; 7
    1e8c:	6f ee       	ldi	r22, 0xEF	; 239
    1e8e:	71 e0       	ldi	r23, 0x01	; 1
    1e90:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
            Serial.println( descType, HEX);
    1e94:	8c ee       	ldi	r24, 0xEC	; 236
    1e96:	97 e0       	ldi	r25, 0x07	; 7
    1e98:	60 2f       	mov	r22, r16
    1e9a:	40 e1       	ldi	r20, 0x10	; 16
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN5Print7printlnEhi>
            break;
        }

        p += descLen;
    1ea2:	a1 0e       	add	r10, r17
    1ea4:	b1 1c       	adc	r11, r1
    }

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
    1ea6:	a8 14       	cp	r10, r8
    1ea8:	b9 04       	cpc	r11, r9
    1eaa:	08 f4       	brcc	.+2      	; 0x1eae <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1da>
    1eac:	b4 cf       	rjmp	.-152    	; 0x1e16 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x142>
        }

        p += descLen;
    }

    if (!(inEp->epAddr && outEp->epAddr))
    1eae:	f1 01       	movw	r30, r2
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 23       	and	r24, r24
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ec>
    1eb6:	ab 81       	ldd	r26, Y+3	; 0x03
    1eb8:	bc 81       	ldd	r27, Y+4	; 0x04
    1eba:	8c 91       	ld	r24, X
    1ebc:	88 23       	and	r24, r24
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1f8>
        Serial.println(F("can't find accessory endpoints"));
    1ec0:	8c ee       	ldi	r24, 0xEC	; 236
    1ec2:	97 e0       	ldi	r25, 0x07	; 7
    1ec4:	60 ed       	ldi	r22, 0xD0	; 208
    1ec6:	71 e0       	ldi	r23, 0x01	; 1
    1ec8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_ZN5Print7printlnEPK19__FlashStringHelper>

    return inEp->epAddr && outEp->epAddr;
    1ecc:	f1 01       	movw	r30, r2
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 23       	and	r24, r24
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x20a>
    1ed4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed8:	8c 91       	ld	r24, X
    1eda:	81 11       	cpse	r24, r1
    1edc:	81 e0       	ldi	r24, 0x01	; 1
}
    1ede:	26 96       	adiw	r28, 0x06	; 6
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ef 90       	pop	r14
    1ef4:	cf 90       	pop	r12
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	9f 90       	pop	r9
    1efc:	8f 90       	pop	r8
    1efe:	7f 90       	pop	r7
    1f00:	6f 90       	pop	r6
    1f02:	5f 90       	pop	r5
    1f04:	4f 90       	pop	r4
    1f06:	3f 90       	pop	r3
    1f08:	2f 90       	pop	r2
    1f0a:	08 95       	ret

00001f0c <_ZN16AndroidAccessory16configureAndroidEv>:

bool AndroidAccessory::configureAndroid(void)
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	ef 92       	push	r14
    1f1c:	0f 93       	push	r16
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	2e 97       	sbiw	r28, 0x0e	; 14
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	5c 01       	movw	r10, r24
{
    byte err;
    EP_RECORD inEp, outEp;

    if (!findEndpoints(1, &inEp, &outEp))
    1f34:	61 e0       	ldi	r22, 0x01	; 1
    1f36:	4e 01       	movw	r8, r28
    1f38:	08 94       	sec
    1f3a:	81 1c       	adc	r8, r1
    1f3c:	91 1c       	adc	r9, r1
    1f3e:	a4 01       	movw	r20, r8
    1f40:	9e 01       	movw	r18, r28
    1f42:	28 5f       	subi	r18, 0xF8	; 248
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <_ZN16AndroidAccessory16configureAndroidEv+0x44>
    1f4e:	8d c0       	rjmp	.+282    	; 0x206a <_ZN16AndroidAccessory16configureAndroidEv+0x15e>
        return false;

    memset(&epRecord, 0x0, sizeof(epRecord));
    1f50:	c5 01       	movw	r24, r10
    1f52:	4d 96       	adiw	r24, 0x1d	; 29
    1f54:	fc 01       	movw	r30, r24
    1f56:	88 e3       	ldi	r24, 0x38	; 56
    1f58:	df 01       	movw	r26, r30
    1f5a:	1d 92       	st	X+, r1
    1f5c:	8a 95       	dec	r24
    1f5e:	e9 f7       	brne	.-6      	; 0x1f5a <_ZN16AndroidAccessory16configureAndroidEv+0x4e>

    epRecord[inEp.epAddr] = inEp;
    1f60:	69 81       	ldd	r22, Y+1	; 0x01
    1f62:	86 2f       	mov	r24, r22
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	fc 01       	movw	r30, r24
    1f68:	b3 e0       	ldi	r27, 0x03	; 3
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	ba 95       	dec	r27
    1f70:	e1 f7       	brne	.-8      	; 0x1f6a <_ZN16AndroidAccessory16configureAndroidEv+0x5e>
    1f72:	e8 1b       	sub	r30, r24
    1f74:	f9 0b       	sbc	r31, r25
    1f76:	ea 0d       	add	r30, r10
    1f78:	fb 1d       	adc	r31, r11
    1f7a:	7d 96       	adiw	r30, 0x1d	; 29
    1f7c:	d4 01       	movw	r26, r8
    1f7e:	87 e0       	ldi	r24, 0x07	; 7
    1f80:	0d 90       	ld	r0, X+
    1f82:	01 92       	st	Z+, r0
    1f84:	81 50       	subi	r24, 0x01	; 1
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <_ZN16AndroidAccessory16configureAndroidEv+0x74>
    if (outEp.epAddr != inEp.epAddr)
    1f88:	28 85       	ldd	r18, Y+8	; 0x08
    1f8a:	26 17       	cp	r18, r22
    1f8c:	a1 f0       	breq	.+40     	; 0x1fb6 <_ZN16AndroidAccessory16configureAndroidEv+0xaa>
        epRecord[outEp.epAddr] = outEp;
    1f8e:	82 2f       	mov	r24, r18
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	fc 01       	movw	r30, r24
    1f94:	a3 e0       	ldi	r26, 0x03	; 3
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	aa 95       	dec	r26
    1f9c:	e1 f7       	brne	.-8      	; 0x1f96 <_ZN16AndroidAccessory16configureAndroidEv+0x8a>
    1f9e:	e8 1b       	sub	r30, r24
    1fa0:	f9 0b       	sbc	r31, r25
    1fa2:	ea 0d       	add	r30, r10
    1fa4:	fb 1d       	adc	r31, r11
    1fa6:	7d 96       	adiw	r30, 0x1d	; 29
    1fa8:	de 01       	movw	r26, r28
    1faa:	18 96       	adiw	r26, 0x08	; 8
    1fac:	87 e0       	ldi	r24, 0x07	; 7
    1fae:	0d 90       	ld	r0, X+
    1fb0:	01 92       	st	Z+, r0
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <_ZN16AndroidAccessory16configureAndroidEv+0xa2>

    in = inEp.epAddr;
    1fb6:	f5 01       	movw	r30, r10
    1fb8:	63 8f       	std	Z+27, r22	; 0x1b
    out = outEp.epAddr;
    1fba:	24 8f       	std	Z+28, r18	; 0x1c

    Serial.println(inEp.epAddr, HEX);
    1fbc:	8c ee       	ldi	r24, 0xEC	; 236
    1fbe:	97 e0       	ldi	r25, 0x07	; 7
    1fc0:	40 e1       	ldi	r20, 0x10	; 16
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN5Print7printlnEhi>
    Serial.println(outEp.epAddr, HEX);
    1fc8:	8c ee       	ldi	r24, 0xEC	; 236
    1fca:	97 e0       	ldi	r25, 0x07	; 7
    1fcc:	68 85       	ldd	r22, Y+8	; 0x08
    1fce:	40 e1       	ldi	r20, 0x10	; 16
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN5Print7printlnEhi>

    epRecord[0] = *(usb.getDevTableEntry(0,0));
    1fd6:	79 e1       	ldi	r23, 0x19	; 25
    1fd8:	67 2e       	mov	r6, r23
    1fda:	71 2c       	mov	r7, r1
    1fdc:	6a 0c       	add	r6, r10
    1fde:	7b 1c       	adc	r7, r11
    1fe0:	c3 01       	movw	r24, r6
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN3USB16getDevTableEntryEhh>
    1fea:	d5 01       	movw	r26, r10
    1fec:	5d 96       	adiw	r26, 0x1d	; 29
    1fee:	fc 01       	movw	r30, r24
    1ff0:	87 e0       	ldi	r24, 0x07	; 7
    1ff2:	01 90       	ld	r0, Z+
    1ff4:	0d 92       	st	X+, r0
    1ff6:	81 50       	subi	r24, 0x01	; 1
    1ff8:	e1 f7       	brne	.-8      	; 0x1ff2 <_ZN16AndroidAccessory16configureAndroidEv+0xe6>
    usb.setDevTableEntry(1, epRecord);
    1ffa:	8d e1       	ldi	r24, 0x1D	; 29
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a8 0e       	add	r10, r24
    2000:	b9 1e       	adc	r11, r25
    2002:	c3 01       	movw	r24, r6
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	a5 01       	movw	r20, r10
    2008:	0e 94 4a 05 	call	0xa94	; 0xa94 <_ZN3USB16setDevTableEntryEhP9EP_RECORD>
inline byte USB::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
}
//set configuration
inline byte USB::setConf( byte addr, byte ep, byte conf_value, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, NULL, nak_limit ));         
    200c:	00 d0       	rcall	.+0      	; 0x200e <_ZN16AndroidAccessory16configureAndroidEv+0x102>
    200e:	0f 92       	push	r0
    2010:	ad b7       	in	r26, 0x3d	; 61
    2012:	be b7       	in	r27, 0x3e	; 62
    2014:	12 96       	adiw	r26, 0x02	; 2
    2016:	1c 92       	st	X, r1
    2018:	1e 92       	st	-X, r1
    201a:	11 97       	sbiw	r26, 0x01	; 1
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	9d e7       	ldi	r25, 0x7D	; 125
    2020:	14 96       	adiw	r26, 0x04	; 4
    2022:	9c 93       	st	X, r25
    2024:	8e 93       	st	-X, r24
    2026:	13 97       	sbiw	r26, 0x03	; 3
    2028:	c3 01       	movw	r24, r6
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	09 e0       	ldi	r16, 0x09	; 9
    2032:	ee 24       	eor	r14, r14
    2034:	e3 94       	inc	r14
    2036:	cc 24       	eor	r12, r12
    2038:	aa 24       	eor	r10, r10
    203a:	bb 24       	eor	r11, r11
    203c:	88 24       	eor	r8, r8
    203e:	99 24       	eor	r9, r9
    2040:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>

    err = usb.setConf( 1, 0, 1 );
    if (err) {
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	88 23       	and	r24, r24
    204e:	41 f0       	breq	.+16     	; 0x2060 <_ZN16AndroidAccessory16configureAndroidEv+0x154>
        Serial.print(F("Can't set config to 1\n"));
    2050:	8c ee       	ldi	r24, 0xEC	; 236
    2052:	97 e0       	ldi	r25, 0x07	; 7
    2054:	69 eb       	ldi	r22, 0xB9	; 185
    2056:	71 e0       	ldi	r23, 0x01	; 1
    2058:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	05 c0       	rjmp	.+10     	; 0x206a <_ZN16AndroidAccessory16configureAndroidEv+0x15e>
        return false;
    }

    usb.setUsbTaskState( USB_STATE_RUNNING );
    2060:	c3 01       	movw	r24, r6
    2062:	60 e9       	ldi	r22, 0x90	; 144
    2064:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN3USB15setUsbTaskStateEh>
    2068:	81 e0       	ldi	r24, 0x01	; 1

    return true;
}
    206a:	2e 96       	adiw	r28, 0x0e	; 14
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	0f 91       	pop	r16
    207c:	ef 90       	pop	r14
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	9f 90       	pop	r9
    2086:	8f 90       	pop	r8
    2088:	7f 90       	pop	r7
    208a:	6f 90       	pop	r6
    208c:	08 95       	ret

0000208e <_ZN16AndroidAccessory10sendStringEhiPKc>:
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    return protocol;
}

void AndroidAccessory::sendString(byte addr, int index, const char *str)
    208e:	8f 92       	push	r8
    2090:	9f 92       	push	r9
    2092:	af 92       	push	r10
    2094:	bf 92       	push	r11
    2096:	cf 92       	push	r12
    2098:	ef 92       	push	r14
    209a:	0f 93       	push	r16
    209c:	5a 01       	movw	r10, r20
    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_SEND_STRING, 0, 0, index,
                strlen(str) + 1, (char *)str);
    209e:	d9 01       	movw	r26, r18
    20a0:	0d 90       	ld	r0, X+
    20a2:	00 20       	and	r0, r0
    20a4:	e9 f7       	brne	.-6      	; 0x20a0 <_ZN16AndroidAccessory10sendStringEhiPKc+0x12>
    20a6:	4d 01       	movw	r8, r26
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <_ZN16AndroidAccessory10sendStringEhiPKc+0x1c>
    20aa:	0f 92       	push	r0
    20ac:	ad b7       	in	r26, 0x3d	; 61
    20ae:	be b7       	in	r27, 0x3e	; 62
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	82 1a       	sub	r8, r18
    20b4:	93 0a       	sbc	r9, r19
    20b6:	ed b7       	in	r30, 0x3d	; 61
    20b8:	fe b7       	in	r31, 0x3e	; 62
    20ba:	21 83       	std	Z+1, r18	; 0x01
    20bc:	11 96       	adiw	r26, 0x01	; 1
    20be:	3c 93       	st	X, r19
    20c0:	11 97       	sbiw	r26, 0x01	; 1
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3d e7       	ldi	r19, 0x7D	; 125
    20c6:	13 96       	adiw	r26, 0x03	; 3
    20c8:	3c 93       	st	X, r19
    20ca:	2e 93       	st	-X, r18
    20cc:	12 97       	sbiw	r26, 0x02	; 2
    20ce:	49 96       	adiw	r24, 0x19	; 25
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	20 e4       	ldi	r18, 0x40	; 64
    20d4:	04 e3       	ldi	r16, 0x34	; 52
    20d6:	ee 24       	eor	r14, r14
    20d8:	cc 24       	eor	r12, r12
    20da:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
}
    20e6:	0f 91       	pop	r16
    20e8:	ef 90       	pop	r14
    20ea:	cf 90       	pop	r12
    20ec:	bf 90       	pop	r11
    20ee:	af 90       	pop	r10
    20f0:	9f 90       	pop	r9
    20f2:	8f 90       	pop	r8
    20f4:	08 95       	ret

000020f6 <_ZN16AndroidAccessory12switchDeviceEh>:


bool AndroidAccessory::switchDevice(byte addr)
    20f6:	6f 92       	push	r6
    20f8:	7f 92       	push	r7
    20fa:	8f 92       	push	r8
    20fc:	9f 92       	push	r9
    20fe:	af 92       	push	r10
    2100:	bf 92       	push	r11
    2102:	cf 92       	push	r12
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	3c 01       	movw	r6, r24
    2112:	f6 2e       	mov	r15, r22
{
    int protocol = getProtocol(addr);
    2114:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZN16AndroidAccessory11getProtocolEh>
    2118:	8c 01       	movw	r16, r24

	Serial.print(F("device supports protcol "));
    211a:	8c ee       	ldi	r24, 0xEC	; 236
    211c:	97 e0       	ldi	r25, 0x07	; 7
    211e:	6e e7       	ldi	r22, 0x7E	; 126
    2120:	72 e0       	ldi	r23, 0x02	; 2
    2122:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(protocol);
    2126:	8c ee       	ldi	r24, 0xEC	; 236
    2128:	97 e0       	ldi	r25, 0x07	; 7
    212a:	b8 01       	movw	r22, r16
    212c:	4a e0       	ldi	r20, 0x0A	; 10
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN5Print5printEii>
	Serial.print(F("\n"));
    2134:	8c ee       	ldi	r24, 0xEC	; 236
    2136:	97 e0       	ldi	r25, 0x07	; 7
    2138:	6c e7       	ldi	r22, 0x7C	; 124
    213a:	72 e0       	ldi	r23, 0x02	; 2
    213c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>

    sendString(addr, ACCESSORY_STRING_MANUFACTURER, manufacturer);
    2140:	f3 01       	movw	r30, r6
    2142:	24 85       	ldd	r18, Z+12	; 0x0c
    2144:	35 85       	ldd	r19, Z+13	; 0x0d
    2146:	c3 01       	movw	r24, r6
    2148:	6f 2d       	mov	r22, r15
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_MODEL, model);
    2152:	f3 01       	movw	r30, r6
    2154:	26 85       	ldd	r18, Z+14	; 0x0e
    2156:	37 85       	ldd	r19, Z+15	; 0x0f
    2158:	c3 01       	movw	r24, r6
    215a:	6f 2d       	mov	r22, r15
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_DESCRIPTION, description);
    2164:	f3 01       	movw	r30, r6
    2166:	20 89       	ldd	r18, Z+16	; 0x10
    2168:	31 89       	ldd	r19, Z+17	; 0x11
    216a:	c3 01       	movw	r24, r6
    216c:	6f 2d       	mov	r22, r15
    216e:	42 e0       	ldi	r20, 0x02	; 2
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_VERSION, version);
    2176:	f3 01       	movw	r30, r6
    2178:	22 89       	ldd	r18, Z+18	; 0x12
    217a:	33 89       	ldd	r19, Z+19	; 0x13
    217c:	c3 01       	movw	r24, r6
    217e:	6f 2d       	mov	r22, r15
    2180:	43 e0       	ldi	r20, 0x03	; 3
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_URI, uri);
    2188:	f3 01       	movw	r30, r6
    218a:	24 89       	ldd	r18, Z+20	; 0x14
    218c:	35 89       	ldd	r19, Z+21	; 0x15
    218e:	c3 01       	movw	r24, r6
    2190:	6f 2d       	mov	r22, r15
    2192:	44 e0       	ldi	r20, 0x04	; 4
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_SERIAL, serial);
    219a:	f3 01       	movw	r30, r6
    219c:	26 89       	ldd	r18, Z+22	; 0x16
    219e:	37 89       	ldd	r19, Z+23	; 0x17
    21a0:	c3 01       	movw	r24, r6
    21a2:	6f 2d       	mov	r22, r15
    21a4:	45 e0       	ldi	r20, 0x05	; 5
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN16AndroidAccessory10sendStringEhiPKc>

    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);
    21ac:	e3 01       	movw	r28, r6
    21ae:	69 96       	adiw	r28, 0x19	; 25
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <_ZN16AndroidAccessory12switchDeviceEh+0xbc>
    21b2:	0f 92       	push	r0
    21b4:	ed b7       	in	r30, 0x3d	; 61
    21b6:	fe b7       	in	r31, 0x3e	; 62
    21b8:	12 82       	std	Z+2, r1	; 0x02
    21ba:	11 82       	std	Z+1, r1	; 0x01
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	9d e7       	ldi	r25, 0x7D	; 125
    21c0:	94 83       	std	Z+4, r25	; 0x04
    21c2:	83 83       	std	Z+3, r24	; 0x03
    21c4:	ce 01       	movw	r24, r28
    21c6:	6f 2d       	mov	r22, r15
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	20 e4       	ldi	r18, 0x40	; 64
    21cc:	05 e3       	ldi	r16, 0x35	; 53
    21ce:	ee 24       	eor	r14, r14
    21d0:	cc 24       	eor	r12, r12
    21d2:	aa 24       	eor	r10, r10
    21d4:	bb 24       	eor	r11, r11
    21d6:	88 24       	eor	r8, r8
    21d8:	99 24       	eor	r9, r9
    21da:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        max.Task();
    21de:	83 01       	movw	r16, r6
    21e0:	08 5e       	subi	r16, 0xE8	; 232
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <_ZN16AndroidAccessory12switchDeviceEh+0x104>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    21ee:	c8 01       	movw	r24, r16
    21f0:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN8MAX3421E4TaskEv>
        max.Task();
        usb.Task();
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN3USB4TaskEv>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN3USB15getUsbTaskStateEv>
    2200:	82 31       	cpi	r24, 0x12	; 18
    2202:	a9 f7       	brne	.-22     	; 0x21ee <_ZN16AndroidAccessory12switchDeviceEh+0xf8>
        max.Task();
        usb.Task();
    }

    return true;
}
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	cf 90       	pop	r12
    2214:	bf 90       	pop	r11
    2216:	af 90       	pop	r10
    2218:	9f 90       	pop	r9
    221a:	8f 90       	pop	r8
    221c:	7f 90       	pop	r7
    221e:	6f 90       	pop	r6
    2220:	08 95       	ret

00002222 <_ZN16AndroidAccessory11isConnectedEv>:
    usb.setUsbTaskState( USB_STATE_RUNNING );

    return true;
}

bool AndroidAccessory::isConnected(void)
    2222:	4f 92       	push	r4
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	cf 92       	push	r12
    2234:	ef 92       	push	r14
    2236:	0f 93       	push	r16
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	3c 01       	movw	r6, r24
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    byte err;

    max.Task();
    223e:	48 96       	adiw	r24, 0x18	; 24
    2240:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN8MAX3421E4TaskEv>
    usb.Task();
    2244:	e3 01       	movw	r28, r6
    2246:	69 96       	adiw	r28, 0x19	; 25
    2248:	ce 01       	movw	r24, r28
    224a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN3USB4TaskEv>

    if (!connected &&
    224e:	f3 01       	movw	r30, r6
    2250:	82 8d       	ldd	r24, Z+26	; 0x1a
    2252:	88 23       	and	r24, r24
    2254:	09 f0       	breq	.+2      	; 0x2258 <_ZN16AndroidAccessory11isConnectedEv+0x36>
    2256:	78 c0       	rjmp	.+240    	; 0x2348 <_ZN16AndroidAccessory11isConnectedEv+0x126>
    2258:	ce 01       	movw	r24, r28
    225a:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN3USB15getUsbTaskStateEv>
    225e:	87 ff       	sbrs	r24, 7
    2260:	73 c0       	rjmp	.+230    	; 0x2348 <_ZN16AndroidAccessory11isConnectedEv+0x126>
    2262:	ce 01       	movw	r24, r28
    2264:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN3USB15getUsbTaskStateEv>
    2268:	80 39       	cpi	r24, 0x90	; 144
    226a:	09 f4       	brne	.+2      	; 0x226e <_ZN16AndroidAccessory11isConnectedEv+0x4c>
    226c:	6d c0       	rjmp	.+218    	; 0x2348 <_ZN16AndroidAccessory11isConnectedEv+0x126>
    return true;
}

bool AndroidAccessory::isConnected(void)
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    226e:	45 e5       	ldi	r20, 0x55	; 85
    2270:	44 2e       	mov	r4, r20
    2272:	51 2c       	mov	r5, r1
    2274:	46 0c       	add	r4, r6
    2276:	57 1c       	adc	r5, r7
    usb.Task();

    if (!connected &&
        usb.getUsbTaskState() >= USB_STATE_CONFIGURING &&
        usb.getUsbTaskState() != USB_STATE_RUNNING) {
        Serial.print(F("\nDevice addressed... "));
    2278:	8c ee       	ldi	r24, 0xEC	; 236
    227a:	97 e0       	ldi	r25, 0x07	; 7
    227c:	63 ea       	ldi	r22, 0xA3	; 163
    227e:	71 e0       	ldi	r23, 0x01	; 1
    2280:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F("Requesting device descriptor.\n"));
    2284:	8c ee       	ldi	r24, 0xEC	; 236
    2286:	97 e0       	ldi	r25, 0x07	; 7
    2288:	64 e8       	ldi	r22, 0x84	; 132
    228a:	71 e0       	ldi	r23, 0x01	; 1
    228c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
        void init();
};

//get device descriptor
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
    2290:	00 d0       	rcall	.+0      	; 0x2292 <_ZN16AndroidAccessory11isConnectedEv+0x70>
    2292:	0f 92       	push	r0
    2294:	ed b7       	in	r30, 0x3d	; 61
    2296:	fe b7       	in	r31, 0x3e	; 62
    2298:	52 82       	std	Z+2, r5	; 0x02
    229a:	41 82       	std	Z+1, r4	; 0x01
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	9d e7       	ldi	r25, 0x7D	; 125
    22a0:	94 83       	std	Z+4, r25	; 0x04
    22a2:	83 83       	std	Z+3, r24	; 0x03
    22a4:	ce 01       	movw	r24, r28
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	20 e8       	ldi	r18, 0x80	; 128
    22ac:	06 e0       	ldi	r16, 0x06	; 6
    22ae:	ee 24       	eor	r14, r14
    22b0:	cc 24       	eor	r12, r12
    22b2:	c3 94       	inc	r12
    22b4:	aa 24       	eor	r10, r10
    22b6:	bb 24       	eor	r11, r11
    22b8:	32 e1       	ldi	r19, 0x12	; 18
    22ba:	83 2e       	mov	r8, r19
    22bc:	91 2c       	mov	r9, r1
    22be:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN3USB7ctrlReqEhhhhhhjjPcj>

        err = usb.getDevDescr(1, 0, 0x12, (char *) devDesc);
        if (err) {
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	88 23       	and	r24, r24
    22cc:	41 f0       	breq	.+16     	; 0x22de <_ZN16AndroidAccessory11isConnectedEv+0xbc>
            Serial.print(F("\nDevice descriptor cannot be retrieved. Trying again\n"));
    22ce:	8c ee       	ldi	r24, 0xEC	; 236
    22d0:	97 e0       	ldi	r25, 0x07	; 7
    22d2:	6e e4       	ldi	r22, 0x4E	; 78
    22d4:	71 e0       	ldi	r23, 0x01	; 1
    22d6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	27 c0       	rjmp	.+78     	; 0x232c <_ZN16AndroidAccessory11isConnectedEv+0x10a>
    unsigned int nextByteInDataBuffOffset;

    bool isAccessoryDevice(USB_DEVICE_DESCRIPTOR *desc)
    {
        return desc->idVendor == 0x18d1 &&
            (desc->idProduct == 0x2D00 || desc->idProduct == 0x2D01);
    22de:	f2 01       	movw	r30, r4
    22e0:	80 85       	ldd	r24, Z+8	; 0x08
    22e2:	91 85       	ldd	r25, Z+9	; 0x09
    22e4:	81 5d       	subi	r24, 0xD1	; 209
    22e6:	98 41       	sbci	r25, 0x18	; 24
    22e8:	a9 f5       	brne	.+106    	; 0x2354 <_ZN16AndroidAccessory11isConnectedEv+0x132>
    22ea:	f2 01       	movw	r30, r4
    22ec:	82 85       	ldd	r24, Z+10	; 0x0a
    22ee:	93 85       	ldd	r25, Z+11	; 0x0b
    22f0:	80 50       	subi	r24, 0x00	; 0
    22f2:	9d 42       	sbci	r25, 0x2D	; 45
    22f4:	02 97       	sbiw	r24, 0x02	; 2
    22f6:	70 f5       	brcc	.+92     	; 0x2354 <_ZN16AndroidAccessory11isConnectedEv+0x132>
            return false;
        }

        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));
    22f8:	8c ee       	ldi	r24, 0xEC	; 236
    22fa:	97 e0       	ldi	r25, 0x07	; 7
    22fc:	6f e2       	ldi	r22, 0x2F	; 47
    22fe:	71 e0       	ldi	r23, 0x01	; 1
    2300:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>

            connected = configureAndroid();
    2304:	c3 01       	movw	r24, r6
    2306:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN16AndroidAccessory16configureAndroidEv>
    230a:	f3 01       	movw	r30, r6
    230c:	82 8f       	std	Z+26, r24	; 0x1a
    230e:	0c c0       	rjmp	.+24     	; 0x2328 <_ZN16AndroidAccessory11isConnectedEv+0x106>
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        if (connected)
    2310:	f3 01       	movw	r30, r6
    2312:	82 8d       	ldd	r24, Z+26	; 0x1a
    2314:	88 23       	and	r24, r24
    2316:	31 f0       	breq	.+12     	; 0x2324 <_ZN16AndroidAccessory11isConnectedEv+0x102>
            Serial.println(F("disconnected usb device\n"));
    2318:	8c ee       	ldi	r24, 0xEC	; 236
    231a:	97 e0       	ldi	r25, 0x07	; 7
    231c:	64 ee       	ldi	r22, 0xE4	; 228
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        connected = false;
    2324:	f3 01       	movw	r30, r6
    2326:	12 8e       	std	Z+26, r1	; 0x1a
    }

    return connected;
    2328:	f3 01       	movw	r30, r6
    232a:	82 8d       	ldd	r24, Z+26	; 0x1a
}
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	0f 91       	pop	r16
    2332:	ef 90       	pop	r14
    2334:	cf 90       	pop	r12
    2336:	bf 90       	pop	r11
    2338:	af 90       	pop	r10
    233a:	9f 90       	pop	r9
    233c:	8f 90       	pop	r8
    233e:	7f 90       	pop	r7
    2340:	6f 90       	pop	r6
    2342:	5f 90       	pop	r5
    2344:	4f 90       	pop	r4
    2346:	08 95       	ret
            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    2348:	ce 01       	movw	r24, r28
    234a:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN3USB15getUsbTaskStateEv>
    234e:	82 31       	cpi	r24, 0x12	; 18
    2350:	59 f7       	brne	.-42     	; 0x2328 <_ZN16AndroidAccessory11isConnectedEv+0x106>
    2352:	de cf       	rjmp	.-68     	; 0x2310 <_ZN16AndroidAccessory11isConnectedEv+0xee>
        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));

            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
    2354:	8c ee       	ldi	r24, 0xEC	; 236
    2356:	97 e0       	ldi	r25, 0x07	; 7
    2358:	6d ef       	ldi	r22, 0xFD	; 253
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
            switchDevice(1);
    2360:	c3 01       	movw	r24, r6
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN16AndroidAccessory12switchDeviceEh>
    2368:	df cf       	rjmp	.-66     	; 0x2328 <_ZN16AndroidAccessory11isConnectedEv+0x106>

0000236a <_ZN16AndroidAccessory7powerOnEv>:

}

void AndroidAccessory::powerOn(void)
{
    max.powerOn();
    236a:	48 96       	adiw	r24, 0x18	; 24
    236c:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN8MAX3421E7powerOnEv>
    delay(200);
    2370:	68 ec       	ldi	r22, 0xC8	; 200
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 8c 18 	call	0x3118	; 0x3118 <delay>
}
    237c:	08 95       	ret

0000237e <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>:
AndroidAccessory::AndroidAccessory(const char *manufacturer,
                                   const char *model,
                                   const char *description,
                                   const char *version,
                                   const char *uri,
                                   const char *serial) : manufacturer(manufacturer),
    237e:	af 92       	push	r10
    2380:	bf 92       	push	r11
    2382:	cf 92       	push	r12
    2384:	df 92       	push	r13
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	5c 01       	movw	r10, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2390:	fc 01       	movw	r30, r24
    2392:	13 82       	std	Z+3, r1	; 0x03
    2394:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2396:	88 ee       	ldi	r24, 0xE8	; 232
    2398:	93 e0       	ldi	r25, 0x03	; 3
    239a:	a0 e0       	ldi	r26, 0x00	; 0
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
                                                         model(model),
                                                         description(description),
                                                         version(version),
                                                         uri(uri),
                                                         serial(serial),
                                                         connected(false)
    23a6:	8f ed       	ldi	r24, 0xDF	; 223
    23a8:	92 e0       	ldi	r25, 0x02	; 2
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	75 87       	std	Z+13, r23	; 0x0d
    23b0:	64 87       	std	Z+12, r22	; 0x0c
    23b2:	57 87       	std	Z+15, r21	; 0x0f
    23b4:	46 87       	std	Z+14, r20	; 0x0e
    23b6:	31 8b       	std	Z+17, r19	; 0x11
    23b8:	20 8b       	std	Z+16, r18	; 0x10
    23ba:	13 8b       	std	Z+19, r17	; 0x13
    23bc:	02 8b       	std	Z+18, r16	; 0x12
    23be:	f5 8a       	std	Z+21, r15	; 0x15
    23c0:	e4 8a       	std	Z+20, r14	; 0x14
    23c2:	d7 8a       	std	Z+23, r13	; 0x17
    23c4:	c6 8a       	std	Z+22, r12	; 0x16
    23c6:	c5 01       	movw	r24, r10
    23c8:	48 96       	adiw	r24, 0x18	; 24
    23ca:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_ZN8MAX3421EC1Ev>
    23ce:	c5 01       	movw	r24, r10
    23d0:	49 96       	adiw	r24, 0x19	; 25
    23d2:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN3USBC1Ev>
    23d6:	f5 01       	movw	r30, r10
    23d8:	12 8e       	std	Z+26, r1	; 0x1a
{

}
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	bf 90       	pop	r11
    23e8:	af 90       	pop	r10
    23ea:	08 95       	ret

000023ec <loop>:
	motors.Init(); // Init Motors
}

// The loop function is called in an endless loop
void loop() {
	stateMachine.Call();
    23ec:	8a e9       	ldi	r24, 0x9A	; 154
    23ee:	95 e0       	ldi	r25, 0x05	; 5
    23f0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN12StateMachine4CallEv>
}
    23f4:	08 95       	ret

000023f6 <setup>:

#include "TB.h"

//The setup function is called once at startup of the sketch
void setup() {
	stateMachine.Init();
    23f6:	8a e9       	ldi	r24, 0x9A	; 154
    23f8:	95 e0       	ldi	r25, 0x05	; 5
    23fa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN12StateMachine4InitEv>
	Serial.begin(115200);
    23fe:	8c ee       	ldi	r24, 0xEC	; 236
    2400:	97 e0       	ldi	r25, 0x07	; 7
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	52 ec       	ldi	r21, 0xC2	; 194
    2406:	61 e0       	ldi	r22, 0x01	; 1
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN14HardwareSerial5beginEm>
	pinMode(LED13, OUTPUT); // Pin setup for Visual indication of runing (heart beat) program using onboard LED
    240e:	8d e0       	ldi	r24, 0x0D	; 13
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	0e 94 51 19 	call	0x32a2	; 0x32a2 <pinMode>
	digitalWrite(LED13, HIGH);
    2416:	8d e0       	ldi	r24, 0x0D	; 13
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	0e 94 04 1a 	call	0x3408	; 0x3408 <digitalWrite>
	motors.Init(); // Init Motors
    241e:	89 e9       	ldi	r24, 0x99	; 153
    2420:	95 e0       	ldi	r25, 0x05	; 5
    2422:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN5Motor4InitEv>
}
    2426:	08 95       	ret

00002428 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    2428:	08 95       	ret

0000242a <__vector_25>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
#elif defined(SIG_USART0_RECV)
  SIGNAL(SIG_USART0_RECV)
    242a:	1f 92       	push	r1
    242c:	0f 92       	push	r0
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	0f 92       	push	r0
    2432:	0b b6       	in	r0, 0x3b	; 59
    2434:	0f 92       	push	r0
    2436:	11 24       	eor	r1, r1
    2438:	2f 93       	push	r18
    243a:	3f 93       	push	r19
    243c:	4f 93       	push	r20
    243e:	8f 93       	push	r24
    2440:	9f 93       	push	r25
    2442:	ef 93       	push	r30
    2444:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    2446:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    244a:	20 91 0c 06 	lds	r18, 0x060C
    244e:	30 91 0d 06 	lds	r19, 0x060D

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    2452:	2f 5f       	subi	r18, 0xFF	; 255
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	2f 73       	andi	r18, 0x3F	; 63
    2458:	30 70       	andi	r19, 0x00	; 0
    245a:	80 91 0e 06 	lds	r24, 0x060E
    245e:	90 91 0f 06 	lds	r25, 0x060F
    2462:	28 17       	cp	r18, r24
    2464:	39 07       	cpc	r19, r25
    2466:	59 f0       	breq	.+22     	; 0x247e <__vector_25+0x54>
    buffer->buffer[buffer->head] = c;
    2468:	e0 91 0c 06 	lds	r30, 0x060C
    246c:	f0 91 0d 06 	lds	r31, 0x060D
    2470:	e4 53       	subi	r30, 0x34	; 52
    2472:	fa 4f       	sbci	r31, 0xFA	; 250
    2474:	40 83       	st	Z, r20
    buffer->head = i;
    2476:	30 93 0d 06 	sts	0x060D, r19
    247a:	20 93 0c 06 	sts	0x060C, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    247e:	ff 91       	pop	r31
    2480:	ef 91       	pop	r30
    2482:	9f 91       	pop	r25
    2484:	8f 91       	pop	r24
    2486:	4f 91       	pop	r20
    2488:	3f 91       	pop	r19
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0b be       	out	0x3b, r0	; 59
    2490:	0f 90       	pop	r0
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	0f 90       	pop	r0
    2496:	1f 90       	pop	r1
    2498:	18 95       	reti

0000249a <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    249a:	08 95       	ret

0000249c <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
    249c:	1f 92       	push	r1
    249e:	0f 92       	push	r0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	0f 92       	push	r0
    24a4:	0b b6       	in	r0, 0x3b	; 59
    24a6:	0f 92       	push	r0
    24a8:	11 24       	eor	r1, r1
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	8f 93       	push	r24
    24b2:	9f 93       	push	r25
    24b4:	ef 93       	push	r30
    24b6:	ff 93       	push	r31
  {
    unsigned char c = UDR1;
    24b8:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    24bc:	20 91 94 06 	lds	r18, 0x0694
    24c0:	30 91 95 06 	lds	r19, 0x0695

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	2f 73       	andi	r18, 0x3F	; 63
    24ca:	30 70       	andi	r19, 0x00	; 0
    24cc:	80 91 96 06 	lds	r24, 0x0696
    24d0:	90 91 97 06 	lds	r25, 0x0697
    24d4:	28 17       	cp	r18, r24
    24d6:	39 07       	cpc	r19, r25
    24d8:	59 f0       	breq	.+22     	; 0x24f0 <__vector_36+0x54>
    buffer->buffer[buffer->head] = c;
    24da:	e0 91 94 06 	lds	r30, 0x0694
    24de:	f0 91 95 06 	lds	r31, 0x0695
    24e2:	ec 5a       	subi	r30, 0xAC	; 172
    24e4:	f9 4f       	sbci	r31, 0xF9	; 249
    24e6:	40 83       	st	Z, r20
    buffer->head = i;
    24e8:	30 93 95 06 	sts	0x0695, r19
    24ec:	20 93 94 06 	sts	0x0694, r18
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
    24f0:	ff 91       	pop	r31
    24f2:	ef 91       	pop	r30
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	4f 91       	pop	r20
    24fa:	3f 91       	pop	r19
    24fc:	2f 91       	pop	r18
    24fe:	0f 90       	pop	r0
    2500:	0b be       	out	0x3b, r0	; 59
    2502:	0f 90       	pop	r0
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	0f 90       	pop	r0
    2508:	1f 90       	pop	r1
    250a:	18 95       	reti

0000250c <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    250c:	08 95       	ret

0000250e <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	0b b6       	in	r0, 0x3b	; 59
    2518:	0f 92       	push	r0
    251a:	11 24       	eor	r1, r1
    251c:	2f 93       	push	r18
    251e:	3f 93       	push	r19
    2520:	4f 93       	push	r20
    2522:	8f 93       	push	r24
    2524:	9f 93       	push	r25
    2526:	ef 93       	push	r30
    2528:	ff 93       	push	r31
  {
    unsigned char c = UDR2;
    252a:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    252e:	20 91 1c 07 	lds	r18, 0x071C
    2532:	30 91 1d 07 	lds	r19, 0x071D

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    2536:	2f 5f       	subi	r18, 0xFF	; 255
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	2f 73       	andi	r18, 0x3F	; 63
    253c:	30 70       	andi	r19, 0x00	; 0
    253e:	80 91 1e 07 	lds	r24, 0x071E
    2542:	90 91 1f 07 	lds	r25, 0x071F
    2546:	28 17       	cp	r18, r24
    2548:	39 07       	cpc	r19, r25
    254a:	59 f0       	breq	.+22     	; 0x2562 <__vector_51+0x54>
    buffer->buffer[buffer->head] = c;
    254c:	e0 91 1c 07 	lds	r30, 0x071C
    2550:	f0 91 1d 07 	lds	r31, 0x071D
    2554:	e4 52       	subi	r30, 0x24	; 36
    2556:	f9 4f       	sbci	r31, 0xF9	; 249
    2558:	40 83       	st	Z, r20
    buffer->head = i;
    255a:	30 93 1d 07 	sts	0x071D, r19
    255e:	20 93 1c 07 	sts	0x071C, r18
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
    2562:	ff 91       	pop	r31
    2564:	ef 91       	pop	r30
    2566:	9f 91       	pop	r25
    2568:	8f 91       	pop	r24
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0b be       	out	0x3b, r0	; 59
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    257e:	08 95       	ret

00002580 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	0f 92       	push	r0
    2588:	0b b6       	in	r0, 0x3b	; 59
    258a:	0f 92       	push	r0
    258c:	11 24       	eor	r1, r1
    258e:	2f 93       	push	r18
    2590:	3f 93       	push	r19
    2592:	4f 93       	push	r20
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
  {
    unsigned char c = UDR3;
    259c:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    25a0:	20 91 a4 07 	lds	r18, 0x07A4
    25a4:	30 91 a5 07 	lds	r19, 0x07A5

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    25a8:	2f 5f       	subi	r18, 0xFF	; 255
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	2f 73       	andi	r18, 0x3F	; 63
    25ae:	30 70       	andi	r19, 0x00	; 0
    25b0:	80 91 a6 07 	lds	r24, 0x07A6
    25b4:	90 91 a7 07 	lds	r25, 0x07A7
    25b8:	28 17       	cp	r18, r24
    25ba:	39 07       	cpc	r19, r25
    25bc:	59 f0       	breq	.+22     	; 0x25d4 <__vector_54+0x54>
    buffer->buffer[buffer->head] = c;
    25be:	e0 91 a4 07 	lds	r30, 0x07A4
    25c2:	f0 91 a5 07 	lds	r31, 0x07A5
    25c6:	ec 59       	subi	r30, 0x9C	; 156
    25c8:	f8 4f       	sbci	r31, 0xF8	; 248
    25ca:	40 83       	st	Z, r20
    buffer->head = i;
    25cc:	30 93 a5 07 	sts	0x07A5, r19
    25d0:	20 93 a4 07 	sts	0x07A4, r18
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	4f 91       	pop	r20
    25de:	3f 91       	pop	r19
    25e0:	2f 91       	pop	r18
    25e2:	0f 90       	pop	r0
    25e4:	0b be       	out	0x3b, r0	; 59
    25e6:	0f 90       	pop	r0
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	0f 90       	pop	r0
    25ec:	1f 90       	pop	r1
    25ee:	18 95       	reti

000025f0 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    25f0:	e0 91 f8 07 	lds	r30, 0x07F8
    25f4:	f0 91 f9 07 	lds	r31, 0x07F9
    25f8:	e0 5c       	subi	r30, 0xC0	; 192
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	81 91       	ld	r24, Z+
    25fe:	91 91       	ld	r25, Z+
    2600:	20 81       	ld	r18, Z
    2602:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    2604:	82 1b       	sub	r24, r18
    2606:	93 0b       	sbc	r25, r19
    2608:	8f 73       	andi	r24, 0x3F	; 63
    260a:	90 70       	andi	r25, 0x00	; 0
    260c:	89 2b       	or	r24, r25
    260e:	11 f0       	breq	.+4      	; 0x2614 <_Z14serialEventRunv+0x24>
    2610:	0e 94 14 12 	call	0x2428	; 0x2428 <_Z11serialEventv>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2614:	e0 91 17 08 	lds	r30, 0x0817
    2618:	f0 91 18 08 	lds	r31, 0x0818
    261c:	e0 5c       	subi	r30, 0xC0	; 192
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	81 91       	ld	r24, Z+
    2622:	91 91       	ld	r25, Z+
    2624:	20 81       	ld	r18, Z
    2626:	31 81       	ldd	r19, Z+1	; 0x01
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    2628:	82 1b       	sub	r24, r18
    262a:	93 0b       	sbc	r25, r19
    262c:	8f 73       	andi	r24, 0x3F	; 63
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	89 2b       	or	r24, r25
    2632:	11 f0       	breq	.+4      	; 0x2638 <_Z14serialEventRunv+0x48>
    2634:	0e 94 4d 12 	call	0x249a	; 0x249a <_Z12serialEvent1v>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2638:	e0 91 36 08 	lds	r30, 0x0836
    263c:	f0 91 37 08 	lds	r31, 0x0837
    2640:	e0 5c       	subi	r30, 0xC0	; 192
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	81 91       	ld	r24, Z+
    2646:	91 91       	ld	r25, Z+
    2648:	20 81       	ld	r18, Z
    264a:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    264c:	82 1b       	sub	r24, r18
    264e:	93 0b       	sbc	r25, r19
    2650:	8f 73       	andi	r24, 0x3F	; 63
    2652:	90 70       	andi	r25, 0x00	; 0
    2654:	89 2b       	or	r24, r25
    2656:	11 f0       	breq	.+4      	; 0x265c <_Z14serialEventRunv+0x6c>
    2658:	0e 94 86 12 	call	0x250c	; 0x250c <_Z12serialEvent2v>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    265c:	e0 91 55 08 	lds	r30, 0x0855
    2660:	f0 91 56 08 	lds	r31, 0x0856
    2664:	e0 5c       	subi	r30, 0xC0	; 192
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	81 91       	ld	r24, Z+
    266a:	91 91       	ld	r25, Z+
    266c:	20 81       	ld	r18, Z
    266e:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    2670:	82 1b       	sub	r24, r18
    2672:	93 0b       	sbc	r25, r19
    2674:	8f 73       	andi	r24, 0x3F	; 63
    2676:	90 70       	andi	r25, 0x00	; 0
    2678:	89 2b       	or	r24, r25
    267a:	11 f0       	breq	.+4      	; 0x2680 <_Z14serialEventRunv+0x90>
    267c:	0e 94 bf 12 	call	0x257e	; 0x257e <_Z12serialEvent3v>
    2680:	08 95       	ret

00002682 <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
    2682:	1f 92       	push	r1
    2684:	0f 92       	push	r0
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	0f 92       	push	r0
    268a:	0b b6       	in	r0, 0x3b	; 59
    268c:	0f 92       	push	r0
    268e:	11 24       	eor	r1, r1
    2690:	2f 93       	push	r18
    2692:	3f 93       	push	r19
    2694:	8f 93       	push	r24
    2696:	9f 93       	push	r25
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    269c:	20 91 50 06 	lds	r18, 0x0650
    26a0:	30 91 51 06 	lds	r19, 0x0651
    26a4:	80 91 52 06 	lds	r24, 0x0652
    26a8:	90 91 53 06 	lds	r25, 0x0653
    26ac:	28 17       	cp	r18, r24
    26ae:	39 07       	cpc	r19, r25
    26b0:	31 f4       	brne	.+12     	; 0x26be <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    26b2:	80 91 c1 00 	lds	r24, 0x00C1
    26b6:	8f 7d       	andi	r24, 0xDF	; 223
    26b8:	80 93 c1 00 	sts	0x00C1, r24
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    26be:	e0 91 52 06 	lds	r30, 0x0652
    26c2:	f0 91 53 06 	lds	r31, 0x0653
    26c6:	e0 5f       	subi	r30, 0xF0	; 240
    26c8:	f9 4f       	sbci	r31, 0xF9	; 249
    26ca:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    26cc:	80 91 52 06 	lds	r24, 0x0652
    26d0:	90 91 53 06 	lds	r25, 0x0653
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	8f 73       	andi	r24, 0x3F	; 63
    26d8:	90 70       	andi	r25, 0x00	; 0
    26da:	90 93 53 06 	sts	0x0653, r25
    26de:	80 93 52 06 	sts	0x0652, r24
	
  #if defined(UDR0)
    UDR0 = c;
    26e2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	9f 91       	pop	r25
    26ec:	8f 91       	pop	r24
    26ee:	3f 91       	pop	r19
    26f0:	2f 91       	pop	r18
    26f2:	0f 90       	pop	r0
    26f4:	0b be       	out	0x3b, r0	; 59
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f 90       	pop	r0
    26fc:	1f 90       	pop	r1
    26fe:	18 95       	reti

00002700 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
    2700:	1f 92       	push	r1
    2702:	0f 92       	push	r0
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	0f 92       	push	r0
    2708:	0b b6       	in	r0, 0x3b	; 59
    270a:	0f 92       	push	r0
    270c:	11 24       	eor	r1, r1
    270e:	2f 93       	push	r18
    2710:	3f 93       	push	r19
    2712:	8f 93       	push	r24
    2714:	9f 93       	push	r25
    2716:	ef 93       	push	r30
    2718:	ff 93       	push	r31
{
  if (tx_buffer1.head == tx_buffer1.tail) {
    271a:	20 91 d8 06 	lds	r18, 0x06D8
    271e:	30 91 d9 06 	lds	r19, 0x06D9
    2722:	80 91 da 06 	lds	r24, 0x06DA
    2726:	90 91 db 06 	lds	r25, 0x06DB
    272a:	28 17       	cp	r18, r24
    272c:	39 07       	cpc	r19, r25
    272e:	31 f4       	brne	.+12     	; 0x273c <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    2730:	80 91 c9 00 	lds	r24, 0x00C9
    2734:	8f 7d       	andi	r24, 0xDF	; 223
    2736:	80 93 c9 00 	sts	0x00C9, r24
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    273c:	e0 91 da 06 	lds	r30, 0x06DA
    2740:	f0 91 db 06 	lds	r31, 0x06DB
    2744:	e8 56       	subi	r30, 0x68	; 104
    2746:	f9 4f       	sbci	r31, 0xF9	; 249
    2748:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    274a:	80 91 da 06 	lds	r24, 0x06DA
    274e:	90 91 db 06 	lds	r25, 0x06DB
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	8f 73       	andi	r24, 0x3F	; 63
    2756:	90 70       	andi	r25, 0x00	; 0
    2758:	90 93 db 06 	sts	0x06DB, r25
    275c:	80 93 da 06 	sts	0x06DA, r24
	
    UDR1 = c;
    2760:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    2764:	ff 91       	pop	r31
    2766:	ef 91       	pop	r30
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0b be       	out	0x3b, r0	; 59
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	0b b6       	in	r0, 0x3b	; 59
    2788:	0f 92       	push	r0
    278a:	11 24       	eor	r1, r1
    278c:	2f 93       	push	r18
    278e:	3f 93       	push	r19
    2790:	8f 93       	push	r24
    2792:	9f 93       	push	r25
    2794:	ef 93       	push	r30
    2796:	ff 93       	push	r31
{
  if (tx_buffer2.head == tx_buffer2.tail) {
    2798:	20 91 60 07 	lds	r18, 0x0760
    279c:	30 91 61 07 	lds	r19, 0x0761
    27a0:	80 91 62 07 	lds	r24, 0x0762
    27a4:	90 91 63 07 	lds	r25, 0x0763
    27a8:	28 17       	cp	r18, r24
    27aa:	39 07       	cpc	r19, r25
    27ac:	31 f4       	brne	.+12     	; 0x27ba <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    27ae:	80 91 d1 00 	lds	r24, 0x00D1
    27b2:	8f 7d       	andi	r24, 0xDF	; 223
    27b4:	80 93 d1 00 	sts	0x00D1, r24
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    27ba:	e0 91 62 07 	lds	r30, 0x0762
    27be:	f0 91 63 07 	lds	r31, 0x0763
    27c2:	e0 5e       	subi	r30, 0xE0	; 224
    27c4:	f8 4f       	sbci	r31, 0xF8	; 248
    27c6:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    27c8:	80 91 62 07 	lds	r24, 0x0762
    27cc:	90 91 63 07 	lds	r25, 0x0763
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	8f 73       	andi	r24, 0x3F	; 63
    27d4:	90 70       	andi	r25, 0x00	; 0
    27d6:	90 93 63 07 	sts	0x0763, r25
    27da:	80 93 62 07 	sts	0x0762, r24
	
    UDR2 = c;
    27de:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    27e2:	ff 91       	pop	r31
    27e4:	ef 91       	pop	r30
    27e6:	9f 91       	pop	r25
    27e8:	8f 91       	pop	r24
    27ea:	3f 91       	pop	r19
    27ec:	2f 91       	pop	r18
    27ee:	0f 90       	pop	r0
    27f0:	0b be       	out	0x3b, r0	; 59
    27f2:	0f 90       	pop	r0
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	0f 90       	pop	r0
    27f8:	1f 90       	pop	r1
    27fa:	18 95       	reti

000027fc <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
    27fc:	1f 92       	push	r1
    27fe:	0f 92       	push	r0
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	0f 92       	push	r0
    2804:	0b b6       	in	r0, 0x3b	; 59
    2806:	0f 92       	push	r0
    2808:	11 24       	eor	r1, r1
    280a:	2f 93       	push	r18
    280c:	3f 93       	push	r19
    280e:	8f 93       	push	r24
    2810:	9f 93       	push	r25
    2812:	ef 93       	push	r30
    2814:	ff 93       	push	r31
{
  if (tx_buffer3.head == tx_buffer3.tail) {
    2816:	20 91 e8 07 	lds	r18, 0x07E8
    281a:	30 91 e9 07 	lds	r19, 0x07E9
    281e:	80 91 ea 07 	lds	r24, 0x07EA
    2822:	90 91 eb 07 	lds	r25, 0x07EB
    2826:	28 17       	cp	r18, r24
    2828:	39 07       	cpc	r19, r25
    282a:	31 f4       	brne	.+12     	; 0x2838 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    282c:	80 91 31 01 	lds	r24, 0x0131
    2830:	8f 7d       	andi	r24, 0xDF	; 223
    2832:	80 93 31 01 	sts	0x0131, r24
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    2838:	e0 91 ea 07 	lds	r30, 0x07EA
    283c:	f0 91 eb 07 	lds	r31, 0x07EB
    2840:	e8 55       	subi	r30, 0x58	; 88
    2842:	f8 4f       	sbci	r31, 0xF8	; 248
    2844:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    2846:	80 91 ea 07 	lds	r24, 0x07EA
    284a:	90 91 eb 07 	lds	r25, 0x07EB
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	8f 73       	andi	r24, 0x3F	; 63
    2852:	90 70       	andi	r25, 0x00	; 0
    2854:	90 93 eb 07 	sts	0x07EB, r25
    2858:	80 93 ea 07 	sts	0x07EA, r24
	
    UDR3 = c;
    285c:	20 93 36 01 	sts	0x0136, r18
  }
}
    2860:	ff 91       	pop	r31
    2862:	ef 91       	pop	r30
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	3f 91       	pop	r19
    286a:	2f 91       	pop	r18
    286c:	0f 90       	pop	r0
    286e:	0b be       	out	0x3b, r0	; 59
    2870:	0f 90       	pop	r0
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	0f 90       	pop	r0
    2876:	1f 90       	pop	r1
    2878:	18 95       	reti

0000287a <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    287a:	af 92       	push	r10
    287c:	bf 92       	push	r11
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	ec 01       	movw	r28, r24
    288e:	7a 01       	movw	r14, r20
    2890:	8b 01       	movw	r16, r22
    2892:	dd 24       	eor	r13, r13
    2894:	40 30       	cpi	r20, 0x00	; 0
    2896:	81 ee       	ldi	r24, 0xE1	; 225
    2898:	58 07       	cpc	r21, r24
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	68 07       	cpc	r22, r24
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	78 07       	cpc	r23, r24
    28a2:	11 f0       	breq	.+4      	; 0x28a8 <_ZN14HardwareSerial5beginEm+0x2e>
    28a4:	dd 24       	eor	r13, r13
    28a6:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	a9 2e       	mov	r10, r25
    28ac:	b1 2c       	mov	r11, r1
    28ae:	ec 89       	ldd	r30, Y+20	; 0x14
    28b0:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    28b2:	dd 20       	and	r13, r13
    28b4:	69 f0       	breq	.+26     	; 0x28d0 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    28b6:	c5 01       	movw	r24, r10
    28b8:	0e 8c       	ldd	r0, Y+30	; 0x1e
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <_ZN14HardwareSerial5beginEm+0x46>
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	0a 94       	dec	r0
    28c2:	e2 f7       	brpl	.-8      	; 0x28bc <_ZN14HardwareSerial5beginEm+0x42>
    28c4:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	79 e0       	ldi	r23, 0x09	; 9
    28ca:	8d e3       	ldi	r24, 0x3D	; 61
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    28d0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    28d2:	60 e8       	ldi	r22, 0x80	; 128
    28d4:	74 e8       	ldi	r23, 0x84	; 132
    28d6:	8e e1       	ldi	r24, 0x1E	; 30
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a8 01       	movw	r20, r16
    28dc:	97 01       	movw	r18, r14
    28de:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__udivmodsi4>
    28e2:	21 50       	subi	r18, 0x01	; 1
    28e4:	30 40       	sbci	r19, 0x00	; 0
    28e6:	40 40       	sbci	r20, 0x00	; 0
    28e8:	50 40       	sbci	r21, 0x00	; 0
    28ea:	56 95       	lsr	r21
    28ec:	47 95       	ror	r20
    28ee:	37 95       	ror	r19
    28f0:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    28f2:	80 e1       	ldi	r24, 0x10	; 16
    28f4:	20 30       	cpi	r18, 0x00	; 0
    28f6:	38 07       	cpc	r19, r24
    28f8:	20 f0       	brcs	.+8      	; 0x2902 <_ZN14HardwareSerial5beginEm+0x88>
    28fa:	dd 20       	and	r13, r13
    28fc:	11 f0       	breq	.+4      	; 0x2902 <_ZN14HardwareSerial5beginEm+0x88>
    28fe:	dd 24       	eor	r13, r13
    2900:	d6 cf       	rjmp	.-84     	; 0x28ae <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2902:	e8 89       	ldd	r30, Y+16	; 0x10
    2904:	f9 89       	ldd	r31, Y+17	; 0x11
    2906:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2908:	ea 89       	ldd	r30, Y+18	; 0x12
    290a:	fb 89       	ldd	r31, Y+19	; 0x13
    290c:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    290e:	ee 89       	ldd	r30, Y+22	; 0x16
    2910:	ff 89       	ldd	r31, Y+23	; 0x17
    2912:	40 81       	ld	r20, Z
    2914:	21 e0       	ldi	r18, 0x01	; 1
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	c9 01       	movw	r24, r18
    291a:	0a 8c       	ldd	r0, Y+26	; 0x1a
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <_ZN14HardwareSerial5beginEm+0xa8>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <_ZN14HardwareSerial5beginEm+0xa4>
    2926:	48 2b       	or	r20, r24
    2928:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    292a:	ee 89       	ldd	r30, Y+22	; 0x16
    292c:	ff 89       	ldd	r31, Y+23	; 0x17
    292e:	40 81       	ld	r20, Z
    2930:	c9 01       	movw	r24, r18
    2932:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2934:	02 c0       	rjmp	.+4      	; 0x293a <_ZN14HardwareSerial5beginEm+0xc0>
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	0a 94       	dec	r0
    293c:	e2 f7       	brpl	.-8      	; 0x2936 <_ZN14HardwareSerial5beginEm+0xbc>
    293e:	48 2b       	or	r20, r24
    2940:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    2942:	ee 89       	ldd	r30, Y+22	; 0x16
    2944:	ff 89       	ldd	r31, Y+23	; 0x17
    2946:	40 81       	ld	r20, Z
    2948:	c9 01       	movw	r24, r18
    294a:	0c 8c       	ldd	r0, Y+28	; 0x1c
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <_ZN14HardwareSerial5beginEm+0xd8>
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <_ZN14HardwareSerial5beginEm+0xd4>
    2956:	48 2b       	or	r20, r24
    2958:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    295a:	ee 89       	ldd	r30, Y+22	; 0x16
    295c:	ff 89       	ldd	r31, Y+23	; 0x17
    295e:	80 81       	ld	r24, Z
    2960:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <_ZN14HardwareSerial5beginEm+0xee>
    2964:	22 0f       	add	r18, r18
    2966:	33 1f       	adc	r19, r19
    2968:	0a 94       	dec	r0
    296a:	e2 f7       	brpl	.-8      	; 0x2964 <_ZN14HardwareSerial5beginEm+0xea>
    296c:	20 95       	com	r18
    296e:	28 23       	and	r18, r24
    2970:	20 83       	st	Z, r18
}
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	ff 90       	pop	r15
    297c:	ef 90       	pop	r14
    297e:	df 90       	pop	r13
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	08 95       	ret

00002986 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2986:	dc 01       	movw	r26, r24
    2988:	1c 96       	adiw	r26, 0x0c	; 12
    298a:	ed 91       	ld	r30, X+
    298c:	fc 91       	ld	r31, X
    298e:	1d 97       	sbiw	r26, 0x0d	; 13
    2990:	e0 5c       	subi	r30, 0xC0	; 192
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	21 91       	ld	r18, Z+
    2996:	31 91       	ld	r19, Z+
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	28 1b       	sub	r18, r24
    299e:	39 0b       	sbc	r19, r25
    29a0:	2f 73       	andi	r18, 0x3F	; 63
    29a2:	30 70       	andi	r19, 0x00	; 0
}
    29a4:	c9 01       	movw	r24, r18
    29a6:	08 95       	ret

000029a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    29a8:	dc 01       	movw	r26, r24
    29aa:	1c 96       	adiw	r26, 0x0c	; 12
    29ac:	ed 91       	ld	r30, X+
    29ae:	fc 91       	ld	r31, X
    29b0:	1d 97       	sbiw	r26, 0x0d	; 13
    29b2:	e0 5c       	subi	r30, 0xC0	; 192
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	20 81       	ld	r18, Z
    29b8:	31 81       	ldd	r19, Z+1	; 0x01
    29ba:	e0 54       	subi	r30, 0x40	; 64
    29bc:	f0 40       	sbci	r31, 0x00	; 0
    29be:	df 01       	movw	r26, r30
    29c0:	ae 5b       	subi	r26, 0xBE	; 190
    29c2:	bf 4f       	sbci	r27, 0xFF	; 255
    29c4:	8d 91       	ld	r24, X+
    29c6:	9c 91       	ld	r25, X
    29c8:	11 97       	sbiw	r26, 0x01	; 1
    29ca:	28 17       	cp	r18, r24
    29cc:	39 07       	cpc	r19, r25
    29ce:	19 f4       	brne	.+6      	; 0x29d6 <_ZN14HardwareSerial4peekEv+0x2e>
    29d0:	2f ef       	ldi	r18, 0xFF	; 255
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	07 c0       	rjmp	.+14     	; 0x29e4 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    29d6:	8d 91       	ld	r24, X+
    29d8:	9c 91       	ld	r25, X
    29da:	e8 0f       	add	r30, r24
    29dc:	f9 1f       	adc	r31, r25
    29de:	80 81       	ld	r24, Z
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    29e4:	c9 01       	movw	r24, r18
    29e6:	08 95       	ret

000029e8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    29e8:	dc 01       	movw	r26, r24
    29ea:	1c 96       	adiw	r26, 0x0c	; 12
    29ec:	ed 91       	ld	r30, X+
    29ee:	fc 91       	ld	r31, X
    29f0:	1d 97       	sbiw	r26, 0x0d	; 13
    29f2:	e0 5c       	subi	r30, 0xC0	; 192
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	20 81       	ld	r18, Z
    29f8:	31 81       	ldd	r19, Z+1	; 0x01
    29fa:	e0 54       	subi	r30, 0x40	; 64
    29fc:	f0 40       	sbci	r31, 0x00	; 0
    29fe:	df 01       	movw	r26, r30
    2a00:	ae 5b       	subi	r26, 0xBE	; 190
    2a02:	bf 4f       	sbci	r27, 0xFF	; 255
    2a04:	8d 91       	ld	r24, X+
    2a06:	9c 91       	ld	r25, X
    2a08:	11 97       	sbiw	r26, 0x01	; 1
    2a0a:	28 17       	cp	r18, r24
    2a0c:	39 07       	cpc	r19, r25
    2a0e:	19 f4       	brne	.+6      	; 0x2a16 <_ZN14HardwareSerial4readEv+0x2e>
    2a10:	2f ef       	ldi	r18, 0xFF	; 255
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	10 c0       	rjmp	.+32     	; 0x2a36 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2a16:	8d 91       	ld	r24, X+
    2a18:	9c 91       	ld	r25, X
    2a1a:	11 97       	sbiw	r26, 0x01	; 1
    2a1c:	e8 0f       	add	r30, r24
    2a1e:	f9 1f       	adc	r31, r25
    2a20:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	11 97       	sbiw	r26, 0x01	; 1
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	8f 73       	andi	r24, 0x3F	; 63
    2a2c:	90 70       	andi	r25, 0x00	; 0
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	9c 93       	st	X, r25
    2a32:	8e 93       	st	-X, r24
    return c;
    2a34:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2a36:	c9 01       	movw	r24, r18
    2a38:	08 95       	ret

00002a3a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	86 85       	ldd	r24, Z+14	; 0x0e
    2a3e:	97 85       	ldd	r25, Z+15	; 0x0f
    2a40:	dc 01       	movw	r26, r24
    2a42:	a0 5c       	subi	r26, 0xC0	; 192
    2a44:	bf 4f       	sbci	r27, 0xFF	; 255
    2a46:	fc 01       	movw	r30, r24
    2a48:	ee 5b       	subi	r30, 0xBE	; 190
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	2d 91       	ld	r18, X+
    2a4e:	3c 91       	ld	r19, X
    2a50:	11 97       	sbiw	r26, 0x01	; 1
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	28 17       	cp	r18, r24
    2a58:	39 07       	cpc	r19, r25
    2a5a:	c1 f7       	brne	.-16     	; 0x2a4c <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    2a5c:	08 95       	ret

00002a5e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2a64:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a66:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a68:	e0 5c       	subi	r30, 0xC0	; 192
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	20 81       	ld	r18, Z
    2a6e:	31 81       	ldd	r19, Z+1	; 0x01
    2a70:	e0 54       	subi	r30, 0x40	; 64
    2a72:	f0 40       	sbci	r31, 0x00	; 0
    2a74:	2f 5f       	subi	r18, 0xFF	; 255
    2a76:	3f 4f       	sbci	r19, 0xFF	; 255
    2a78:	2f 73       	andi	r18, 0x3F	; 63
    2a7a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    2a7c:	df 01       	movw	r26, r30
    2a7e:	ae 5b       	subi	r26, 0xBE	; 190
    2a80:	bf 4f       	sbci	r27, 0xFF	; 255
    2a82:	8d 91       	ld	r24, X+
    2a84:	9c 91       	ld	r25, X
    2a86:	11 97       	sbiw	r26, 0x01	; 1
    2a88:	28 17       	cp	r18, r24
    2a8a:	39 07       	cpc	r19, r25
    2a8c:	d1 f3       	breq	.-12     	; 0x2a82 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    2a8e:	e0 5c       	subi	r30, 0xC0	; 192
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	e0 54       	subi	r30, 0x40	; 64
    2a98:	f0 40       	sbci	r31, 0x00	; 0
    2a9a:	e8 0f       	add	r30, r24
    2a9c:	f9 1f       	adc	r31, r25
    2a9e:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    2aa0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2aa2:	ff 85       	ldd	r31, Y+15	; 0x0f
    2aa4:	e0 5c       	subi	r30, 0xC0	; 192
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	31 83       	std	Z+1, r19	; 0x01
    2aaa:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    2aac:	ee 89       	ldd	r30, Y+22	; 0x16
    2aae:	ff 89       	ldd	r31, Y+23	; 0x17
    2ab0:	20 81       	ld	r18, Z
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <_ZN14HardwareSerial5writeEh+0x60>
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	0a 94       	dec	r0
    2ac0:	e2 f7       	brpl	.-8      	; 0x2aba <_ZN14HardwareSerial5writeEh+0x5c>
    2ac2:	28 2b       	or	r18, r24
    2ac4:	20 83       	st	Z, r18
  
  return 1;
}
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    2ad0:	1f 93       	push	r17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2ad2:	10 92 ef 07 	sts	0x07EF, r1
    2ad6:	10 92 ee 07 	sts	0x07EE, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2ada:	28 ee       	ldi	r18, 0xE8	; 232
    2adc:	33 e0       	ldi	r19, 0x03	; 3
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	20 93 f0 07 	sts	0x07F0, r18
    2ae6:	30 93 f1 07 	sts	0x07F1, r19
    2aea:	40 93 f2 07 	sts	0x07F2, r20
    2aee:	50 93 f3 07 	sts	0x07F3, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2af2:	61 ef       	ldi	r22, 0xF1	; 241
    2af4:	72 e0       	ldi	r23, 0x02	; 2
    2af6:	70 93 ed 07 	sts	0x07ED, r23
    2afa:	60 93 ec 07 	sts	0x07EC, r22
{
  _rx_buffer = rx_buffer;
    2afe:	8c ec       	ldi	r24, 0xCC	; 204
    2b00:	95 e0       	ldi	r25, 0x05	; 5
    2b02:	90 93 f9 07 	sts	0x07F9, r25
    2b06:	80 93 f8 07 	sts	0x07F8, r24
  _tx_buffer = tx_buffer;
    2b0a:	80 e1       	ldi	r24, 0x10	; 16
    2b0c:	96 e0       	ldi	r25, 0x06	; 6
    2b0e:	90 93 fb 07 	sts	0x07FB, r25
    2b12:	80 93 fa 07 	sts	0x07FA, r24
  _ubrrh = ubrrh;
    2b16:	85 ec       	ldi	r24, 0xC5	; 197
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	90 93 fd 07 	sts	0x07FD, r25
    2b1e:	80 93 fc 07 	sts	0x07FC, r24
  _ubrrl = ubrrl;
    2b22:	84 ec       	ldi	r24, 0xC4	; 196
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	90 93 ff 07 	sts	0x07FF, r25
    2b2a:	80 93 fe 07 	sts	0x07FE, r24
  _ucsra = ucsra;
    2b2e:	80 ec       	ldi	r24, 0xC0	; 192
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	90 93 01 08 	sts	0x0801, r25
    2b36:	80 93 00 08 	sts	0x0800, r24
  _ucsrb = ucsrb;
    2b3a:	81 ec       	ldi	r24, 0xC1	; 193
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	90 93 03 08 	sts	0x0803, r25
    2b42:	80 93 02 08 	sts	0x0802, r24
  _udr = udr;
    2b46:	86 ec       	ldi	r24, 0xC6	; 198
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	90 93 05 08 	sts	0x0805, r25
    2b4e:	80 93 04 08 	sts	0x0804, r24
  _rxen = rxen;
    2b52:	14 e0       	ldi	r17, 0x04	; 4
    2b54:	10 93 06 08 	sts	0x0806, r17
  _txen = txen;
    2b58:	b3 e0       	ldi	r27, 0x03	; 3
    2b5a:	b0 93 07 08 	sts	0x0807, r27
  _rxcie = rxcie;
    2b5e:	a7 e0       	ldi	r26, 0x07	; 7
    2b60:	a0 93 08 08 	sts	0x0808, r26
  _udrie = udrie;
    2b64:	f5 e0       	ldi	r31, 0x05	; 5
    2b66:	f0 93 09 08 	sts	0x0809, r31
  _u2x = u2x;
    2b6a:	e1 e0       	ldi	r30, 0x01	; 1
    2b6c:	e0 93 0a 08 	sts	0x080A, r30
    2b70:	10 92 0e 08 	sts	0x080E, r1
    2b74:	10 92 0d 08 	sts	0x080D, r1
    2b78:	20 93 0f 08 	sts	0x080F, r18
    2b7c:	30 93 10 08 	sts	0x0810, r19
    2b80:	40 93 11 08 	sts	0x0811, r20
    2b84:	50 93 12 08 	sts	0x0812, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2b88:	70 93 0c 08 	sts	0x080C, r23
    2b8c:	60 93 0b 08 	sts	0x080B, r22
{
  _rx_buffer = rx_buffer;
    2b90:	84 e5       	ldi	r24, 0x54	; 84
    2b92:	96 e0       	ldi	r25, 0x06	; 6
    2b94:	90 93 18 08 	sts	0x0818, r25
    2b98:	80 93 17 08 	sts	0x0817, r24
  _tx_buffer = tx_buffer;
    2b9c:	88 e9       	ldi	r24, 0x98	; 152
    2b9e:	96 e0       	ldi	r25, 0x06	; 6
    2ba0:	90 93 1a 08 	sts	0x081A, r25
    2ba4:	80 93 19 08 	sts	0x0819, r24
  _ubrrh = ubrrh;
    2ba8:	8d ec       	ldi	r24, 0xCD	; 205
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	90 93 1c 08 	sts	0x081C, r25
    2bb0:	80 93 1b 08 	sts	0x081B, r24
  _ubrrl = ubrrl;
    2bb4:	8c ec       	ldi	r24, 0xCC	; 204
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	90 93 1e 08 	sts	0x081E, r25
    2bbc:	80 93 1d 08 	sts	0x081D, r24
  _ucsra = ucsra;
    2bc0:	88 ec       	ldi	r24, 0xC8	; 200
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	90 93 20 08 	sts	0x0820, r25
    2bc8:	80 93 1f 08 	sts	0x081F, r24
  _ucsrb = ucsrb;
    2bcc:	89 ec       	ldi	r24, 0xC9	; 201
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	90 93 22 08 	sts	0x0822, r25
    2bd4:	80 93 21 08 	sts	0x0821, r24
  _udr = udr;
    2bd8:	8e ec       	ldi	r24, 0xCE	; 206
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	90 93 24 08 	sts	0x0824, r25
    2be0:	80 93 23 08 	sts	0x0823, r24
  _rxen = rxen;
    2be4:	10 93 25 08 	sts	0x0825, r17
  _txen = txen;
    2be8:	b0 93 26 08 	sts	0x0826, r27
  _rxcie = rxcie;
    2bec:	a0 93 27 08 	sts	0x0827, r26
  _udrie = udrie;
    2bf0:	f0 93 28 08 	sts	0x0828, r31
  _u2x = u2x;
    2bf4:	e0 93 29 08 	sts	0x0829, r30
    2bf8:	10 92 2d 08 	sts	0x082D, r1
    2bfc:	10 92 2c 08 	sts	0x082C, r1
    2c00:	20 93 2e 08 	sts	0x082E, r18
    2c04:	30 93 2f 08 	sts	0x082F, r19
    2c08:	40 93 30 08 	sts	0x0830, r20
    2c0c:	50 93 31 08 	sts	0x0831, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2c10:	70 93 2b 08 	sts	0x082B, r23
    2c14:	60 93 2a 08 	sts	0x082A, r22
{
  _rx_buffer = rx_buffer;
    2c18:	8c ed       	ldi	r24, 0xDC	; 220
    2c1a:	96 e0       	ldi	r25, 0x06	; 6
    2c1c:	90 93 37 08 	sts	0x0837, r25
    2c20:	80 93 36 08 	sts	0x0836, r24
  _tx_buffer = tx_buffer;
    2c24:	80 e2       	ldi	r24, 0x20	; 32
    2c26:	97 e0       	ldi	r25, 0x07	; 7
    2c28:	90 93 39 08 	sts	0x0839, r25
    2c2c:	80 93 38 08 	sts	0x0838, r24
  _ubrrh = ubrrh;
    2c30:	85 ed       	ldi	r24, 0xD5	; 213
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	90 93 3b 08 	sts	0x083B, r25
    2c38:	80 93 3a 08 	sts	0x083A, r24
  _ubrrl = ubrrl;
    2c3c:	84 ed       	ldi	r24, 0xD4	; 212
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	90 93 3d 08 	sts	0x083D, r25
    2c44:	80 93 3c 08 	sts	0x083C, r24
  _ucsra = ucsra;
    2c48:	80 ed       	ldi	r24, 0xD0	; 208
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	90 93 3f 08 	sts	0x083F, r25
    2c50:	80 93 3e 08 	sts	0x083E, r24
  _ucsrb = ucsrb;
    2c54:	81 ed       	ldi	r24, 0xD1	; 209
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	90 93 41 08 	sts	0x0841, r25
    2c5c:	80 93 40 08 	sts	0x0840, r24
  _udr = udr;
    2c60:	86 ed       	ldi	r24, 0xD6	; 214
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	90 93 43 08 	sts	0x0843, r25
    2c68:	80 93 42 08 	sts	0x0842, r24
  _rxen = rxen;
    2c6c:	10 93 44 08 	sts	0x0844, r17
  _txen = txen;
    2c70:	b0 93 45 08 	sts	0x0845, r27
  _rxcie = rxcie;
    2c74:	a0 93 46 08 	sts	0x0846, r26
  _udrie = udrie;
    2c78:	f0 93 47 08 	sts	0x0847, r31
  _u2x = u2x;
    2c7c:	e0 93 48 08 	sts	0x0848, r30
    2c80:	10 92 4c 08 	sts	0x084C, r1
    2c84:	10 92 4b 08 	sts	0x084B, r1
    2c88:	20 93 4d 08 	sts	0x084D, r18
    2c8c:	30 93 4e 08 	sts	0x084E, r19
    2c90:	40 93 4f 08 	sts	0x084F, r20
    2c94:	50 93 50 08 	sts	0x0850, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2c98:	70 93 4a 08 	sts	0x084A, r23
    2c9c:	60 93 49 08 	sts	0x0849, r22
{
  _rx_buffer = rx_buffer;
    2ca0:	84 e6       	ldi	r24, 0x64	; 100
    2ca2:	97 e0       	ldi	r25, 0x07	; 7
    2ca4:	90 93 56 08 	sts	0x0856, r25
    2ca8:	80 93 55 08 	sts	0x0855, r24
  _tx_buffer = tx_buffer;
    2cac:	88 ea       	ldi	r24, 0xA8	; 168
    2cae:	97 e0       	ldi	r25, 0x07	; 7
    2cb0:	90 93 58 08 	sts	0x0858, r25
    2cb4:	80 93 57 08 	sts	0x0857, r24
  _ubrrh = ubrrh;
    2cb8:	85 e3       	ldi	r24, 0x35	; 53
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	90 93 5a 08 	sts	0x085A, r25
    2cc0:	80 93 59 08 	sts	0x0859, r24
  _ubrrl = ubrrl;
    2cc4:	84 e3       	ldi	r24, 0x34	; 52
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
    2cc8:	90 93 5c 08 	sts	0x085C, r25
    2ccc:	80 93 5b 08 	sts	0x085B, r24
  _ucsra = ucsra;
    2cd0:	80 e3       	ldi	r24, 0x30	; 48
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	90 93 5e 08 	sts	0x085E, r25
    2cd8:	80 93 5d 08 	sts	0x085D, r24
  _ucsrb = ucsrb;
    2cdc:	81 e3       	ldi	r24, 0x31	; 49
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	90 93 60 08 	sts	0x0860, r25
    2ce4:	80 93 5f 08 	sts	0x085F, r24
  _udr = udr;
    2ce8:	86 e3       	ldi	r24, 0x36	; 54
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	90 93 62 08 	sts	0x0862, r25
    2cf0:	80 93 61 08 	sts	0x0861, r24
  _rxen = rxen;
    2cf4:	10 93 63 08 	sts	0x0863, r17
  _txen = txen;
    2cf8:	b0 93 64 08 	sts	0x0864, r27
  _rxcie = rxcie;
    2cfc:	a0 93 65 08 	sts	0x0865, r26
  _udrie = udrie;
    2d00:	f0 93 66 08 	sts	0x0866, r31
  _u2x = u2x;
    2d04:	e0 93 67 08 	sts	0x0867, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    2d08:	1f 91       	pop	r17
    2d0a:	08 95       	ret

00002d0c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    2d0c:	cf 92       	push	r12
    2d0e:	df 92       	push	r13
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	7c 01       	movw	r14, r24
    2d1e:	6b 01       	movw	r12, r22
    2d20:	8a 01       	movw	r16, r20
    2d22:	c0 e0       	ldi	r28, 0x00	; 0
    2d24:	d0 e0       	ldi	r29, 0x00	; 0
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    2d28:	d6 01       	movw	r26, r12
    2d2a:	6d 91       	ld	r22, X+
    2d2c:	6d 01       	movw	r12, r26
    2d2e:	d7 01       	movw	r26, r14
    2d30:	ed 91       	ld	r30, X+
    2d32:	fc 91       	ld	r31, X
    2d34:	01 90       	ld	r0, Z+
    2d36:	f0 81       	ld	r31, Z
    2d38:	e0 2d       	mov	r30, r0
    2d3a:	c7 01       	movw	r24, r14
    2d3c:	19 95       	eicall
    2d3e:	c8 0f       	add	r28, r24
    2d40:	d9 1f       	adc	r29, r25
    2d42:	01 50       	subi	r16, 0x01	; 1
    2d44:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2d46:	01 15       	cp	r16, r1
    2d48:	11 05       	cpc	r17, r1
    2d4a:	71 f7       	brne	.-36     	; 0x2d28 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	1f 91       	pop	r17
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	08 95       	ret

00002d60 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    2d6e:	8b 01       	movw	r16, r22
    2d70:	c0 e0       	ldi	r28, 0x00	; 0
    2d72:	d0 e0       	ldi	r29, 0x00	; 0
    2d74:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2d76:	0f 5f       	subi	r16, 0xFF	; 255
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    2d7c:	66 23       	and	r22, r22
    2d7e:	59 f0       	breq	.+22     	; 0x2d96 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    2d80:	d7 01       	movw	r26, r14
    2d82:	ed 91       	ld	r30, X+
    2d84:	fc 91       	ld	r31, X
    2d86:	01 90       	ld	r0, Z+
    2d88:	f0 81       	ld	r31, Z
    2d8a:	e0 2d       	mov	r30, r0
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	19 95       	eicall
    2d90:	c8 0f       	add	r28, r24
    2d92:	d9 1f       	adc	r29, r25
    2d94:	ef cf       	rjmp	.-34     	; 0x2d74 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    2d96:	ce 01       	movw	r24, r28
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	08 95       	ret

00002da6 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    2da6:	ef 92       	push	r14
    2da8:	ff 92       	push	r15
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
    2dae:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2db0:	dc 01       	movw	r26, r24
    2db2:	ed 91       	ld	r30, X+
    2db4:	fc 91       	ld	r31, X
    2db6:	01 90       	ld	r0, Z+
    2db8:	f0 81       	ld	r31, Z
    2dba:	e0 2d       	mov	r30, r0
    2dbc:	6d e0       	ldi	r22, 0x0D	; 13
    2dbe:	19 95       	eicall
    2dc0:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    2dc2:	d8 01       	movw	r26, r16
    2dc4:	ed 91       	ld	r30, X+
    2dc6:	fc 91       	ld	r31, X
    2dc8:	01 90       	ld	r0, Z+
    2dca:	f0 81       	ld	r31, Z
    2dcc:	e0 2d       	mov	r30, r0
    2dce:	c8 01       	movw	r24, r16
    2dd0:	6a e0       	ldi	r22, 0x0A	; 10
    2dd2:	19 95       	eicall
    2dd4:	9c 01       	movw	r18, r24
    2dd6:	2e 0d       	add	r18, r14
    2dd8:	3f 1d       	adc	r19, r15
    2dda:	c9 01       	movw	r24, r18
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	08 95       	ret

00002de6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    2df0:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN5Print5printEPK19__FlashStringHelper>
    2df4:	8c 01       	movw	r16, r24
  n += println();
    2df6:	c7 01       	movw	r24, r14
    2df8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5Print7printlnEv>
    2dfc:	9c 01       	movw	r18, r24
    2dfe:	20 0f       	add	r18, r16
    2e00:	31 1f       	adc	r19, r17
  return n;
}
    2e02:	c9 01       	movw	r24, r18
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	08 95       	ret

00002e0e <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	db 01       	movw	r26, r22
    2e14:	0d 90       	ld	r0, X+
    2e16:	00 20       	and	r0, r0
    2e18:	e9 f7       	brne	.-6      	; 0x2e14 <_ZN5Print5writeEPKc+0x6>
    2e1a:	11 97       	sbiw	r26, 0x01	; 1
    2e1c:	a6 1b       	sub	r26, r22
    2e1e:	b7 0b       	sbc	r27, r23
    2e20:	ec 01       	movw	r28, r24
    2e22:	e8 81       	ld	r30, Y
    2e24:	f9 81       	ldd	r31, Y+1	; 0x01
    2e26:	02 80       	ldd	r0, Z+2	; 0x02
    2e28:	f3 81       	ldd	r31, Z+3	; 0x03
    2e2a:	e0 2d       	mov	r30, r0
    2e2c:	ad 01       	movw	r20, r26
    2e2e:	19 95       	eicall
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	08 95       	ret

00002e36 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    2e36:	4f 92       	push	r4
    2e38:	5f 92       	push	r5
    2e3a:	7f 92       	push	r7
    2e3c:	8f 92       	push	r8
    2e3e:	9f 92       	push	r9
    2e40:	af 92       	push	r10
    2e42:	bf 92       	push	r11
    2e44:	cf 92       	push	r12
    2e46:	df 92       	push	r13
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	a1 97       	sbiw	r28, 0x21	; 33
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	2c 01       	movw	r4, r24
    2e66:	74 2e       	mov	r7, r20
    2e68:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2e6a:	22 30       	cpi	r18, 0x02	; 2
    2e6c:	08 f4       	brcc	.+2      	; 0x2e70 <_ZN5Print11printNumberEmh+0x3a>
    2e6e:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2e70:	19 a2       	std	Y+33, r1	; 0x21
    2e72:	31 e2       	ldi	r19, 0x21	; 33
    2e74:	c3 2e       	mov	r12, r19
    2e76:	d1 2c       	mov	r13, r1
    2e78:	cc 0e       	add	r12, r28
    2e7a:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    2e7c:	82 2e       	mov	r8, r18
    2e7e:	99 24       	eor	r9, r9
    2e80:	aa 24       	eor	r10, r10
    2e82:	bb 24       	eor	r11, r11
    2e84:	67 2d       	mov	r22, r7
    2e86:	75 2f       	mov	r23, r21
    2e88:	a5 01       	movw	r20, r10
    2e8a:	94 01       	movw	r18, r8
    2e8c:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__udivmodsi4>
    2e90:	79 01       	movw	r14, r18
    2e92:	8a 01       	movw	r16, r20
    char c = m - base * n;
    2e94:	c8 01       	movw	r24, r16
    2e96:	b7 01       	movw	r22, r14
    2e98:	a5 01       	movw	r20, r10
    2e9a:	94 01       	movw	r18, r8
    2e9c:	0e 94 37 1a 	call	0x346e	; 0x346e <__mulsi3>
    2ea0:	47 2d       	mov	r20, r7
    2ea2:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2ea4:	08 94       	sec
    2ea6:	c1 08       	sbc	r12, r1
    2ea8:	d1 08       	sbc	r13, r1
    2eaa:	4a 30       	cpi	r20, 0x0A	; 10
    2eac:	14 f4       	brge	.+4      	; 0x2eb2 <_ZN5Print11printNumberEmh+0x7c>
    2eae:	40 5d       	subi	r20, 0xD0	; 208
    2eb0:	01 c0       	rjmp	.+2      	; 0x2eb4 <_ZN5Print11printNumberEmh+0x7e>
    2eb2:	49 5c       	subi	r20, 0xC9	; 201
    2eb4:	f6 01       	movw	r30, r12
    2eb6:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2eb8:	e1 14       	cp	r14, r1
    2eba:	f1 04       	cpc	r15, r1
    2ebc:	01 05       	cpc	r16, r1
    2ebe:	11 05       	cpc	r17, r1
    2ec0:	21 f0       	breq	.+8      	; 0x2eca <_ZN5Print11printNumberEmh+0x94>
    2ec2:	7e 2c       	mov	r7, r14
    2ec4:	5f 2d       	mov	r21, r15
    2ec6:	c8 01       	movw	r24, r16
    2ec8:	dd cf       	rjmp	.-70     	; 0x2e84 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    2eca:	c2 01       	movw	r24, r4
    2ecc:	b6 01       	movw	r22, r12
    2ece:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN5Print5writeEPKc>
}
    2ed2:	a1 96       	adiw	r28, 0x21	; 33
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	df 90       	pop	r13
    2eec:	cf 90       	pop	r12
    2eee:	bf 90       	pop	r11
    2ef0:	af 90       	pop	r10
    2ef2:	9f 90       	pop	r9
    2ef4:	8f 90       	pop	r8
    2ef6:	7f 90       	pop	r7
    2ef8:	5f 90       	pop	r5
    2efa:	4f 90       	pop	r4
    2efc:	08 95       	ret

00002efe <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    2efe:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    2f00:	21 15       	cp	r18, r1
    2f02:	31 05       	cpc	r19, r1
    2f04:	41 f4       	brne	.+16     	; 0x2f16 <_ZN5Print5printEmi+0x18>
    2f06:	ed 91       	ld	r30, X+
    2f08:	fc 91       	ld	r31, X
    2f0a:	01 90       	ld	r0, Z+
    2f0c:	f0 81       	ld	r31, Z
    2f0e:	e0 2d       	mov	r30, r0
    2f10:	64 2f       	mov	r22, r20
    2f12:	19 95       	eicall
    2f14:	08 95       	ret
  else return printNumber(n, base);
    2f16:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN5Print11printNumberEmh>
}
    2f1a:	08 95       	ret

00002f1c <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    2f1c:	ef 92       	push	r14
    2f1e:	ff 92       	push	r15
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    2f26:	e6 2e       	mov	r14, r22
    2f28:	ff 24       	eor	r15, r15
    2f2a:	00 e0       	ldi	r16, 0x00	; 0
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	b8 01       	movw	r22, r16
    2f30:	a7 01       	movw	r20, r14
    2f32:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN5Print5printEmi>
}
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	08 95       	ret

00002f40 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    2f40:	cf 92       	push	r12
    2f42:	df 92       	push	r13
    2f44:	ef 92       	push	r14
    2f46:	ff 92       	push	r15
    2f48:	0f 93       	push	r16
    2f4a:	1f 93       	push	r17
    2f4c:	6c 01       	movw	r12, r24
    2f4e:	e6 2e       	mov	r14, r22
    2f50:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    2f52:	ff 24       	eor	r15, r15
    2f54:	00 e0       	ldi	r16, 0x00	; 0
    2f56:	10 e0       	ldi	r17, 0x00	; 0
    2f58:	b8 01       	movw	r22, r16
    2f5a:	a7 01       	movw	r20, r14
    2f5c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN5Print5printEmi>
    2f60:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    2f62:	c6 01       	movw	r24, r12
    2f64:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5Print7printlnEv>
    2f68:	08 0f       	add	r16, r24
    2f6a:	19 1f       	adc	r17, r25
  return n;
}
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	1f 91       	pop	r17
    2f70:	0f 91       	pop	r16
    2f72:	ff 90       	pop	r15
    2f74:	ef 90       	pop	r14
    2f76:	df 90       	pop	r13
    2f78:	cf 90       	pop	r12
    2f7a:	08 95       	ret

00002f7c <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	ec 01       	movw	r28, r24
    2f8e:	6a 01       	movw	r12, r20
    2f90:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    2f92:	21 15       	cp	r18, r1
    2f94:	31 05       	cpc	r19, r1
    2f96:	41 f4       	brne	.+16     	; 0x2fa8 <_ZN5Print5printEli+0x2c>
    return write(n);
    2f98:	e8 81       	ld	r30, Y
    2f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	f0 81       	ld	r31, Z
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	64 2f       	mov	r22, r20
    2fa4:	19 95       	eicall
    2fa6:	1f c0       	rjmp	.+62     	; 0x2fe6 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    2fa8:	2a 30       	cpi	r18, 0x0A	; 10
    2faa:	31 05       	cpc	r19, r1
    2fac:	d1 f4       	brne	.+52     	; 0x2fe2 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    2fae:	77 ff       	sbrs	r23, 7
    2fb0:	17 c0       	rjmp	.+46     	; 0x2fe0 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2fb2:	e8 81       	ld	r30, Y
    2fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb6:	01 90       	ld	r0, Z+
    2fb8:	f0 81       	ld	r31, Z
    2fba:	e0 2d       	mov	r30, r0
    2fbc:	6d e2       	ldi	r22, 0x2D	; 45
    2fbe:	19 95       	eicall
    2fc0:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    2fc2:	44 27       	eor	r20, r20
    2fc4:	55 27       	eor	r21, r21
    2fc6:	ba 01       	movw	r22, r20
    2fc8:	4c 19       	sub	r20, r12
    2fca:	5d 09       	sbc	r21, r13
    2fcc:	6e 09       	sbc	r22, r14
    2fce:	7f 09       	sbc	r23, r15
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	2a e0       	ldi	r18, 0x0A	; 10
    2fd4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN5Print11printNumberEmh>
    2fd8:	98 01       	movw	r18, r16
    2fda:	28 0f       	add	r18, r24
    2fdc:	39 1f       	adc	r19, r25
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    2fe0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    2fe2:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN5Print11printNumberEmh>
    2fe6:	9c 01       	movw	r18, r24
  }
}
    2fe8:	c9 01       	movw	r24, r18
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	cf 90       	pop	r12
    2ffa:	08 95       	ret

00002ffc <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	7b 01       	movw	r14, r22
    3006:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    3008:	00 27       	eor	r16, r16
    300a:	f7 fc       	sbrc	r15, 7
    300c:	00 95       	com	r16
    300e:	10 2f       	mov	r17, r16
    3010:	b8 01       	movw	r22, r16
    3012:	a7 01       	movw	r20, r14
    3014:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <_ZN5Print5printEli>
}
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	08 95       	ret

00003022 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3022:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN5Print5writeEPKc>
}
    3026:	08 95       	ret

00003028 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3032:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN5Print5writeEPKc>
    3036:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    3038:	c7 01       	movw	r24, r14
    303a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5Print7printlnEv>
    303e:	08 0f       	add	r16, r24
    3040:	19 1f       	adc	r17, r25
  return n;
}
    3042:	c8 01       	movw	r24, r16
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ff 90       	pop	r15
    304a:	ef 90       	pop	r14
    304c:	08 95       	ret

0000304e <main>:
#include <Arduino.h>

int main(void)
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
{
	init();
    3052:	0e 94 ef 18 	call	0x31de	; 0x31de <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3056:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    305a:	c8 ef       	ldi	r28, 0xF8	; 248
    305c:	d2 e1       	ldi	r29, 0x12	; 18
#endif
	
	setup();
    
	for (;;) {
		loop();
    305e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <loop>
		if (serialEventRun) serialEventRun();
    3062:	20 97       	sbiw	r28, 0x00	; 0
    3064:	e1 f3       	breq	.-8      	; 0x305e <main+0x10>
    3066:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_Z14serialEventRunv>
    306a:	f9 cf       	rjmp	.-14     	; 0x305e <main+0x10>

0000306c <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    306c:	1f 92       	push	r1
    306e:	0f 92       	push	r0
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	0f 92       	push	r0
    3074:	11 24       	eor	r1, r1
    3076:	2f 93       	push	r18
    3078:	3f 93       	push	r19
    307a:	8f 93       	push	r24
    307c:	9f 93       	push	r25
    307e:	af 93       	push	r26
    3080:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3082:	80 91 6c 08 	lds	r24, 0x086C
    3086:	90 91 6d 08 	lds	r25, 0x086D
    308a:	a0 91 6e 08 	lds	r26, 0x086E
    308e:	b0 91 6f 08 	lds	r27, 0x086F
	unsigned char f = timer0_fract;
    3092:	30 91 70 08 	lds	r19, 0x0870

	m += MILLIS_INC;
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	a1 1d       	adc	r26, r1
    309a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    309c:	23 2f       	mov	r18, r19
    309e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    30a0:	2d 37       	cpi	r18, 0x7D	; 125
    30a2:	20 f0       	brcs	.+8      	; 0x30ac <__vector_23+0x40>
		f -= FRACT_MAX;
    30a4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	a1 1d       	adc	r26, r1
    30aa:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    30ac:	20 93 70 08 	sts	0x0870, r18
	timer0_millis = m;
    30b0:	80 93 6c 08 	sts	0x086C, r24
    30b4:	90 93 6d 08 	sts	0x086D, r25
    30b8:	a0 93 6e 08 	sts	0x086E, r26
    30bc:	b0 93 6f 08 	sts	0x086F, r27
	timer0_overflow_count++;
    30c0:	80 91 68 08 	lds	r24, 0x0868
    30c4:	90 91 69 08 	lds	r25, 0x0869
    30c8:	a0 91 6a 08 	lds	r26, 0x086A
    30cc:	b0 91 6b 08 	lds	r27, 0x086B
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	a1 1d       	adc	r26, r1
    30d4:	b1 1d       	adc	r27, r1
    30d6:	80 93 68 08 	sts	0x0868, r24
    30da:	90 93 69 08 	sts	0x0869, r25
    30de:	a0 93 6a 08 	sts	0x086A, r26
    30e2:	b0 93 6b 08 	sts	0x086B, r27
}
    30e6:	bf 91       	pop	r27
    30e8:	af 91       	pop	r26
    30ea:	9f 91       	pop	r25
    30ec:	8f 91       	pop	r24
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	0f 90       	pop	r0
    30f8:	1f 90       	pop	r1
    30fa:	18 95       	reti

000030fc <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    30fc:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    30fe:	f8 94       	cli
	m = timer0_millis;
    3100:	20 91 6c 08 	lds	r18, 0x086C
    3104:	30 91 6d 08 	lds	r19, 0x086D
    3108:	40 91 6e 08 	lds	r20, 0x086E
    310c:	50 91 6f 08 	lds	r21, 0x086F
	SREG = oldSREG;
    3110:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    3112:	b9 01       	movw	r22, r18
    3114:	ca 01       	movw	r24, r20
    3116:	08 95       	ret

00003118 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    3118:	9b 01       	movw	r18, r22
    311a:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    311c:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    311e:	f8 94       	cli
	m = timer0_overflow_count;
    3120:	80 91 68 08 	lds	r24, 0x0868
    3124:	90 91 69 08 	lds	r25, 0x0869
    3128:	a0 91 6a 08 	lds	r26, 0x086A
    312c:	b0 91 6b 08 	lds	r27, 0x086B
#if defined(TCNT0)
	t = TCNT0;
    3130:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3132:	a8 9b       	sbis	0x15, 0	; 21
    3134:	05 c0       	rjmp	.+10     	; 0x3140 <delay+0x28>
    3136:	6f 3f       	cpi	r22, 0xFF	; 255
    3138:	19 f0       	breq	.+6      	; 0x3140 <delay+0x28>
		m++;
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	a1 1d       	adc	r26, r1
    313e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3140:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    3142:	ba 2f       	mov	r27, r26
    3144:	a9 2f       	mov	r26, r25
    3146:	98 2f       	mov	r25, r24
    3148:	88 27       	eor	r24, r24
    314a:	86 0f       	add	r24, r22
    314c:	91 1d       	adc	r25, r1
    314e:	a1 1d       	adc	r26, r1
    3150:	b1 1d       	adc	r27, r1
    3152:	62 e0       	ldi	r22, 0x02	; 2
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	aa 1f       	adc	r26, r26
    315a:	bb 1f       	adc	r27, r27
    315c:	6a 95       	dec	r22
    315e:	d1 f7       	brne	.-12     	; 0x3154 <delay+0x3c>
    3160:	bc 01       	movw	r22, r24
    3162:	2d c0       	rjmp	.+90     	; 0x31be <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3164:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    3166:	f8 94       	cli
	m = timer0_overflow_count;
    3168:	80 91 68 08 	lds	r24, 0x0868
    316c:	90 91 69 08 	lds	r25, 0x0869
    3170:	a0 91 6a 08 	lds	r26, 0x086A
    3174:	b0 91 6b 08 	lds	r27, 0x086B
#if defined(TCNT0)
	t = TCNT0;
    3178:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    317a:	a8 9b       	sbis	0x15, 0	; 21
    317c:	05 c0       	rjmp	.+10     	; 0x3188 <delay+0x70>
    317e:	ef 3f       	cpi	r30, 0xFF	; 255
    3180:	19 f0       	breq	.+6      	; 0x3188 <delay+0x70>
		m++;
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	a1 1d       	adc	r26, r1
    3186:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3188:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    318a:	ba 2f       	mov	r27, r26
    318c:	a9 2f       	mov	r26, r25
    318e:	98 2f       	mov	r25, r24
    3190:	88 27       	eor	r24, r24
    3192:	8e 0f       	add	r24, r30
    3194:	91 1d       	adc	r25, r1
    3196:	a1 1d       	adc	r26, r1
    3198:	b1 1d       	adc	r27, r1
    319a:	e2 e0       	ldi	r30, 0x02	; 2
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	aa 1f       	adc	r26, r26
    31a2:	bb 1f       	adc	r27, r27
    31a4:	ea 95       	dec	r30
    31a6:	d1 f7       	brne	.-12     	; 0x319c <delay+0x84>
    31a8:	86 1b       	sub	r24, r22
    31aa:	97 0b       	sbc	r25, r23
    31ac:	88 5e       	subi	r24, 0xE8	; 232
    31ae:	93 40       	sbci	r25, 0x03	; 3
    31b0:	c8 f2       	brcs	.-78     	; 0x3164 <delay+0x4c>
			ms--;
    31b2:	21 50       	subi	r18, 0x01	; 1
    31b4:	30 40       	sbci	r19, 0x00	; 0
    31b6:	40 40       	sbci	r20, 0x00	; 0
    31b8:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    31ba:	68 51       	subi	r22, 0x18	; 24
    31bc:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    31be:	21 15       	cp	r18, r1
    31c0:	31 05       	cpc	r19, r1
    31c2:	41 05       	cpc	r20, r1
    31c4:	51 05       	cpc	r21, r1
    31c6:	71 f6       	brne	.-100    	; 0x3164 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    31c8:	08 95       	ret

000031ca <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	39 f0       	breq	.+14     	; 0x31dc <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    31d6:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <delayMicroseconds+0xe>
    31dc:	08 95       	ret

000031de <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    31de:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    31e0:	84 b5       	in	r24, 0x24	; 36
    31e2:	82 60       	ori	r24, 0x02	; 2
    31e4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    31e6:	84 b5       	in	r24, 0x24	; 36
    31e8:	81 60       	ori	r24, 0x01	; 1
    31ea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    31ec:	85 b5       	in	r24, 0x25	; 37
    31ee:	82 60       	ori	r24, 0x02	; 2
    31f0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    31f2:	85 b5       	in	r24, 0x25	; 37
    31f4:	81 60       	ori	r24, 0x01	; 1
    31f6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    31f8:	ee e6       	ldi	r30, 0x6E	; 110
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	81 60       	ori	r24, 0x01	; 1
    3200:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3202:	e1 e8       	ldi	r30, 0x81	; 129
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3208:	80 81       	ld	r24, Z
    320a:	82 60       	ori	r24, 0x02	; 2
    320c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    320e:	80 81       	ld	r24, Z
    3210:	81 60       	ori	r24, 0x01	; 1
    3212:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3214:	e0 e8       	ldi	r30, 0x80	; 128
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	81 60       	ori	r24, 0x01	; 1
    321c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    321e:	e1 eb       	ldi	r30, 0xB1	; 177
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	84 60       	ori	r24, 0x04	; 4
    3226:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3228:	e0 eb       	ldi	r30, 0xB0	; 176
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	81 60       	ori	r24, 0x01	; 1
    3230:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3232:	e1 e9       	ldi	r30, 0x91	; 145
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	82 60       	ori	r24, 0x02	; 2
    323a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    323c:	80 81       	ld	r24, Z
    323e:	81 60       	ori	r24, 0x01	; 1
    3240:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3242:	e0 e9       	ldi	r30, 0x90	; 144
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	81 60       	ori	r24, 0x01	; 1
    324a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    324c:	e1 ea       	ldi	r30, 0xA1	; 161
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	82 60       	ori	r24, 0x02	; 2
    3254:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3256:	80 81       	ld	r24, Z
    3258:	81 60       	ori	r24, 0x01	; 1
    325a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    325c:	e0 ea       	ldi	r30, 0xA0	; 160
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	81 60       	ori	r24, 0x01	; 1
    3264:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    3266:	e1 e2       	ldi	r30, 0x21	; 33
    3268:	f1 e0       	ldi	r31, 0x01	; 1
    326a:	80 81       	ld	r24, Z
    326c:	82 60       	ori	r24, 0x02	; 2
    326e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3270:	80 81       	ld	r24, Z
    3272:	81 60       	ori	r24, 0x01	; 1
    3274:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    3276:	e0 e2       	ldi	r30, 0x20	; 32
    3278:	f1 e0       	ldi	r31, 0x01	; 1
    327a:	80 81       	ld	r24, Z
    327c:	81 60       	ori	r24, 0x01	; 1
    327e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3280:	ea e7       	ldi	r30, 0x7A	; 122
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	84 60       	ori	r24, 0x04	; 4
    3288:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    328a:	80 81       	ld	r24, Z
    328c:	82 60       	ori	r24, 0x02	; 2
    328e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3290:	80 81       	ld	r24, Z
    3292:	81 60       	ori	r24, 0x01	; 1
    3294:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3296:	80 81       	ld	r24, Z
    3298:	80 68       	ori	r24, 0x80	; 128
    329a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    329c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    32a0:	08 95       	ret

000032a2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    32a6:	48 2f       	mov	r20, r24
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	ca 01       	movw	r24, r20
    32ac:	85 5d       	subi	r24, 0xD5	; 213
    32ae:	9c 4f       	sbci	r25, 0xFC	; 252
    32b0:	fc 01       	movw	r30, r24
    32b2:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    32b4:	4b 51       	subi	r20, 0x1B	; 27
    32b6:	5d 4f       	sbci	r21, 0xFD	; 253
    32b8:	fa 01       	movw	r30, r20
    32ba:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    32bc:	88 23       	and	r24, r24
    32be:	69 f1       	breq	.+90     	; 0x331a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	fc 01       	movw	r30, r24
    32c8:	e9 56       	subi	r30, 0x69	; 105
    32ca:	fd 4f       	sbci	r31, 0xFD	; 253
    32cc:	a5 91       	lpm	r26, Z+
    32ce:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    32d0:	fc 01       	movw	r30, r24
    32d2:	ef 54       	subi	r30, 0x4F	; 79
    32d4:	fd 4f       	sbci	r31, 0xFD	; 253
    32d6:	c5 91       	lpm	r28, Z+
    32d8:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    32da:	66 23       	and	r22, r22
    32dc:	51 f4       	brne	.+20     	; 0x32f2 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    32de:	2f b7       	in	r18, 0x3f	; 63
                cli();
    32e0:	f8 94       	cli
		*reg &= ~bit;
    32e2:	8c 91       	ld	r24, X
    32e4:	93 2f       	mov	r25, r19
    32e6:	90 95       	com	r25
    32e8:	89 23       	and	r24, r25
    32ea:	8c 93       	st	X, r24
		*out &= ~bit;
    32ec:	88 81       	ld	r24, Y
    32ee:	89 23       	and	r24, r25
    32f0:	0b c0       	rjmp	.+22     	; 0x3308 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    32f2:	62 30       	cpi	r22, 0x02	; 2
    32f4:	61 f4       	brne	.+24     	; 0x330e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    32f6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    32f8:	f8 94       	cli
		*reg &= ~bit;
    32fa:	8c 91       	ld	r24, X
    32fc:	93 2f       	mov	r25, r19
    32fe:	90 95       	com	r25
    3300:	89 23       	and	r24, r25
    3302:	8c 93       	st	X, r24
		*out |= bit;
    3304:	88 81       	ld	r24, Y
    3306:	83 2b       	or	r24, r19
    3308:	88 83       	st	Y, r24
		SREG = oldSREG;
    330a:	2f bf       	out	0x3f, r18	; 63
    330c:	06 c0       	rjmp	.+12     	; 0x331a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    330e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3310:	f8 94       	cli
		*reg |= bit;
    3312:	8c 91       	ld	r24, X
    3314:	83 2b       	or	r24, r19
    3316:	8c 93       	st	X, r24
		SREG = oldSREG;
    3318:	9f bf       	out	0x3f, r25	; 63
	}
}
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	08 95       	ret

00003320 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3320:	89 30       	cpi	r24, 0x09	; 9
    3322:	09 f4       	brne	.+2      	; 0x3326 <turnOffPWM+0x6>
    3324:	49 c0       	rjmp	.+146    	; 0x33b8 <turnOffPWM+0x98>
    3326:	8a 30       	cpi	r24, 0x0A	; 10
    3328:	a0 f4       	brcc	.+40     	; 0x3352 <turnOffPWM+0x32>
    332a:	84 30       	cpi	r24, 0x04	; 4
    332c:	51 f1       	breq	.+84     	; 0x3382 <turnOffPWM+0x62>
    332e:	85 30       	cpi	r24, 0x05	; 5
    3330:	40 f4       	brcc	.+16     	; 0x3342 <turnOffPWM+0x22>
    3332:	82 30       	cpi	r24, 0x02	; 2
    3334:	79 f1       	breq	.+94     	; 0x3394 <turnOffPWM+0x74>
    3336:	83 30       	cpi	r24, 0x03	; 3
    3338:	00 f5       	brcc	.+64     	; 0x337a <turnOffPWM+0x5a>
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	09 f0       	breq	.+2      	; 0x3340 <turnOffPWM+0x20>
    333e:	63 c0       	rjmp	.+198    	; 0x3406 <turnOffPWM+0xe6>
    3340:	26 c0       	rjmp	.+76     	; 0x338e <turnOffPWM+0x6e>
    3342:	87 30       	cpi	r24, 0x07	; 7
    3344:	79 f1       	breq	.+94     	; 0x33a4 <turnOffPWM+0x84>
    3346:	88 30       	cpi	r24, 0x08	; 8
    3348:	98 f5       	brcc	.+102    	; 0x33b0 <turnOffPWM+0x90>
    334a:	86 30       	cpi	r24, 0x06	; 6
    334c:	09 f0       	breq	.+2      	; 0x3350 <turnOffPWM+0x30>
    334e:	5b c0       	rjmp	.+182    	; 0x3406 <turnOffPWM+0xe6>
    3350:	25 c0       	rjmp	.+74     	; 0x339c <turnOffPWM+0x7c>
    3352:	8d 30       	cpi	r24, 0x0D	; 13
    3354:	09 f4       	brne	.+2      	; 0x3358 <turnOffPWM+0x38>
    3356:	42 c0       	rjmp	.+132    	; 0x33dc <turnOffPWM+0xbc>
    3358:	8e 30       	cpi	r24, 0x0E	; 14
    335a:	28 f4       	brcc	.+10     	; 0x3366 <turnOffPWM+0x46>
    335c:	8b 30       	cpi	r24, 0x0B	; 11
    335e:	b1 f1       	breq	.+108    	; 0x33cc <turnOffPWM+0xac>
    3360:	8c 30       	cpi	r24, 0x0C	; 12
    3362:	c0 f5       	brcc	.+112    	; 0x33d4 <turnOffPWM+0xb4>
    3364:	2d c0       	rjmp	.+90     	; 0x33c0 <turnOffPWM+0xa0>
    3366:	80 31       	cpi	r24, 0x10	; 16
    3368:	09 f4       	brne	.+2      	; 0x336c <turnOffPWM+0x4c>
    336a:	42 c0       	rjmp	.+132    	; 0x33f0 <turnOffPWM+0xd0>
    336c:	81 31       	cpi	r24, 0x11	; 17
    336e:	09 f4       	brne	.+2      	; 0x3372 <turnOffPWM+0x52>
    3370:	45 c0       	rjmp	.+138    	; 0x33fc <turnOffPWM+0xdc>
    3372:	8f 30       	cpi	r24, 0x0F	; 15
    3374:	09 f0       	breq	.+2      	; 0x3378 <turnOffPWM+0x58>
    3376:	47 c0       	rjmp	.+142    	; 0x3406 <turnOffPWM+0xe6>
    3378:	37 c0       	rjmp	.+110    	; 0x33e8 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    337a:	80 91 80 00 	lds	r24, 0x0080
    337e:	8f 77       	andi	r24, 0x7F	; 127
    3380:	03 c0       	rjmp	.+6      	; 0x3388 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3382:	80 91 80 00 	lds	r24, 0x0080
    3386:	8f 7d       	andi	r24, 0xDF	; 223
    3388:	80 93 80 00 	sts	0x0080, r24
    338c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    338e:	84 b5       	in	r24, 0x24	; 36
    3390:	8f 77       	andi	r24, 0x7F	; 127
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3394:	84 b5       	in	r24, 0x24	; 36
    3396:	8f 7d       	andi	r24, 0xDF	; 223
    3398:	84 bd       	out	0x24, r24	; 36
    339a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    339c:	80 91 b0 00 	lds	r24, 0x00B0
    33a0:	8f 77       	andi	r24, 0x7F	; 127
    33a2:	03 c0       	rjmp	.+6      	; 0x33aa <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    33a4:	80 91 b0 00 	lds	r24, 0x00B0
    33a8:	8f 7d       	andi	r24, 0xDF	; 223
    33aa:	80 93 b0 00 	sts	0x00B0, r24
    33ae:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    33b0:	80 91 90 00 	lds	r24, 0x0090
    33b4:	8f 77       	andi	r24, 0x7F	; 127
    33b6:	07 c0       	rjmp	.+14     	; 0x33c6 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    33b8:	80 91 90 00 	lds	r24, 0x0090
    33bc:	8f 7d       	andi	r24, 0xDF	; 223
    33be:	03 c0       	rjmp	.+6      	; 0x33c6 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    33c0:	80 91 90 00 	lds	r24, 0x0090
    33c4:	87 7f       	andi	r24, 0xF7	; 247
    33c6:	80 93 90 00 	sts	0x0090, r24
    33ca:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    33cc:	80 91 a0 00 	lds	r24, 0x00A0
    33d0:	8f 77       	andi	r24, 0x7F	; 127
    33d2:	07 c0       	rjmp	.+14     	; 0x33e2 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    33d4:	80 91 a0 00 	lds	r24, 0x00A0
    33d8:	8f 7d       	andi	r24, 0xDF	; 223
    33da:	03 c0       	rjmp	.+6      	; 0x33e2 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    33dc:	80 91 a0 00 	lds	r24, 0x00A0
    33e0:	87 7f       	andi	r24, 0xF7	; 247
    33e2:	80 93 a0 00 	sts	0x00A0, r24
    33e6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    33e8:	80 91 20 01 	lds	r24, 0x0120
    33ec:	8f 77       	andi	r24, 0x7F	; 127
    33ee:	03 c0       	rjmp	.+6      	; 0x33f6 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    33f0:	80 91 20 01 	lds	r24, 0x0120
    33f4:	8f 7d       	andi	r24, 0xDF	; 223
    33f6:	80 93 20 01 	sts	0x0120, r24
    33fa:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    33fc:	80 91 20 01 	lds	r24, 0x0120
    3400:	87 7f       	andi	r24, 0xF7	; 247
    3402:	80 93 20 01 	sts	0x0120, r24
    3406:	08 95       	ret

00003408 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3408:	ff 92       	push	r15
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    3410:	48 2f       	mov	r20, r24
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	ca 01       	movw	r24, r20
    3416:	8f 58       	subi	r24, 0x8F	; 143
    3418:	9c 4f       	sbci	r25, 0xFC	; 252
    341a:	fc 01       	movw	r30, r24
    341c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    341e:	ca 01       	movw	r24, r20
    3420:	85 5d       	subi	r24, 0xD5	; 213
    3422:	9c 4f       	sbci	r25, 0xFC	; 252
    3424:	fc 01       	movw	r30, r24
    3426:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    3428:	4b 51       	subi	r20, 0x1B	; 27
    342a:	5d 4f       	sbci	r21, 0xFD	; 253
    342c:	fa 01       	movw	r30, r20
    342e:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3430:	00 23       	and	r16, r16
    3432:	c9 f0       	breq	.+50     	; 0x3466 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3434:	22 23       	and	r18, r18
    3436:	19 f0       	breq	.+6      	; 0x343e <digitalWrite+0x36>
    3438:	82 2f       	mov	r24, r18
    343a:	0e 94 90 19 	call	0x3320	; 0x3320 <turnOffPWM>

	out = portOutputRegister(port);
    343e:	e0 2f       	mov	r30, r16
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	ee 0f       	add	r30, r30
    3444:	ff 1f       	adc	r31, r31
    3446:	ef 54       	subi	r30, 0x4F	; 79
    3448:	fd 4f       	sbci	r31, 0xFD	; 253
    344a:	a5 91       	lpm	r26, Z+
    344c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    344e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3450:	f8 94       	cli

	if (val == LOW) {
    3452:	ff 20       	and	r15, r15
    3454:	21 f4       	brne	.+8      	; 0x345e <digitalWrite+0x56>
		*out &= ~bit;
    3456:	8c 91       	ld	r24, X
    3458:	10 95       	com	r17
    345a:	81 23       	and	r24, r17
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <digitalWrite+0x5a>
	} else {
		*out |= bit;
    345e:	8c 91       	ld	r24, X
    3460:	81 2b       	or	r24, r17
    3462:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    3464:	9f bf       	out	0x3f, r25	; 63
}
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ff 90       	pop	r15
    346c:	08 95       	ret

0000346e <__mulsi3>:
    346e:	62 9f       	mul	r22, r18
    3470:	d0 01       	movw	r26, r0
    3472:	73 9f       	mul	r23, r19
    3474:	f0 01       	movw	r30, r0
    3476:	82 9f       	mul	r24, r18
    3478:	e0 0d       	add	r30, r0
    347a:	f1 1d       	adc	r31, r1
    347c:	64 9f       	mul	r22, r20
    347e:	e0 0d       	add	r30, r0
    3480:	f1 1d       	adc	r31, r1
    3482:	92 9f       	mul	r25, r18
    3484:	f0 0d       	add	r31, r0
    3486:	83 9f       	mul	r24, r19
    3488:	f0 0d       	add	r31, r0
    348a:	74 9f       	mul	r23, r20
    348c:	f0 0d       	add	r31, r0
    348e:	65 9f       	mul	r22, r21
    3490:	f0 0d       	add	r31, r0
    3492:	99 27       	eor	r25, r25
    3494:	72 9f       	mul	r23, r18
    3496:	b0 0d       	add	r27, r0
    3498:	e1 1d       	adc	r30, r1
    349a:	f9 1f       	adc	r31, r25
    349c:	63 9f       	mul	r22, r19
    349e:	b0 0d       	add	r27, r0
    34a0:	e1 1d       	adc	r30, r1
    34a2:	f9 1f       	adc	r31, r25
    34a4:	bd 01       	movw	r22, r26
    34a6:	cf 01       	movw	r24, r30
    34a8:	11 24       	eor	r1, r1
    34aa:	08 95       	ret

000034ac <__udivmodsi4>:
    34ac:	a1 e2       	ldi	r26, 0x21	; 33
    34ae:	1a 2e       	mov	r1, r26
    34b0:	aa 1b       	sub	r26, r26
    34b2:	bb 1b       	sub	r27, r27
    34b4:	fd 01       	movw	r30, r26
    34b6:	0d c0       	rjmp	.+26     	; 0x34d2 <__udivmodsi4_ep>

000034b8 <__udivmodsi4_loop>:
    34b8:	aa 1f       	adc	r26, r26
    34ba:	bb 1f       	adc	r27, r27
    34bc:	ee 1f       	adc	r30, r30
    34be:	ff 1f       	adc	r31, r31
    34c0:	a2 17       	cp	r26, r18
    34c2:	b3 07       	cpc	r27, r19
    34c4:	e4 07       	cpc	r30, r20
    34c6:	f5 07       	cpc	r31, r21
    34c8:	20 f0       	brcs	.+8      	; 0x34d2 <__udivmodsi4_ep>
    34ca:	a2 1b       	sub	r26, r18
    34cc:	b3 0b       	sbc	r27, r19
    34ce:	e4 0b       	sbc	r30, r20
    34d0:	f5 0b       	sbc	r31, r21

000034d2 <__udivmodsi4_ep>:
    34d2:	66 1f       	adc	r22, r22
    34d4:	77 1f       	adc	r23, r23
    34d6:	88 1f       	adc	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	1a 94       	dec	r1
    34dc:	69 f7       	brne	.-38     	; 0x34b8 <__udivmodsi4_loop>
    34de:	60 95       	com	r22
    34e0:	70 95       	com	r23
    34e2:	80 95       	com	r24
    34e4:	90 95       	com	r25
    34e6:	9b 01       	movw	r18, r22
    34e8:	ac 01       	movw	r20, r24
    34ea:	bd 01       	movw	r22, r26
    34ec:	cf 01       	movw	r24, r30
    34ee:	08 95       	ret

000034f0 <__divmodsi4>:
    34f0:	97 fb       	bst	r25, 7
    34f2:	09 2e       	mov	r0, r25
    34f4:	05 26       	eor	r0, r21
    34f6:	0e d0       	rcall	.+28     	; 0x3514 <__divmodsi4_neg1>
    34f8:	57 fd       	sbrc	r21, 7
    34fa:	04 d0       	rcall	.+8      	; 0x3504 <__divmodsi4_neg2>
    34fc:	d7 df       	rcall	.-82     	; 0x34ac <__udivmodsi4>
    34fe:	0a d0       	rcall	.+20     	; 0x3514 <__divmodsi4_neg1>
    3500:	00 1c       	adc	r0, r0
    3502:	38 f4       	brcc	.+14     	; 0x3512 <__divmodsi4_exit>

00003504 <__divmodsi4_neg2>:
    3504:	50 95       	com	r21
    3506:	40 95       	com	r20
    3508:	30 95       	com	r19
    350a:	21 95       	neg	r18
    350c:	3f 4f       	sbci	r19, 0xFF	; 255
    350e:	4f 4f       	sbci	r20, 0xFF	; 255
    3510:	5f 4f       	sbci	r21, 0xFF	; 255

00003512 <__divmodsi4_exit>:
    3512:	08 95       	ret

00003514 <__divmodsi4_neg1>:
    3514:	f6 f7       	brtc	.-4      	; 0x3512 <__divmodsi4_exit>
    3516:	90 95       	com	r25
    3518:	80 95       	com	r24
    351a:	70 95       	com	r23
    351c:	61 95       	neg	r22
    351e:	7f 4f       	sbci	r23, 0xFF	; 255
    3520:	8f 4f       	sbci	r24, 0xFF	; 255
    3522:	9f 4f       	sbci	r25, 0xFF	; 255
    3524:	08 95       	ret

00003526 <__tablejump2__>:
    3526:	ee 0f       	add	r30, r30
    3528:	ff 1f       	adc	r31, r31

0000352a <__tablejump__>:
    352a:	05 90       	lpm	r0, Z+
    352c:	f4 91       	lpm	r31, Z+
    352e:	e0 2d       	mov	r30, r0
    3530:	19 94       	eijmp

00003532 <_exit>:
    3532:	f8 94       	cli

00003534 <__stop_program>:
    3534:	ff cf       	rjmp	.-2      	; 0x3534 <__stop_program>
