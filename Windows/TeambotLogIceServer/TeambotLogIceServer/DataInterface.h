// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DataInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __D__NVPACK_tum_teambots_Windows_TeambotLogIceServer_TeambotLogIceServer_DataInterface_h__
#define __D__NVPACK_tum_teambots_Windows_TeambotLogIceServer_TeambotLogIceServer_DataInterface_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Communication
{

class ByteData;

class FloatData;

class DataInterface;

}

}

namespace Communication
{

class ByteData;
bool operator==(const ByteData&, const ByteData&);
bool operator<(const ByteData&, const ByteData&);

class FloatData;
bool operator==(const FloatData&, const FloatData&);
bool operator<(const FloatData&, const FloatData&);

class DataInterface;
bool operator==(const DataInterface&, const DataInterface&);
bool operator<(const DataInterface&, const DataInterface&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Communication::ByteData*);
::IceProxy::Ice::Object* upCast(::IceProxy::Communication::ByteData*);

::Ice::Object* upCast(::Communication::FloatData*);
::IceProxy::Ice::Object* upCast(::IceProxy::Communication::FloatData*);

::Ice::Object* upCast(::Communication::DataInterface*);
::IceProxy::Ice::Object* upCast(::IceProxy::Communication::DataInterface*);

}

namespace Communication
{

typedef ::IceInternal::Handle< ::Communication::ByteData> ByteDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Communication::ByteData> ByteDataPrx;

void __read(::IceInternal::BasicStream*, ByteDataPrx&);
void __patch__ByteDataPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Communication::FloatData> FloatDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Communication::FloatData> FloatDataPrx;

void __read(::IceInternal::BasicStream*, FloatDataPrx&);
void __patch__FloatDataPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Communication::DataInterface> DataInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Communication::DataInterface> DataInterfacePrx;

void __read(::IceInternal::BasicStream*, DataInterfacePrx&);
void __patch__DataInterfacePtr(void*, ::Ice::ObjectPtr&);

}

namespace Communication
{

enum DataTypeIce
{
    PICTURE,
    DEBUG,
    INFO,
    LOGGERINFO,
    ACCELEROMETER,
    GYROSCOPE,
    UNSPECIFIED
};

void __write(::IceInternal::BasicStream*, DataTypeIce);
void __read(::IceInternal::BasicStream*, DataTypeIce&);

typedef ::std::vector< ::Ice::Byte> byteSequence;

typedef ::std::vector< ::Ice::Float> floatSequence;

}

namespace Communication
{

class Callback_DataInterface_sendByteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataInterface_sendByteData_Base> Callback_DataInterface_sendByteDataPtr;

class Callback_DataInterface_sendFloatData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataInterface_sendFloatData_Base> Callback_DataInterface_sendFloatDataPtr;

}

namespace IceProxy
{

namespace Communication
{

class ByteData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ByteData> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ByteData> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ByteData*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ByteData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FloatData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<FloatData> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<FloatData> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<FloatData*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<FloatData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DataInterface : virtual public ::IceProxy::Ice::Object
{
public:

    void sendByteData(const ::Communication::ByteDataPtr& data)
    {
        sendByteData(data, 0);
    }
    void sendByteData(const ::Communication::ByteDataPtr& data, const ::Ice::Context& __ctx)
    {
        sendByteData(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr& data)
    {
        return begin_sendByteData(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr& data, const ::Ice::Context& __ctx)
    {
        return begin_sendByteData(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteData(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr& data, const ::Communication::Callback_DataInterface_sendByteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr& data, const ::Ice::Context& __ctx, const ::Communication::Callback_DataInterface_sendByteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteData(data, &__ctx, __del, __cookie);
    }

    void end_sendByteData(const ::Ice::AsyncResultPtr&);
    
private:

    void sendByteData(const ::Communication::ByteDataPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendByteData(const ::Communication::ByteDataPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendFloatData(const ::Communication::FloatDataPtr& data)
    {
        sendFloatData(data, 0);
    }
    void sendFloatData(const ::Communication::FloatDataPtr& data, const ::Ice::Context& __ctx)
    {
        sendFloatData(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr& data)
    {
        return begin_sendFloatData(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr& data, const ::Ice::Context& __ctx)
    {
        return begin_sendFloatData(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFloatData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFloatData(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr& data, const ::Communication::Callback_DataInterface_sendFloatDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFloatData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr& data, const ::Ice::Context& __ctx, const ::Communication::Callback_DataInterface_sendFloatDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFloatData(data, &__ctx, __del, __cookie);
    }

    void end_sendFloatData(const ::Ice::AsyncResultPtr&);
    
private:

    void sendFloatData(const ::Communication::FloatDataPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendFloatData(const ::Communication::FloatDataPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DataInterface> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DataInterface> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DataInterface*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<DataInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Communication
{

class ByteData : virtual public ::IceDelegate::Ice::Object
{
public:
};

class FloatData : virtual public ::IceDelegate::Ice::Object
{
public:
};

class DataInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void sendByteData(const ::Communication::ByteDataPtr&, const ::Ice::Context*) = 0;

    virtual void sendFloatData(const ::Communication::FloatDataPtr&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Communication
{

class ByteData : virtual public ::IceDelegate::Communication::ByteData,
                 virtual public ::IceDelegateM::Ice::Object
{
public:
};

class FloatData : virtual public ::IceDelegate::Communication::FloatData,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class DataInterface : virtual public ::IceDelegate::Communication::DataInterface,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void sendByteData(const ::Communication::ByteDataPtr&, const ::Ice::Context*);

    virtual void sendFloatData(const ::Communication::FloatDataPtr&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Communication
{

class ByteData : virtual public ::IceDelegate::Communication::ByteData,
                 virtual public ::IceDelegateD::Ice::Object
{
public:
};

class FloatData : virtual public ::IceDelegate::Communication::FloatData,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class DataInterface : virtual public ::IceDelegate::Communication::DataInterface,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void sendByteData(const ::Communication::ByteDataPtr&, const ::Ice::Context*);

    virtual void sendFloatData(const ::Communication::FloatDataPtr&, const ::Ice::Context*);
};

}

}

namespace Communication
{

class ByteData : virtual public ::Ice::Object
{
public:

    typedef ByteDataPrx ProxyType;
    typedef ByteDataPtr PointerType;
    
    ByteData() {}
    ByteData(::Communication::DataTypeIce, ::Ice::Long, const ::Communication::byteSequence&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~ByteData() {}

    friend class ByteData__staticInit;

public:

    ::Communication::DataTypeIce type;

    ::Ice::Long timeStamp;

    ::Communication::byteSequence byteArrayData;
};

class ByteData__staticInit
{
public:

    ::Communication::ByteData _init;
};

static ByteData__staticInit _ByteData_init;

inline bool operator==(const ByteData& l, const ByteData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ByteData& l, const ByteData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FloatData : virtual public ::Ice::Object
{
public:

    typedef FloatDataPrx ProxyType;
    typedef FloatDataPtr PointerType;
    
    FloatData() {}
    FloatData(::Communication::DataTypeIce, ::Ice::Long, const ::Communication::floatSequence&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~FloatData() {}

public:

    ::Communication::DataTypeIce type;

    ::Ice::Long timeStamp;

    ::Communication::floatSequence floatArrayData;
};

inline bool operator==(const FloatData& l, const FloatData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FloatData& l, const FloatData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DataInterface : virtual public ::Ice::Object
{
public:

    typedef DataInterfacePrx ProxyType;
    typedef DataInterfacePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendByteData(const ::Communication::ByteDataPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendByteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendFloatData(const ::Communication::FloatDataPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendFloatData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const DataInterface& l, const DataInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DataInterface& l, const DataInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Communication
{

template<class T>
class CallbackNC_DataInterface_sendByteData : public Callback_DataInterface_sendByteData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DataInterface_sendByteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendByteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendByteData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendByteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendByteData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataInterface_sendByteData : public Callback_DataInterface_sendByteData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DataInterface_sendByteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendByteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendByteData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendByteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataInterface_sendByteDataPtr
newCallback_DataInterface_sendByteData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendByteData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DataInterface_sendFloatData : public Callback_DataInterface_sendFloatData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DataInterface_sendFloatData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendFloatData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendFloatData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendFloatData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataInterface_sendFloatData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataInterface_sendFloatData : public Callback_DataInterface_sendFloatData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DataInterface_sendFloatData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendFloatData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendFloatData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendFloatData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataInterface_sendFloatDataPtr
newCallback_DataInterface_sendFloatData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataInterface_sendFloatData<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
