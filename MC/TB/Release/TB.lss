
TB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800200  00002dfe  00002e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000055a  008002fe  008002fe  00002f90  2**0
                  ALLOC
  3 .debug_aranges 000007b8  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000133d  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b297  00000000  00000000  00004a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001da8  00000000  00000000  0000fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004ba4  00000000  00000000  00011ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000dd0  00000000  00000000  00016668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000025df  00000000  00000000  00017438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004d95  00000000  00000000  00019a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000768  00000000  00000000  0001e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	for (int i = 0; i < size; i++) {
		sendBuf[putPointer++] = data[i];
		++amountSendBytes;
	}
	return true;
}
       0:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__ctors_end>
/* does nothing, returns TRUE. Left for compatibility with old sketches               */
/* will be deleted eventually                                           */
///* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
///* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
///* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
boolean MAX3421E::vbusPwr ( boolean action )
       4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    dev0ep.rcvToggle = bmRCVTOG0;
}
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}
       c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      18:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      1c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      20:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      24:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      28:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      30:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      34:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      38:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      3c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      40:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      44:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      50:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      54:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      58:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      5c:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__vector_23>
      60:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      64:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_25>
      68:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__vector_26>
      6c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      70:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      74:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      78:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      7c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      80:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      84:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      88:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      8c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      90:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_36>
      94:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__vector_37>
      98:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      9c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      a8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      ac:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      b8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      bc:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      c8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      cc:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__vector_51>
      d0:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_52>
      d4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      d8:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__vector_54>
      dc:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_55>
      e0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

000000e4 <_ZZN16AndroidAccessory11isConnectedEvE3__c_4>:
      e4:	64 69 73 63 6f 6e 6e 65 63 74 65 64 20 75 73 62     disconnected usb
      f4:	20 64 65 76 69 63 65 0a 00                           device..

000000fd <_ZZN16AndroidAccessory11isConnectedEvE3__c_3>:
      fd:	66 6f 75 6e 64 20 70 6f 73 73 69 62 6c 65 20 64     found possible d
     10d:	65 76 69 63 65 2e 0a 20 73 77 69 74 63 68 69 6e     evice.. switchin
     11d:	67 20 74 6f 20 73 65 72 69 61 6c 20 6d 6f 64 65     g to serial mode
     12d:	0a 00                                               ..

0000012f <_ZZN16AndroidAccessory11isConnectedEvE3__c_2>:
     12f:	66 6f 75 6e 64 20 61 6e 64 72 6f 69 64 20 61 63     found android ac
     13f:	65 73 73 6f 72 79 20 64 65 76 69 63 65 0a 00        essory device..

0000014e <_ZZN16AndroidAccessory11isConnectedEvE3__c_1>:
     14e:	0a 44 65 76 69 63 65 20 64 65 73 63 72 69 70 74     .Device descript
     15e:	6f 72 20 63 61 6e 6e 6f 74 20 62 65 20 72 65 74     or cannot be ret
     16e:	72 69 65 76 65 64 2e 20 54 72 79 69 6e 67 20 61     rieved. Trying a
     17e:	67 61 69 6e 0a 00                                   gain..

00000184 <_ZZN16AndroidAccessory11isConnectedEvE3__c_0>:
     184:	52 65 71 75 65 73 74 69 6e 67 20 64 65 76 69 63     Requesting devic
     194:	65 20 64 65 73 63 72 69 70 74 6f 72 2e 0a 00        e descriptor...

000001a3 <_ZZN16AndroidAccessory11isConnectedEvE3__c>:
     1a3:	0a 44 65 76 69 63 65 20 61 64 64 72 65 73 73 65     .Device addresse
     1b3:	64 2e 2e 2e 20 00                                   d... .

000001b9 <_ZZN16AndroidAccessory16configureAndroidEvE3__c>:
     1b9:	43 61 6e 27 74 20 73 65 74 20 63 6f 6e 66 69 67     Can't set config
     1c9:	20 74 6f 20 31 0a 00                                 to 1..

000001d0 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_5>:
     1d0:	63 61 6e 27 74 20 66 69 6e 64 20 61 63 63 65 73     can't find acces
     1e0:	73 6f 72 79 20 65 6e 64 70 6f 69 6e 74 73 00        sory endpoints.

000001ef <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_4>:
     1ef:	75 6e 6b 6f 77 6e 20 64 65 73 63 20 74 79 70 65     unkown desc type
     1ff:	20 00                                                .

00000201 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_3>:
     201:	69 6e 74 65 72 66 61 63 65 20 64 65 73 63 0a 00     interface desc..

00000211 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_2>:
     211:	63 6f 6e 66 69 67 20 64 65 73 63 0a 00              config desc..

0000021e <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_1>:
     21e:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     22e:	20 64 65 73 63 72 69 70 74 6f 72 0a 00               descriptor..

0000023b <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c_0>:
     23b:	63 6f 6e 66 69 67 20 64 65 73 63 72 69 70 74 6f     config descripto
     24b:	72 20 74 6f 6f 20 6c 61 72 67 65 0a 00              r too large..

00000258 <_ZZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_E3__c>:
     258:	43 61 6e 27 74 20 67 65 74 20 63 6f 6e 66 69 67     Can't get config
     268:	20 64 65 73 63 72 69 70 74 6f 72 20 6c 65 6e 67      descriptor leng
     278:	74 68 0a 00                                         th..

0000027c <_ZZN16AndroidAccessory12switchDeviceEhE3__c_0>:
     27c:	0a 00                                               ..

0000027e <_ZZN16AndroidAccessory12switchDeviceEhE3__c>:
     27e:	64 65 76 69 63 65 20 73 75 70 70 6f 72 74 73 20     device supports 
     28e:	70 72 6f 74 63 6f 6c 20 00                          protcol .

00000297 <port_to_mode_PGM>:
     297:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     2a7:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002b1 <port_to_output_PGM>:
     2b1:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2c1:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002cb <port_to_input_PGM>:
     2cb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2db:	00 01 00 00 03 01 06 01 09 01                       ..........

000002e5 <digital_pin_to_port_PGM>:
     2e5:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2f5:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     305:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     315:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     325:	0b 0b 0b 0b 0b 0b                                   ......

0000032b <digital_pin_to_bit_mask_PGM>:
     32b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     33b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     34b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     35b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     36b:	04 08 10 20 40 80                                   ... @.

00000371 <digital_pin_to_timer_PGM>:
     371:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     39d:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b8 <__ctors_start>:
     3b8:	77 02       	muls	r23, r23
     3ba:	f1 11       	cpse	r31, r1

000003bc <__ctors_end>:
     3bc:	11 24       	eor	r1, r1
     3be:	1f be       	out	0x3f, r1	; 63
     3c0:	cf ef       	ldi	r28, 0xFF	; 255
     3c2:	d1 e2       	ldi	r29, 0x21	; 33
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	0c bf       	out	0x3c, r16	; 60

000003cc <__do_copy_data>:
     3cc:	12 e0       	ldi	r17, 0x02	; 2
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b2 e0       	ldi	r27, 0x02	; 2
     3d2:	ee ef       	ldi	r30, 0xFE	; 254
     3d4:	fd e2       	ldi	r31, 0x2D	; 45
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	0b bf       	out	0x3b, r16	; 59
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <__do_copy_data+0x14>
     3dc:	07 90       	elpm	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	ae 3f       	cpi	r26, 0xFE	; 254
     3e2:	b1 07       	cpc	r27, r17
     3e4:	d9 f7       	brne	.-10     	; 0x3dc <__do_copy_data+0x10>
     3e6:	1b be       	out	0x3b, r1	; 59

000003e8 <__do_clear_bss>:
     3e8:	18 e0       	ldi	r17, 0x08	; 8
     3ea:	ae ef       	ldi	r26, 0xFE	; 254
     3ec:	b2 e0       	ldi	r27, 0x02	; 2
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <.do_clear_bss_start>

000003f0 <.do_clear_bss_loop>:
     3f0:	1d 92       	st	X+, r1

000003f2 <.do_clear_bss_start>:
     3f2:	a8 35       	cpi	r26, 0x58	; 88
     3f4:	b1 07       	cpc	r27, r17
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <.do_clear_bss_loop>

000003f8 <__do_global_ctors>:
     3f8:	13 e0       	ldi	r17, 0x03	; 3
     3fa:	cc eb       	ldi	r28, 0xBC	; 188
     3fc:	d3 e0       	ldi	r29, 0x03	; 3
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <.do_global_ctors_start>

00000400 <.do_global_ctors_loop>:
     400:	22 97       	sbiw	r28, 0x02	; 2
     402:	fe 01       	movw	r30, r28
     404:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__tablejump__>

00000408 <.do_global_ctors_start>:
     408:	c8 3b       	cpi	r28, 0xB8	; 184
     40a:	d1 07       	cpc	r29, r17
     40c:	c9 f7       	brne	.-14     	; 0x400 <.do_global_ctors_loop>
     40e:	0e 94 b0 14 	call	0x2960	; 0x2960 <main>
     412:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <_exit>

00000416 <__bad_interrupt>:
     416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041a <_ZN3Usb8sizeDataEv>:
bool Usb::isConnected() {
	return android.isConnected();
}

int Usb::sizeData() {
	return android.available();
     41a:	8e 5f       	subi	r24, 0xFE	; 254
     41c:	9e 4f       	sbci	r25, 0xFE	; 254
     41e:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN16AndroidAccessory9availableEv>
}
     422:	08 95       	ret

00000424 <_ZN3Usb11isConnectedEv>:
	}
	return true;
}

bool Usb::isConnected() {
	return android.isConnected();
     424:	8e 5f       	subi	r24, 0xFE	; 254
     426:	9e 4f       	sbci	r25, 0xFE	; 254
     428:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN16AndroidAccessory11isConnectedEv>
}
     42c:	08 95       	ret

0000042e <_ZN3Usb9reconnectEv>:
		amountSendBytes = 0;
	}
}

void Usb::reconnect() {
	android.powerOn();
     42e:	8e 5f       	subi	r24, 0xFE	; 254
     430:	9e 4f       	sbci	r25, 0xFE	; 254
     432:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN16AndroidAccessory7powerOnEv>
}
     436:	08 95       	ret

00000438 <_ZN3Usb4sendEv>:

u_char Usb::read() {
	return android.read();
}

void Usb::send() {
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
	if (amountSendBytes > 0) {
     440:	88 81       	ld	r24, Y
     442:	88 23       	and	r24, r24
     444:	31 f1       	breq	.+76     	; 0x492 <_ZN3Usb4sendEv+0x5a>
		if (putPointer < sendOffset) //buffer overflow
     446:	69 81       	ldd	r22, Y+1	; 0x01
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	86 17       	cp	r24, r22
     44c:	90 f4       	brcc	.+36     	; 0x472 <_ZN3Usb4sendEv+0x3a>
				{
			byte sendBytes = 255 - sendOffset;
     44e:	16 2f       	mov	r17, r22
     450:	10 95       	com	r17
			android.write(&sendBuf[sendOffset], sendBytes);
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	6d 5f       	subi	r22, 0xFD	; 253
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	6c 0f       	add	r22, r28
     45a:	7d 1f       	adc	r23, r29
     45c:	ce 01       	movw	r24, r28
     45e:	8e 5f       	subi	r24, 0xFE	; 254
     460:	9e 4f       	sbci	r25, 0xFE	; 254
     462:	41 2f       	mov	r20, r17
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN16AndroidAccessory5writeEPhj>
			sendOffset = 0;
     46a:	19 82       	std	Y+1, r1	; 0x01
			amountSendBytes -= sendBytes;
     46c:	88 81       	ld	r24, Y
     46e:	81 1b       	sub	r24, r17
     470:	88 83       	st	Y, r24
		}
		android.write(&sendBuf[sendOffset], amountSendBytes);
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	6d 5f       	subi	r22, 0xFD	; 253
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	6c 0f       	add	r22, r28
     47c:	7d 1f       	adc	r23, r29
     47e:	48 81       	ld	r20, Y
     480:	ce 01       	movw	r24, r28
     482:	8e 5f       	subi	r24, 0xFE	; 254
     484:	9e 4f       	sbci	r25, 0xFE	; 254
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN16AndroidAccessory5writeEPhj>
		sendOffset = putPointer;
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
		amountSendBytes = 0;
     490:	18 82       	st	Y, r1
	}
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	08 95       	ret

0000049a <_ZN3Usb4readEv>:
				APPLICATION_NAME, ACCESSORY_NAME, VERSIONN_NUMBER, URL,
				SERIAL_NUMBER) {
}

u_char Usb::read() {
	return android.read();
     49a:	8e 5f       	subi	r24, 0xFE	; 254
     49c:	9e 4f       	sbci	r25, 0xFE	; 254
     49e:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN16AndroidAccessory4readEv>
}
     4a2:	08 95       	ret

000004a4 <_ZN3UsbC1Ev>:
#define VERSIONN_NUMBER "1.0"
#define SERIAL_NUMBER "1"
#define URL "http://labs.arduino.cc/adk/ADK_count" // the URL of your app online
Usb usb;

Usb::Usb() :
     4a4:	cf 92       	push	r12
     4a6:	df 92       	push	r13
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	fc 01       	movw	r30, r24
		amountSendBytes(0), sendOffset(0), putPointer(0), android(COMPANY_NAME,
				APPLICATION_NAME, ACCESSORY_NAME, VERSIONN_NUMBER, URL,
				SERIAL_NUMBER) {
     4b2:	10 82       	st	Z, r1
     4b4:	11 82       	std	Z+1, r1	; 0x01
     4b6:	12 82       	std	Z+2, r1	; 0x02
     4b8:	8e 5f       	subi	r24, 0xFE	; 254
     4ba:	9e 4f       	sbci	r25, 0xFE	; 254
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	4b e0       	ldi	r20, 0x0B	; 11
     4c2:	52 e0       	ldi	r21, 0x02	; 2
     4c4:	2b e1       	ldi	r18, 0x1B	; 27
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	04 e2       	ldi	r16, 0x24	; 36
     4ca:	12 e0       	ldi	r17, 0x02	; 2
     4cc:	f8 e2       	ldi	r31, 0x28	; 40
     4ce:	ef 2e       	mov	r14, r31
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	ff 2e       	mov	r15, r31
     4d4:	ed e4       	ldi	r30, 0x4D	; 77
     4d6:	ce 2e       	mov	r12, r30
     4d8:	e2 e0       	ldi	r30, 0x02	; 2
     4da:	de 2e       	mov	r13, r30
     4dc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>
}
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	df 90       	pop	r13
     4ea:	cf 90       	pop	r12
     4ec:	08 95       	ret

000004ee <_GLOBAL__I_usb>:

// make up anything you want for these
#define VERSIONN_NUMBER "1.0"
#define SERIAL_NUMBER "1"
#define URL "http://labs.arduino.cc/adk/ADK_count" // the URL of your app online
Usb usb;
     4ee:	8e ef       	ldi	r24, 0xFE	; 254
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN3UsbC1Ev>
	return android.isConnected();
}

int Usb::sizeData() {
	return android.available();
}
     4f6:	08 95       	ret

000004f8 <_ZN12StateMachine4InitEv>:
#include "common/StateMachine.h"
#include "network/Usb.h"

StateMachine stateMachine; //Global StateMachine Object

void StateMachine::Init() {
     4f8:	fc 01       	movw	r30, r24
	currentState = PhoneDisconnected;
     4fa:	8b e2       	ldi	r24, 0x2B	; 43
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
}
     502:	08 95       	ret

00000504 <_ZN12StateMachine12requireStateE7TBState>:
		break;
	}
	this->postHandle();
}

TBState StateMachine::requireState(TBState state) {
     504:	fc 01       	movw	r30, r24
	switch (currentState) {
     506:	20 81       	ld	r18, Z
     508:	31 81       	ldd	r19, Z+1	; 0x01
     50a:	2b 32       	cpi	r18, 0x2B	; 43
     50c:	31 05       	cpc	r19, r1
     50e:	69 f0       	breq	.+26     	; 0x52a <_ZN12StateMachine12requireStateE7TBState+0x26>
     510:	2c 32       	cpi	r18, 0x2C	; 44
     512:	31 05       	cpc	r19, r1
     514:	89 f4       	brne	.+34     	; 0x538 <_ZN12StateMachine12requireStateE7TBState+0x34>
		return currentState;
	case PositionReached:
		return currentState;

	case PhoneConnect: {
		switch (state) {
     516:	61 15       	cp	r22, r1
     518:	71 05       	cpc	r23, r1
     51a:	21 f0       	breq	.+8      	; 0x524 <_ZN12StateMachine12requireStateE7TBState+0x20>
     51c:	6b 32       	cpi	r22, 0x2B	; 43
     51e:	71 05       	cpc	r23, r1
     520:	49 f4       	brne	.+18     	; 0x534 <_ZN12StateMachine12requireStateE7TBState+0x30>
     522:	06 c0       	rjmp	.+12     	; 0x530 <_ZN12StateMachine12requireStateE7TBState+0x2c>
		case Idle:
			currentState = Idle;
     524:	11 82       	std	Z+1, r1	; 0x01
     526:	10 82       	st	Z, r1
     528:	05 c0       	rjmp	.+10     	; 0x534 <_ZN12StateMachine12requireStateE7TBState+0x30>
		}
		return currentState;
	}

	case PhoneDisconnected: {
		switch (state) {
     52a:	6c 32       	cpi	r22, 0x2C	; 44
     52c:	71 05       	cpc	r23, r1
     52e:	11 f4       	brne	.+4      	; 0x534 <_ZN12StateMachine12requireStateE7TBState+0x30>
		case PhoneConnect:
			currentState = PhoneConnect;
     530:	71 83       	std	Z+1, r23	; 0x01
     532:	60 83       	st	Z, r22
			break;
		default:
			//TODO: Log Error
			break;
		}
		return currentState;
     534:	20 81       	ld	r18, Z
     536:	31 81       	ldd	r19, Z+1	; 0x01
	case Error:
		return currentState;
	default:
		return currentState;
	}
}
     538:	c9 01       	movw	r24, r18
     53a:	08 95       	ret

0000053c <_ZN12StateMachine10postHandleEv>:
		else
		   digitalWrite(LED_PIN_13, LOW);
	}
}

void StateMachine::postHandle() {
     53c:	fc 01       	movw	r30, r24
	if (currentState != PhoneDisconnected) {
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	8b 97       	sbiw	r24, 0x2b	; 43
     544:	21 f0       	breq	.+8      	; 0x54e <_ZN12StateMachine10postHandleEv+0x12>
		usb.send();
     546:	8e ef       	ldi	r24, 0xFE	; 254
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN3Usb4sendEv>
     54e:	08 95       	ret

00000550 <_ZN12StateMachine9preHandleEv>:

void StateMachine::Init() {
	currentState = PhoneDisconnected;
}

void StateMachine::preHandle() {
     550:	1f 93       	push	r17
     552:	fc 01       	movw	r30, r24
	if (currentState != PhoneDisconnected && usb.sizeData() > 0) {
     554:	80 81       	ld	r24, Z
     556:	91 81       	ldd	r25, Z+1	; 0x01
     558:	8b 97       	sbiw	r24, 0x2b	; 43
     55a:	41 f1       	breq	.+80     	; 0x5ac <_ZN12StateMachine9preHandleEv+0x5c>
     55c:	8e ef       	ldi	r24, 0xFE	; 254
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN3Usb8sizeDataEv>
     564:	18 16       	cp	r1, r24
     566:	19 06       	cpc	r1, r25
     568:	0c f5       	brge	.+66     	; 0x5ac <_ZN12StateMachine9preHandleEv+0x5c>
		u_char val = usb.read();
     56a:	8e ef       	ldi	r24, 0xFE	; 254
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN3Usb4readEv>
     572:	18 2f       	mov	r17, r24
	    Serial.print("Read from usb: ");
     574:	83 ed       	ldi	r24, 0xD3	; 211
     576:	97 e0       	ldi	r25, 0x07	; 7
     578:	6f e4       	ldi	r22, 0x4F	; 79
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN5Print5printEPKc>
	    Serial.print( val );
     580:	83 ed       	ldi	r24, 0xD3	; 211
     582:	97 e0       	ldi	r25, 0x07	; 7
     584:	61 2f       	mov	r22, r17
     586:	4a e0       	ldi	r20, 0x0A	; 10
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 17 14 	call	0x282e	; 0x282e <_ZN5Print5printEhi>
	    Serial.print("\n\r");
     58e:	83 ed       	ldi	r24, 0xD3	; 211
     590:	97 e0       	ldi	r25, 0x07	; 7
     592:	6f e5       	ldi	r22, 0x5F	; 95
     594:	72 e0       	ldi	r23, 0x02	; 2
     596:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN5Print5printEPKc>
		if( val == 1 )
     59a:	11 30       	cpi	r17, 0x01	; 1
     59c:	19 f4       	brne	.+6      	; 0x5a4 <_ZN12StateMachine9preHandleEv+0x54>
		   digitalWrite(LED_PIN_13, HIGH);
     59e:	8d e0       	ldi	r24, 0x0D	; 13
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <_ZN12StateMachine9preHandleEv+0x58>
		else
		   digitalWrite(LED_PIN_13, LOW);
     5a4:	8d e0       	ldi	r24, 0x0D	; 13
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
	}
}
     5ac:	1f 91       	pop	r17
     5ae:	08 95       	ret

000005b0 <_ZN12StateMachine4CallEv>:
	if (currentState != PhoneDisconnected) {
		usb.send();
	}
}

void StateMachine::Call() {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
	this->preHandle();
     5b6:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN12StateMachine9preHandleEv>
	switch (currentState) {
     5ba:	88 81       	ld	r24, Y
     5bc:	99 81       	ldd	r25, Y+1	; 0x01
     5be:	8b 32       	cpi	r24, 0x2B	; 43
     5c0:	91 05       	cpc	r25, r1
     5c2:	51 f1       	breq	.+84     	; 0x618 <_ZN12StateMachine4CallEv+0x68>
     5c4:	8c 32       	cpi	r24, 0x2C	; 44
     5c6:	91 05       	cpc	r25, r1
     5c8:	49 f0       	breq	.+18     	; 0x5dc <_ZN12StateMachine4CallEv+0x2c>
     5ca:	89 2b       	or	r24, r25
     5cc:	b1 f5       	brne	.+108    	; 0x63a <_ZN12StateMachine4CallEv+0x8a>
	case Idle:
		delay(100);
     5ce:	64 e6       	ldi	r22, 0x64	; 100
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <delay>
     5da:	2f c0       	rjmp	.+94     	; 0x63a <_ZN12StateMachine4CallEv+0x8a>
		break;
	case PositionReached:
		break;

	case PhoneConnect: {
		Serial.print("Try Connect\n\r");
     5dc:	83 ed       	ldi	r24, 0xD3	; 211
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	62 e6       	ldi	r22, 0x62	; 98
     5e2:	72 e0       	ldi	r23, 0x02	; 2
     5e4:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN5Print5printEPKc>
		usb.reconnect();
     5e8:	8e ef       	ldi	r24, 0xFE	; 254
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Usb9reconnectEv>
		if (!usb.isConnected())
     5f0:	8e ef       	ldi	r24, 0xFE	; 254
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	0e 94 12 02 	call	0x424	; 0x424 <_ZN3Usb11isConnectedEv>
     5f8:	88 23       	and	r24, r24
     5fa:	21 f4       	brne	.+8      	; 0x604 <_ZN12StateMachine4CallEv+0x54>
			requireState(PhoneDisconnected);
     5fc:	ce 01       	movw	r24, r28
     5fe:	6b e2       	ldi	r22, 0x2B	; 43
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	19 c0       	rjmp	.+50     	; 0x636 <_ZN12StateMachine4CallEv+0x86>
		else
		{
			Serial.print("Connected\n\r");
     604:	83 ed       	ldi	r24, 0xD3	; 211
     606:	97 e0       	ldi	r25, 0x07	; 7
     608:	60 e7       	ldi	r22, 0x70	; 112
     60a:	72 e0       	ldi	r23, 0x02	; 2
     60c:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN5Print5printEPKc>
			requireState(Idle);
     610:	ce 01       	movw	r24, r28
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	0f c0       	rjmp	.+30     	; 0x636 <_ZN12StateMachine4CallEv+0x86>
		}
		break;
	}

	case PhoneDisconnected: {
		Serial.print("Phone Disconnected\n\r");
     618:	83 ed       	ldi	r24, 0xD3	; 211
     61a:	97 e0       	ldi	r25, 0x07	; 7
     61c:	6c e7       	ldi	r22, 0x7C	; 124
     61e:	72 e0       	ldi	r23, 0x02	; 2
     620:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN5Print5printEPKc>
		delay(1000);
     624:	68 ee       	ldi	r22, 0xE8	; 232
     626:	73 e0       	ldi	r23, 0x03	; 3
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <delay>
		this->requireState(PhoneConnect);
     630:	ce 01       	movw	r24, r28
     632:	6c e2       	ldi	r22, 0x2C	; 44
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 82 02 	call	0x504	; 0x504 <_ZN12StateMachine12requireStateE7TBState>
	}
		break;
	case Error:
		break;
	}
	this->postHandle();
     63a:	ce 01       	movw	r24, r28
     63c:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN12StateMachine10postHandleEv>
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <_ZN8MAX3421E12getVbusStateEv>:
}

byte MAX3421E::getVbusState( void )
{ 
    return( vbusState );
}
     646:	80 91 9b 05 	lds	r24, 0x059B
     64a:	08 95       	ret

0000064c <_ZN8MAX3421E7bytesRdEhhPc>:
    digitalWrite(MAX_SS,HIGH); 
    return( SPDR );
}
/* multiple-bytes register read                             */
/* returns a pointer to a memory position after last read   */
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	16 2f       	mov	r17, r22
     656:	04 2f       	mov	r16, r20
     658:	e9 01       	movw	r28, r18
{
    digitalWrite(MAX_SS,LOW);
     65a:	85 e3       	ldi	r24, 0x35	; 53
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
    SPDR = reg;      
     662:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));    //wait
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <_ZN8MAX3421E7bytesRdEhhPc+0x18>
     66a:	90 2f       	mov	r25, r16
     66c:	fe 01       	movw	r30, r28
     66e:	07 c0       	rjmp	.+14     	; 0x67e <_ZN8MAX3421E7bytesRdEhhPc+0x32>
    while( nbytes ) {
      SPDR = 0; //send empty byte
     670:	1e bc       	out	0x2e, r1	; 46
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <_ZN8MAX3421E7bytesRdEhhPc+0x26>
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
      SPDR = 0; //send empty byte
      nbytes--;
     678:	91 50       	subi	r25, 0x01	; 1
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
     67a:	8e b5       	in	r24, 0x2e	; 46
     67c:	81 93       	st	Z+, r24
char * MAX3421E::bytesRd ( byte reg, byte nbytes, char  * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = reg;      
    while(!( SPSR & ( 1 << SPIF )));    //wait
    while( nbytes ) {
     67e:	99 23       	and	r25, r25
     680:	b9 f7       	brne	.-18     	; 0x670 <_ZN8MAX3421E7bytesRdEhhPc+0x24>
      nbytes--;
      while(!( SPSR & ( 1 << SPIF )));
      *data = SPDR;
      data++;
    }
    digitalWrite(MAX_SS,HIGH);
     682:	85 e3       	ldi	r24, 0x35	; 53
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
     68a:	9e 01       	movw	r18, r28
     68c:	20 0f       	add	r18, r16
     68e:	31 1d       	adc	r19, r1
    return( data );   
}
     690:	c9 01       	movw	r24, r18
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <_ZN8MAX3421E5regRdEh>:
    regWr( rIOPINS2, val );
    
    return;     
}
/* Single host register read        */
byte MAX3421E::regRd( byte reg )    
     69c:	1f 93       	push	r17
     69e:	16 2f       	mov	r17, r22
{
  byte tmp;
    digitalWrite(MAX_SS,LOW);
     6a0:	85 e3       	ldi	r24, 0x35	; 53
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
    SPDR = reg;
     6a8:	1e bd       	out	0x2e, r17	; 46
    while(!( SPSR & ( 1 << SPIF )));
     6aa:	0d b4       	in	r0, 0x2d	; 45
     6ac:	07 fe       	sbrs	r0, 7
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <_ZN8MAX3421E5regRdEh+0xe>
    SPDR = 0; //send empty byte
     6b0:	1e bc       	out	0x2e, r1	; 46
    while(!( SPSR & ( 1 << SPIF )));
     6b2:	0d b4       	in	r0, 0x2d	; 45
     6b4:	07 fe       	sbrs	r0, 7
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <_ZN8MAX3421E5regRdEh+0x16>
    digitalWrite(MAX_SS,HIGH); 
     6b8:	85 e3       	ldi	r24, 0x35	; 53
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
    return( SPDR );
     6c0:	8e b5       	in	r24, 0x2e	; 46
}
     6c2:	1f 91       	pop	r17
     6c4:	08 95       	ret

000006c6 <_ZN8MAX3421E10GpxHandlerEv>:
    regWr( rHIRQ, HIRQ_sendback );
    return( HIRQ_sendback );
}
byte MAX3421E::GpxHandler()
{
 byte GPINIRQ = regRd( rGPINIRQ );          //read GPIN IRQ register
     6c6:	60 eb       	ldi	r22, 0xB0	; 176
     6c8:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
//        delay( 1000 );
//        vbusPwr( ON );
//        regWr( rGPINIRQ, bmGPINIRQ7 );
//    }       
    return( GPINIRQ );
}
     6cc:	08 95       	ret

000006ce <_ZN8MAX3421E7bytesWrEhhPc>:
      digitalWrite(MAX_SS,HIGH);
      return;
}
/* multiple-byte write */
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	16 2f       	mov	r17, r22
     6d8:	04 2f       	mov	r16, r20
     6da:	e9 01       	movw	r28, r18
{
    digitalWrite(MAX_SS,LOW);
     6dc:	85 e3       	ldi	r24, 0x35	; 53
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
    SPDR = ( reg | 0x02 );
     6e4:	12 60       	ori	r17, 0x02	; 2
     6e6:	1e bd       	out	0x2e, r17	; 46
     6e8:	fe 01       	movw	r30, r28
     6ea:	90 2f       	mov	r25, r16
     6ec:	06 c0       	rjmp	.+12     	; 0x6fa <_ZN8MAX3421E7bytesWrEhhPc+0x2c>
    while( nbytes-- ) {
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <_ZN8MAX3421E7bytesWrEhhPc+0x20>
      SPDR = ( *data );               // send next data byte
     6f4:	81 91       	ld	r24, Z+
     6f6:	8e bd       	out	0x2e, r24	; 46
      data++;                         // advance data pointer
     6f8:	91 50       	subi	r25, 0x01	; 1
/* returns a pointer to a memory position after last written */
char * MAX3421E::bytesWr( byte reg, byte nbytes, char * data )
{
    digitalWrite(MAX_SS,LOW);
    SPDR = ( reg | 0x02 );
    while( nbytes-- ) {
     6fa:	99 23       	and	r25, r25
     6fc:	c1 f7       	brne	.-16     	; 0x6ee <_ZN8MAX3421E7bytesWrEhhPc+0x20>
     6fe:	c0 0f       	add	r28, r16
     700:	d1 1d       	adc	r29, r1
      while(!( SPSR & ( 1 << SPIF )));  //check if previous byte was sent
      SPDR = ( *data );               // send next data byte
      data++;                         // advance data pointer
    }
    while(!( SPSR & ( 1 << SPIF )));
     702:	0d b4       	in	r0, 0x2d	; 45
     704:	07 fe       	sbrs	r0, 7
     706:	fd cf       	rjmp	.-6      	; 0x702 <_ZN8MAX3421E7bytesWrEhhPc+0x34>
    digitalWrite(MAX_SS,HIGH);
     708:	85 e3       	ldi	r24, 0x35	; 53
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
    return( data );
}
     710:	ce 01       	movw	r24, r28
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <_ZN8MAX3421E5regWrEhh>:
//{
//    digitalWrite( pin, HIGH );
//    digitalWrite( pin, LOW );
//}
/* Single host register write   */
void MAX3421E::regWr( byte reg, byte val)
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	18 2f       	mov	r17, r24
     722:	06 2f       	mov	r16, r22
{
      digitalWrite(MAX_SS,LOW);
     724:	85 e3       	ldi	r24, 0x35	; 53
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
      SPDR = ( reg | 0x02 );
     72c:	12 60       	ori	r17, 0x02	; 2
     72e:	1e bd       	out	0x2e, r17	; 46
      while(!( SPSR & ( 1 << SPIF )));
     730:	0d b4       	in	r0, 0x2d	; 45
     732:	07 fe       	sbrs	r0, 7
     734:	fd cf       	rjmp	.-6      	; 0x730 <_ZN8MAX3421E5regWrEhh+0x14>
      SPDR = val;
     736:	0e bd       	out	0x2e, r16	; 46
      while(!( SPSR & ( 1 << SPIF )));
     738:	0d b4       	in	r0, 0x2d	; 45
     73a:	07 fe       	sbrs	r0, 7
     73c:	fd cf       	rjmp	.-6      	; 0x738 <_ZN8MAX3421E5regWrEhh+0x1c>
      digitalWrite(MAX_SS,HIGH);
     73e:	85 e3       	ldi	r24, 0x35	; 53
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
      return;
}
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <_ZN8MAX3421E8busprobeEv>:
//        return( false );
//    }                      
    return( true );                                             // power on/off successful                       
}
/* probe bus to determine device presense and speed and switch host to this speed */
void MAX3421E::busprobe( void )
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
{
 byte bus_sample;
    bus_sample = regRd( rHRSL );            //Get J,K status
     752:	68 ef       	ldi	r22, 0xF8	; 248
     754:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
    bus_sample &= ( bmJSTATUS|bmKSTATUS );      //zero the rest of the byte
    switch( bus_sample ) {                          //start full-speed or low-speed host 
     758:	80 7c       	andi	r24, 0xC0	; 192
     75a:	80 34       	cpi	r24, 0x40	; 64
     75c:	89 f0       	breq	.+34     	; 0x780 <_ZN8MAX3421E8busprobeEv+0x34>
     75e:	81 34       	cpi	r24, 0x41	; 65
     760:	18 f4       	brcc	.+6      	; 0x768 <_ZN8MAX3421E8busprobeEv+0x1c>
     762:	88 23       	and	r24, r24
     764:	19 f1       	breq	.+70     	; 0x7ac <_ZN8MAX3421E8busprobeEv+0x60>
     766:	28 c0       	rjmp	.+80     	; 0x7b8 <_ZN8MAX3421E8busprobeEv+0x6c>
     768:	80 38       	cpi	r24, 0x80	; 128
     76a:	19 f0       	breq	.+6      	; 0x772 <_ZN8MAX3421E8busprobeEv+0x26>
     76c:	80 3c       	cpi	r24, 0xC0	; 192
     76e:	21 f5       	brne	.+72     	; 0x7b8 <_ZN8MAX3421E8busprobeEv+0x6c>
     770:	19 c0       	rjmp	.+50     	; 0x7a4 <_ZN8MAX3421E8busprobeEv+0x58>
        case( bmJSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
     772:	ce 01       	movw	r24, r28
     774:	68 ed       	ldi	r22, 0xD8	; 216
     776:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     77a:	81 fd       	sbrc	r24, 1
     77c:	07 c0       	rjmp	.+14     	; 0x78c <_ZN8MAX3421E8busprobeEv+0x40>
     77e:	0c c0       	rjmp	.+24     	; 0x798 <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST);        //start low-speed host
                vbusState = LSHOST;
            }
            break;
        case( bmKSTATUS ):
            if(( regRd( rMODE ) & bmLOWSPEED ) == 0 ) {
     780:	ce 01       	movw	r24, r28
     782:	68 ed       	ldi	r22, 0xD8	; 216
     784:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     788:	81 fd       	sbrc	r24, 1
     78a:	06 c0       	rjmp	.+12     	; 0x798 <_ZN8MAX3421E8busprobeEv+0x4c>
                regWr( rMODE, MODE_LS_HOST );       //start low-speed host
     78c:	88 ed       	ldi	r24, 0xD8	; 216
     78e:	6b ec       	ldi	r22, 0xCB	; 203
     790:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
                vbusState = LSHOST;
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            else {
                regWr( rMODE, MODE_FS_HOST );       //start full-speed host
     798:	88 ed       	ldi	r24, 0xD8	; 216
     79a:	69 ec       	ldi	r22, 0xC9	; 201
     79c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
                vbusState = FSHOST;
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <_ZN8MAX3421E8busprobeEv+0x5a>
            }
            break;
        case( bmSE1 ):              //illegal state
            vbusState = SE1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 9b 05 	sts	0x059B, r24
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <_ZN8MAX3421E8busprobeEv+0x6c>
            break;
        case( bmSE0 ):              //disconnected state
            regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ);
     7ac:	88 ed       	ldi	r24, 0xD8	; 216
     7ae:	61 ed       	ldi	r22, 0xD1	; 209
     7b0:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
            vbusState = SE0;
     7b4:	10 92 9b 05 	sts	0x059B, r1
            break;
        }//end switch( bus_sample )
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <_ZN8MAX3421E10IntHandlerEv>:
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
byte MAX3421E::IntHandler()
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
{
 byte HIRQ;
 byte HIRQ_sendback = 0x00;
    HIRQ = regRd( rHIRQ );                  //determine interrupt source
     7c6:	68 ec       	ldi	r22, 0xC8	; 200
     7c8:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
    //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
    //    HIRQ_sendback |= bmFRAMEIRQ;
    //}//end FRAMEIRQ handling
    if( HIRQ & bmCONDETIRQ ) {
     7cc:	85 fd       	sbrc	r24, 5
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_ZN8MAX3421E10IntHandlerEv+0x16>
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <_ZN8MAX3421E10IntHandlerEv+0x1e>
        busprobe();
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN8MAX3421E8busprobeEv>
     7da:	10 e2       	ldi	r17, 0x20	; 32
        HIRQ_sendback |= bmCONDETIRQ;
    }
    /* End HIRQ interrupts handling, clear serviced IRQs    */
    regWr( rHIRQ, HIRQ_sendback );
     7dc:	88 ec       	ldi	r24, 0xC8	; 200
     7de:	61 2f       	mov	r22, r17
     7e0:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    return( HIRQ_sendback );
}
     7e4:	81 2f       	mov	r24, r17
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	08 95       	ret

000007ee <_ZN8MAX3421E4TaskEv>:
    busprobe();                                                             //check if anything is connected
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
}
/* MAX3421 state change task and interrupt handler */
byte MAX3421E::Task( void )
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_INT );    
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
     7f6:	66 9b       	sbis	0x0c, 6	; 12
     7f8:	0a c0       	rjmp	.+20     	; 0x80e <_ZN8MAX3421E4TaskEv+0x20>
     7fa:	10 e0       	ldi	r17, 0x00	; 0

#if !defined(TARGET_MEGA_ADK)
    pinvalue = digitalRead( MAX_GPX );
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
     7fc:	80 91 03 01 	lds	r24, 0x0103
     800:	83 ff       	sbrs	r24, 3
     802:	09 c0       	rjmp	.+18     	; 0x816 <_ZN8MAX3421E4TaskEv+0x28>
    if( pinvalue == LOW ) {
        GpxHandler();
    }
//    usbSM();                                //USB state machine                            
    return( rcode );   
}   
     804:	81 2f       	mov	r24, r17
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	08 95       	ret
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = INT_PIN & _BV(INT) ? HIGH : LOW; // from old `readINT()`
#endif
    if( pinvalue  == LOW ) {
        rcode = IntHandler();
     80e:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN8MAX3421E10IntHandlerEv>
     812:	18 2f       	mov	r17, r24
     814:	f3 cf       	rjmp	.-26     	; 0x7fc <_ZN8MAX3421E4TaskEv+0xe>
#else
    // "Internal" pin so can't use Arduino helper functions.
    pinvalue = GPX_PIN & _BV(GPX) ? HIGH : LOW; // from old `readGPX()`
#endif
    if( pinvalue == LOW ) {
        GpxHandler();
     816:	ce 01       	movw	r24, r28
     818:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_ZN8MAX3421E10GpxHandlerEv>
     81c:	f3 cf       	rjmp	.-26     	; 0x804 <_ZN8MAX3421E4TaskEv+0x16>

0000081e <_ZN8MAX3421E5resetEv>:
    tmpbyte &= 0xf0;                        //clean lower nibble
    tmpbyte |= ( regRd( rIOPINS1 ) >>4 ) ;  //shift low bits and OR with upper from previous operation. Upper nibble zeroes during shift, at least with this compiler
    return( tmpbyte );
}
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
boolean MAX3421E::reset()
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	8c 01       	movw	r16, r24
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
     828:	88 e7       	ldi	r24, 0x78	; 120
     82a:	60 e2       	ldi	r22, 0x20	; 32
     82c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
     830:	88 e7       	ldi	r24, 0x78	; 120
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
     838:	c0 e0       	ldi	r28, 0x00	; 0
     83a:	d0 e0       	ldi	r29, 0x00	; 0
     83c:	04 c0       	rjmp	.+8      	; 0x846 <_ZN8MAX3421E5resetEv+0x28>
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
     83e:	21 97       	sbiw	r28, 0x01	; 1
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) {
     840:	11 f4       	brne	.+4      	; 0x846 <_ZN8MAX3421E5resetEv+0x28>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	07 c0       	rjmp	.+14     	; 0x854 <_ZN8MAX3421E5resetEv+0x36>
boolean MAX3421E::reset()
{
  unsigned short tmp = 0;
    regWr( rUSBCTL, bmCHIPRES );                        //Chip reset. This stops the oscillator
    regWr( rUSBCTL, 0x00 );                             //Remove the reset
    while(!(regRd( rUSBIRQ ) & bmOSCOKIRQ )) {          //wait until the PLL is stable
     846:	c8 01       	movw	r24, r16
     848:	68 e6       	ldi	r22, 0x68	; 104
     84a:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     84e:	80 ff       	sbrs	r24, 0
     850:	f6 cf       	rjmp	.-20     	; 0x83e <_ZN8MAX3421E5resetEv+0x20>
     852:	81 e0       	ldi	r24, 0x01	; 1
        if( tmp == 0 ) {
            return( false );
        }
    }
    return( true );
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <_ZN8MAX3421E7powerOnEv>:
            vbusState = SE0;
            break;
        }//end switch( bus_sample )
}
/* MAX3421E initialization after power-on   */
void MAX3421E::powerOn()
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
{
    /* Configure full-duplex SPI, interrupt pulse   */
    regWr( rPINCTL,( bmFDUPSPI + bmINTLEVEL + bmGPXB ));    //Full-duplex SPI, level interrupt, GPX
     864:	88 e8       	ldi	r24, 0x88	; 136
     866:	6a e1       	ldi	r22, 0x1A	; 26
     868:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    if( reset() == false ) {                                //stop/start the oscillator
     86c:	ce 01       	movw	r24, r28
     86e:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN8MAX3421E5resetEv>
     872:	88 23       	and	r24, r24
     874:	31 f4       	brne	.+12     	; 0x882 <_ZN8MAX3421E7powerOnEv+0x24>
        Serial.println("Error: OSCOKIRQ failed to assert");
     876:	83 ed       	ldi	r24, 0xD3	; 211
     878:	97 e0       	ldi	r25, 0x07	; 7
     87a:	61 e9       	ldi	r22, 0x91	; 145
     87c:	72 e0       	ldi	r23, 0x02	; 2
     87e:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN5Print7printlnEPKc>
    }

    /* configure host operation */
    regWr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ );      // set pull-downs, Host, Separate GPIN IRQ on GPX
     882:	88 ed       	ldi	r24, 0xD8	; 216
     884:	61 ed       	ldi	r22, 0xD1	; 209
     886:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    regWr( rHIEN, bmCONDETIE|bmFRAMEIE );                                             //connection detection
     88a:	80 ed       	ldi	r24, 0xD0	; 208
     88c:	60 e6       	ldi	r22, 0x60	; 96
     88e:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    /* check if device is connected */
    regWr( rHCTL,bmSAMPLEBUS );                                             // sample USB bus
     892:	88 ee       	ldi	r24, 0xE8	; 232
     894:	64 e0       	ldi	r22, 0x04	; 4
     896:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHCTL ) & bmSAMPLEBUS ));                                //wait for sample operation to finish
     89a:	ce 01       	movw	r24, r28
     89c:	68 ee       	ldi	r22, 0xE8	; 232
     89e:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     8a2:	82 ff       	sbrs	r24, 2
     8a4:	fa cf       	rjmp	.-12     	; 0x89a <_ZN8MAX3421E7powerOnEv+0x3c>
    busprobe();                                                             //check if anything is connected
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN8MAX3421E8busprobeEv>
    regWr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
     8ac:	88 ec       	ldi	r24, 0xC8	; 200
     8ae:	60 e2       	ldi	r22, 0x20	; 32
     8b0:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    regWr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <_ZN8MAX3421E8spi_initEv>:
        byte Task();
    private:
      static void spi_init() {
        uint8_t tmp;
        // initialize SPI pins
        pinMode(SCK_PIN, OUTPUT);
     8c2:	84 e3       	ldi	r24, 0x34	; 52
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
        pinMode(MOSI_PIN, OUTPUT);
     8ca:	83 e3       	ldi	r24, 0x33	; 51
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
        pinMode(MISO_PIN, INPUT);
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
        pinMode(SS_PIN, OUTPUT);
     8da:	85 e3       	ldi	r24, 0x35	; 53
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
        digitalWrite( SS_PIN, HIGH ); 
     8e2:	85 e3       	ldi	r24, 0x35	; 53
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
        /* mode 00 (CPOL=0, CPHA=0) master, fclk/2. Mode 11 (CPOL=11, CPHA=11) is also supported by MAX3421E */
        SPCR = 0x50;
     8ea:	80 e5       	ldi	r24, 0x50	; 80
     8ec:	8c bd       	out	0x2c, r24	; 44
        SPSR = 0x01;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	8d bd       	out	0x2d, r24	; 45
        /**/
        tmp = SPSR;
     8f2:	8d b5       	in	r24, 0x2d	; 45
        tmp = SPDR;
     8f4:	8e b5       	in	r24, 0x2e	; 46
    }
     8f6:	08 95       	ret

000008f8 <_ZN8MAX3421EC1Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
{
    spi_init();  
     8fc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
     900:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
     902:	04 e0       	ldi	r16, 0x04	; 4
     904:	11 e0       	ldi	r17, 0x01	; 1
     906:	f8 01       	movw	r30, r16
     908:	80 81       	ld	r24, Z
     90a:	87 7f       	andi	r24, 0xF7	; 247
     90c:	80 83       	st	Z, r24
#endif
    pinMode( MAX_SS, OUTPUT );
     90e:	85 e3       	ldi	r24, 0x35	; 53
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
    digitalWrite(MAX_SS,HIGH);   
     916:	85 e3       	ldi	r24, 0x35	; 53
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
     91e:	f8 01       	movw	r30, r16
     920:	80 81       	ld	r24, Z
     922:	84 60       	ori	r24, 0x04	; 4
     924:	80 83       	st	Z, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
     926:	e5 e0       	ldi	r30, 0x05	; 5
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	80 81       	ld	r24, Z
     92c:	84 60       	ori	r24, 0x04	; 4
     92e:	80 83       	st	Z, r24
#endif
}
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <_ZN8MAX3421EC2Ev>:
static byte vbusState;

/* Functions    */

/* Constructor */
MAX3421E::MAX3421E()
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
{
    spi_init();  
     93a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN8MAX3421E8spi_initEv>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_INT, INPUT);
    pinMode( MAX_GPX, INPUT );
#else
    // "Internal" pins so can't use Arduino helper functions.
    INT_DDR &= ~_BV(INT);
     93e:	6e 98       	cbi	0x0d, 6	; 13
    GPX_DDR &= ~_BV(GPX);
     940:	04 e0       	ldi	r16, 0x04	; 4
     942:	11 e0       	ldi	r17, 0x01	; 1
     944:	f8 01       	movw	r30, r16
     946:	80 81       	ld	r24, Z
     948:	87 7f       	andi	r24, 0xF7	; 247
     94a:	80 83       	st	Z, r24
#endif
    pinMode( MAX_SS, OUTPUT );
     94c:	85 e3       	ldi	r24, 0x35	; 53
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
    digitalWrite(MAX_SS,HIGH);   
     954:	85 e3       	ldi	r24, 0x35	; 53
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 83 16 	call	0x2d06	; 0x2d06 <digitalWrite>
#if !defined(TARGET_MEGA_ADK)
    pinMode( MAX_RESET, OUTPUT );
    digitalWrite( MAX_RESET, HIGH );  //release MAX3421E from reset
#else
    // "Internal" pins so can't use Arduino helper functions.
    RST_DDR |= _BV(RST);
     95c:	f8 01       	movw	r30, r16
     95e:	80 81       	ld	r24, Z
     960:	84 60       	ori	r24, 0x04	; 4
     962:	80 83       	st	Z, r24
    RST_PORT |= _BV(RST); // Equivalent to setRST(HIGH) from old code.
     964:	e5 e0       	ldi	r30, 0x05	; 5
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	80 81       	ld	r24, Z
     96a:	84 60       	ori	r24, 0x04	; 4
     96c:	80 83       	st	Z, r24
#endif
}
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <_ZN3USB15getUsbTaskStateEv>:
byte USB::getUsbTaskState( void )
{
    return( usb_task_state );
}
     974:	80 91 ac 05 	lds	r24, 0x05AC
     978:	08 95       	ret

0000097a <_ZN3USB15setUsbTaskStateEh>:
void USB::setUsbTaskState( byte state )
{
    usb_task_state = state;
     97a:	60 93 ac 05 	sts	0x05AC, r22
}     
     97e:	08 95       	ret

00000980 <_ZN3USB16getDevTableEntryEhh>:
EP_RECORD* USB::getDevTableEntry( byte addr, byte ep )
{
  EP_RECORD* ptr;
    ptr = devtable[ addr ].epinfo;
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	fb 01       	movw	r30, r22
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	e6 0f       	add	r30, r22
     98a:	f7 1f       	adc	r31, r23
     98c:	e4 56       	subi	r30, 0x64	; 100
     98e:	fa 4f       	sbci	r31, 0xFA	; 250
     990:	20 81       	ld	r18, Z
     992:	31 81       	ldd	r19, Z+1	; 0x01
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	48 9f       	mul	r20, r24
     998:	a0 01       	movw	r20, r0
     99a:	11 24       	eor	r1, r1
     99c:	24 0f       	add	r18, r20
     99e:	35 1f       	adc	r19, r21
    ptr += ep;
    return( ptr );
}
     9a0:	c9 01       	movw	r24, r18
     9a2:	08 95       	ret

000009a4 <_ZN3USB16setDevTableEntryEhP9EP_RECORD>:
/* set device table entry */
/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
void USB::setDevTableEntry( byte addr, EP_RECORD* eprecord_ptr )
{
    devtable[ addr ].epinfo = eprecord_ptr;
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	fb 01       	movw	r30, r22
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e6 0f       	add	r30, r22
     9ae:	f7 1f       	adc	r31, r23
     9b0:	e4 56       	subi	r30, 0x64	; 100
     9b2:	fa 4f       	sbci	r31, 0xFA	; 250
     9b4:	51 83       	std	Z+1, r21	; 0x01
     9b6:	40 83       	st	Z, r20
    //return();
}
     9b8:	08 95       	ret

000009ba <_ZN3USB11dispatchPktEhhj>:
/* dispatch usb packet. Assumes peripheral address is set and relevant buffer is loaded/empty       */
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
byte USB::dispatchPkt( byte token, byte ep, unsigned int nak_limit )
     9ba:	7f 92       	push	r7
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	78 2e       	mov	r7, r24
     9d6:	a9 2e       	mov	r10, r25
     9d8:	16 2f       	mov	r17, r22
     9da:	b4 2e       	mov	r11, r20
     9dc:	49 01       	movw	r8, r18
{
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
     9de:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
     9e2:	6b 01       	movw	r12, r22
     9e4:	7c 01       	movw	r14, r24
     9e6:	88 e8       	ldi	r24, 0x88	; 136
     9e8:	93 e1       	ldi	r25, 0x13	; 19
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	c8 0e       	add	r12, r24
     9f0:	d9 1e       	adc	r13, r25
     9f2:	ea 1e       	adc	r14, r26
     9f4:	fb 1e       	adc	r15, r27
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	00 e0       	ldi	r16, 0x00	; 0
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
     9fc:	b1 2a       	or	r11, r17
     9fe:	30 c0       	rjmp	.+96     	; 0xa60 <_ZN3USB11dispatchPktEhhj+0xa6>
     a00:	80 ef       	ldi	r24, 0xF0	; 240
     a02:	6b 2d       	mov	r22, r11
     a04:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
     a08:	17 c0       	rjmp	.+46     	; 0xa38 <_ZN3USB11dispatchPktEhhj+0x7e>
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
      tmpdata = regRd( rHIRQ );
     a0a:	87 2d       	mov	r24, r7
     a0c:	9a 2d       	mov	r25, r10
     a0e:	68 ec       	ldi	r22, 0xC8	; 200
     a10:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
      if( tmpdata & bmHXFRDNIRQ ) {
     a14:	87 ff       	sbrs	r24, 7
     a16:	10 c0       	rjmp	.+32     	; 0xa38 <_ZN3USB11dispatchPktEhhj+0x7e>
        regWr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
     a18:	88 ec       	ldi	r24, 0xC8	; 200
     a1a:	60 e8       	ldi	r22, 0x80	; 128
     a1c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
      }//if( tmpdata & bmHXFRDNIRQ
    }//while ( millis() < timeout
    if( rcode != 0x00 ) {                //exit if timeout
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
     a20:	87 2d       	mov	r24, r7
     a22:	9a 2d       	mov	r25, r10
     a24:	68 ef       	ldi	r22, 0xF8	; 248
     a26:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     a2a:	18 2f       	mov	r17, r24
     a2c:	1f 70       	andi	r17, 0x0F	; 15
    switch( rcode ) {
     a2e:	14 30       	cpi	r17, 0x04	; 4
     a30:	61 f0       	breq	.+24     	; 0xa4a <_ZN3USB11dispatchPktEhhj+0x90>
     a32:	1e 30       	cpi	r17, 0x0E	; 14
     a34:	e1 f4       	brne	.+56     	; 0xa6e <_ZN3USB11dispatchPktEhhj+0xb4>
     a36:	11 c0       	rjmp	.+34     	; 0xa5a <_ZN3USB11dispatchPktEhhj+0xa0>
 char retry_count = 0;

  while( timeout > millis() ) {
    regWr( rHXFR, ( token|ep ));            //launch the transfer
    rcode = 0xff;   
    while( millis() < timeout ) {           //wait for transfer completion
     a38:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
     a3c:	6c 15       	cp	r22, r12
     a3e:	7d 05       	cpc	r23, r13
     a40:	8e 05       	cpc	r24, r14
     a42:	9f 05       	cpc	r25, r15
     a44:	10 f3       	brcs	.-60     	; 0xa0a <_ZN3USB11dispatchPktEhhj+0x50>
     a46:	1f ef       	ldi	r17, 0xFF	; 255
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <_ZN3USB11dispatchPktEhhj+0xb4>
      return( rcode );
    }
    rcode = ( regRd( rHRSL ) & 0x0f );  //analyze transfer result
    switch( rcode ) {
      case hrNAK:
        nak_count ++;
     a4a:	21 96       	adiw	r28, 0x01	; 1
        if( nak_limit && ( nak_count == nak_limit )) {
     a4c:	81 14       	cp	r8, r1
     a4e:	91 04       	cpc	r9, r1
     a50:	39 f0       	breq	.+14     	; 0xa60 <_ZN3USB11dispatchPktEhhj+0xa6>
     a52:	c8 15       	cp	r28, r8
     a54:	d9 05       	cpc	r29, r9
     a56:	21 f4       	brne	.+8      	; 0xa60 <_ZN3USB11dispatchPktEhhj+0xa6>
     a58:	0a c0       	rjmp	.+20     	; 0xa6e <_ZN3USB11dispatchPktEhhj+0xb4>
          return( rcode );
        }
        break;
      case hrTIMEOUT:
        retry_count ++;
     a5a:	0f 5f       	subi	r16, 0xFF	; 255
        if( retry_count == USB_RETRY_LIMIT ) {
     a5c:	03 30       	cpi	r16, 0x03	; 3
     a5e:	39 f0       	breq	.+14     	; 0xa6e <_ZN3USB11dispatchPktEhhj+0xb4>
 byte tmpdata;   
 byte rcode;
 unsigned int nak_count = 0;
 char retry_count = 0;

  while( timeout > millis() ) {
     a60:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
     a64:	6c 15       	cp	r22, r12
     a66:	7d 05       	cpc	r23, r13
     a68:	8e 05       	cpc	r24, r14
     a6a:	9f 05       	cpc	r25, r15
     a6c:	48 f2       	brcs	.-110    	; 0xa00 <_ZN3USB11dispatchPktEhhj+0x46>
      default:
        return( rcode );
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
     a6e:	81 2f       	mov	r24, r17
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	7f 90       	pop	r7
     a8a:	08 95       	ret

00000a8c <_ZN3USB10ctrlStatusEhhj>:
    rcode = ctrlStatus( ep, direction );                //status stage
    return( rcode );
}
/* Control transfer with status stage and no data stage */
/* Assumed peripheral address is already set */
byte USB::ctrlStatus( byte ep, boolean direction, unsigned int nak_limit )
     a8c:	56 2f       	mov	r21, r22
{
  byte rcode;
    if( direction ) { //GET
     a8e:	44 23       	and	r20, r20
     a90:	29 f0       	breq	.+10     	; 0xa9c <_ZN3USB10ctrlStatusEhhj+0x10>
        rcode = dispatchPkt( tokOUTHS, ep, nak_limit );
     a92:	60 ea       	ldi	r22, 0xA0	; 160
     a94:	45 2f       	mov	r20, r21
     a96:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN3USB11dispatchPktEhhj>
     a9a:	08 95       	ret
    }
    else {
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
     a9c:	60 e8       	ldi	r22, 0x80	; 128
     a9e:	45 2f       	mov	r20, r21
     aa0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN3USB11dispatchPktEhhj>
    }
    return( rcode );
}
     aa4:	08 95       	ret

00000aa6 <_ZN3USB11outTransferEhhjPcj>:

/* OUT transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */
/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
/* major part of this function borrowed from code shared by Richard Ibbotson    */
byte USB::outTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     aa6:	2f 92       	push	r2
     aa8:	3f 92       	push	r3
     aaa:	4f 92       	push	r4
     aac:	5f 92       	push	r5
     aae:	6f 92       	push	r6
     ab0:	7f 92       	push	r7
     ab2:	8f 92       	push	r8
     ab4:	9f 92       	push	r9
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	df 93       	push	r29
     ac8:	cf 93       	push	r28
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	2c 97       	sbiw	r28, 0x0c	; 12
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	8d 83       	std	Y+5, r24	; 0x05
     adc:	9e 83       	std	Y+6, r25	; 0x06
     ade:	4a 83       	std	Y+2, r20	; 0x02
     ae0:	82 2e       	mov	r8, r18
     ae2:	3f 83       	std	Y+7, r19	; 0x07
     ae4:	91 2e       	mov	r9, r17
     ae6:	fc 82       	std	Y+4, r15	; 0x04
     ae8:	eb 82       	std	Y+3, r14	; 0x03
{
 byte rcode, retry_count;
 char* data_p = data;   //local copy of the data pointer
 unsigned int bytes_tosend, nak_count;
 unsigned int bytes_left = nbytes;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     aea:	46 2e       	mov	r4, r22
     aec:	55 24       	eor	r5, r5
     aee:	87 e0       	ldi	r24, 0x07	; 7
     af0:	48 9f       	mul	r20, r24
     af2:	10 01       	movw	r2, r0
     af4:	11 24       	eor	r1, r1
     af6:	32 01       	movw	r6, r4
     af8:	66 0c       	add	r6, r6
     afa:	77 1c       	adc	r7, r7
     afc:	64 0c       	add	r6, r4
     afe:	75 1c       	adc	r7, r5
     b00:	8c e9       	ldi	r24, 0x9C	; 156
     b02:	95 e0       	ldi	r25, 0x05	; 5
     b04:	68 0e       	add	r6, r24
     b06:	79 1e       	adc	r7, r25
     b08:	d3 01       	movw	r26, r6
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	e2 0d       	add	r30, r2
     b10:	f3 1d       	adc	r31, r3
     b12:	12 81       	ldd	r17, Z+2	; 0x02
 unsigned long timeout = millis() + USB_XFER_TIMEOUT;
     b14:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
     b18:	5b 01       	movw	r10, r22
     b1a:	6c 01       	movw	r12, r24
     b1c:	88 e8       	ldi	r24, 0x88	; 136
     b1e:	93 e1       	ldi	r25, 0x13	; 19
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	a8 0e       	add	r10, r24
     b26:	b9 1e       	adc	r11, r25
     b28:	ca 1e       	adc	r12, r26
     b2a:	db 1e       	adc	r13, r27
 
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
     b2c:	11 23       	and	r17, r17
     b2e:	19 f4       	brne	.+6      	; 0xb36 <_ZN3USB11outTransferEhhjPcj+0x90>
     b30:	5e ef       	ldi	r21, 0xFE	; 254
     b32:	f5 2e       	mov	r15, r21
     b34:	ac c0       	rjmp	.+344    	; 0xc8e <_ZN3USB11outTransferEhhjPcj+0x1e8>
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
     b36:	d3 01       	movw	r26, r6
     b38:	ed 91       	ld	r30, X+
     b3a:	fc 91       	ld	r31, X
     b3c:	e2 0d       	add	r30, r2
     b3e:	f3 1d       	adc	r31, r3
     b40:	88 ee       	ldi	r24, 0xE8	; 232
     b42:	65 81       	ldd	r22, Z+5	; 0x05
     b44:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
     b48:	20 2f       	mov	r18, r16
     b4a:	39 2d       	mov	r19, r9
     b4c:	c9 01       	movw	r24, r18
     b4e:	3c 01       	movw	r6, r24
     b50:	28 2d       	mov	r18, r8
     b52:	3f 81       	ldd	r19, Y+7	; 0x07
     b54:	c9 01       	movw	r24, r18
     b56:	4c 01       	movw	r8, r24
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
     b58:	e1 2f       	mov	r30, r17
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	f9 87       	std	Y+9, r31	; 0x09
     b5e:	e8 87       	std	Y+8, r30	; 0x08
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     b60:	fa 81       	ldd	r31, Y+2	; 0x02
     b62:	f0 62       	ori	r31, 0x20	; 32
     b64:	fa 87       	std	Y+10, r31	; 0x0a
     b66:	77 c0       	rjmp	.+238    	; 0xc56 <_ZN3USB11outTransferEhhjPcj+0x1b0>
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
    retry_count = 0;
    nak_count = 0;
    bytes_tosend = ( bytes_left >= maxpktsize ) ? maxpktsize : bytes_left;
     b68:	9c 86       	std	Y+12, r9	; 0x0c
     b6a:	8b 86       	std	Y+11, r8	; 0x0b
     b6c:	88 85       	ldd	r24, Y+8	; 0x08
     b6e:	99 85       	ldd	r25, Y+9	; 0x09
     b70:	88 15       	cp	r24, r8
     b72:	99 05       	cpc	r25, r9
     b74:	10 f4       	brcc	.+4      	; 0xb7a <_ZN3USB11outTransferEhhjPcj+0xd4>
     b76:	9c 87       	std	Y+12, r25	; 0x0c
     b78:	8b 87       	std	Y+11, r24	; 0x0b
    bytesWr( rSNDFIFO, bytes_tosend, data_p );      //filling output FIFO
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	99 83       	std	Y+1, r25	; 0x01
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	9e 81       	ldd	r25, Y+6	; 0x06
     b82:	60 e1       	ldi	r22, 0x10	; 16
     b84:	4b 85       	ldd	r20, Y+11	; 0x0b
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8MAX3421E7bytesWrEhhPc>
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
     b8c:	88 e3       	ldi	r24, 0x38	; 56
     b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b90:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     b94:	80 ef       	ldi	r24, 0xF0	; 240
     b96:	6a 85       	ldd	r22, Y+10	; 0x0a
     b98:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	68 ec       	ldi	r22, 0xC8	; 200
     ba2:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     ba6:	87 ff       	sbrs	r24, 7
     ba8:	f9 cf       	rjmp	.-14     	; 0xb9c <_ZN3USB11outTransferEhhjPcj+0xf6>
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
     baa:	88 ec       	ldi	r24, 0xC8	; 200
     bac:	60 e8       	ldi	r22, 0x80	; 128
     bae:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
    rcode = ( regRd( rHRSL ) & 0x0f );
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	68 ef       	ldi	r22, 0xF8	; 248
     bb8:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     bbc:	4f e0       	ldi	r20, 0x0F	; 15
     bbe:	f4 2e       	mov	r15, r20
     bc0:	f8 22       	and	r15, r24
     bc2:	ee 24       	eor	r14, r14
     bc4:	00 e0       	ldi	r16, 0x00	; 0
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	34 c0       	rjmp	.+104    	; 0xc32 <_ZN3USB11outTransferEhhjPcj+0x18c>
    while( rcode && ( timeout > millis())) {
      switch( rcode ) {
        case hrNAK:
          nak_count++;
     bca:	0f 5f       	subi	r16, 0xFF	; 255
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
          if( nak_limit && ( nak_count == USB_NAK_LIMIT )) {
     bce:	ab 81       	ldd	r26, Y+3	; 0x03
     bd0:	bc 81       	ldd	r27, Y+4	; 0x04
     bd2:	ab 2b       	or	r26, r27
     bd4:	51 f0       	breq	.+20     	; 0xbea <_ZN3USB11outTransferEhhjPcj+0x144>
     bd6:	bd e7       	ldi	r27, 0x7D	; 125
     bd8:	00 30       	cpi	r16, 0x00	; 0
     bda:	1b 07       	cpc	r17, r27
     bdc:	31 f4       	brne	.+12     	; 0xbea <_ZN3USB11outTransferEhhjPcj+0x144>
     bde:	57 c0       	rjmp	.+174    	; 0xc8e <_ZN3USB11outTransferEhhjPcj+0x1e8>
            return( rcode);                                   //return NAK
          }
          break;
        case hrTIMEOUT:
          retry_count++;
     be0:	e3 94       	inc	r14
          if( retry_count == USB_RETRY_LIMIT ) {
     be2:	e3 e0       	ldi	r30, 0x03	; 3
     be4:	ee 16       	cp	r14, r30
     be6:	09 f4       	brne	.+2      	; 0xbea <_ZN3USB11outTransferEhhjPcj+0x144>
     be8:	52 c0       	rjmp	.+164    	; 0xc8e <_ZN3USB11outTransferEhhjPcj+0x1e8>
          break;
        default:  
          return( rcode );
      }//switch( rcode...
      /* process NAK according to Host out NAK bug */
      regWr( rSNDBC, 0 );
     bea:	88 e3       	ldi	r24, 0x38	; 56
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDFIFO, *data_p );
     bf2:	80 e1       	ldi	r24, 0x10	; 16
     bf4:	d3 01       	movw	r26, r6
     bf6:	6c 91       	ld	r22, X
     bf8:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
      regWr( rSNDBC, bytes_tosend );
     bfc:	88 e3       	ldi	r24, 0x38	; 56
     bfe:	69 81       	ldd	r22, Y+1	; 0x01
     c00:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
     c04:	80 ef       	ldi	r24, 0xF0	; 240
     c06:	6a 85       	ldd	r22, Y+10	; 0x0a
     c08:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	68 ec       	ldi	r22, 0xC8	; 200
     c12:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     c16:	87 ff       	sbrs	r24, 7
     c18:	f9 cf       	rjmp	.-14     	; 0xc0c <_ZN3USB11outTransferEhhjPcj+0x166>
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
     c1a:	88 ec       	ldi	r24, 0xC8	; 200
     c1c:	60 e8       	ldi	r22, 0x80	; 128
     c1e:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
      rcode = ( regRd( rHRSL ) & 0x0f );
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	68 ef       	ldi	r22, 0xF8	; 248
     c28:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     c2c:	3f e0       	ldi	r19, 0x0F	; 15
     c2e:	f3 2e       	mov	r15, r19
     c30:	f8 22       	and	r15, r24
    regWr( rSNDBC, bytes_tosend );                  //set number of bytes    
    regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
    while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
    regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
    rcode = ( regRd( rHRSL ) & 0x0f );
    while( rcode && ( timeout > millis())) {
     c32:	ff 20       	and	r15, r15
     c34:	09 f4       	brne	.+2      	; 0xc38 <_ZN3USB11outTransferEhhjPcj+0x192>
     c36:	45 c0       	rjmp	.+138    	; 0xcc2 <_ZN3USB11outTransferEhhjPcj+0x21c>
     c38:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
     c3c:	6a 15       	cp	r22, r10
     c3e:	7b 05       	cpc	r23, r11
     c40:	8c 05       	cpc	r24, r12
     c42:	9d 05       	cpc	r25, r13
     c44:	f0 f5       	brcc	.+124    	; 0xcc2 <_ZN3USB11outTransferEhhjPcj+0x21c>
      switch( rcode ) {
     c46:	b4 e0       	ldi	r27, 0x04	; 4
     c48:	fb 16       	cp	r15, r27
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_ZN3USB11outTransferEhhjPcj+0x1a8>
     c4c:	be cf       	rjmp	.-132    	; 0xbca <_ZN3USB11outTransferEhhjPcj+0x124>
     c4e:	ee e0       	ldi	r30, 0x0E	; 14
     c50:	fe 16       	cp	r15, r30
     c52:	e9 f4       	brne	.+58     	; 0xc8e <_ZN3USB11outTransferEhhjPcj+0x1e8>
     c54:	c5 cf       	rjmp	.-118    	; 0xbe0 <_ZN3USB11outTransferEhhjPcj+0x13a>
  if (!maxpktsize) { //todo: move this check close to epinfo init. Make it 1< pktsize <64
    return 0xFE;
  }
 
  regWr( rHCTL, devtable[ addr ].epinfo[ ep ].sndToggle );    //set toggle value
  while( bytes_left ) {
     c56:	81 14       	cp	r8, r1
     c58:	91 04       	cpc	r9, r1
     c5a:	09 f0       	breq	.+2      	; 0xc5e <_ZN3USB11outTransferEhhjPcj+0x1b8>
     c5c:	85 cf       	rjmp	.-246    	; 0xb68 <_ZN3USB11outTransferEhhjPcj+0xc2>
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
    data_p += bytes_tosend;
  }//while( bytes_left...
  devtable[ addr ].epinfo[ ep ].sndToggle = ( regRd( rHRSL ) & bmSNDTOGRD ) ? bmSNDTOG1 : bmSNDTOG0;  //update toggle
     c5e:	f2 01       	movw	r30, r4
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e4 0d       	add	r30, r4
     c66:	f5 1d       	adc	r31, r5
     c68:	e4 56       	subi	r30, 0x64	; 100
     c6a:	fa 4f       	sbci	r31, 0xFA	; 250
     c6c:	00 81       	ld	r16, Z
     c6e:	11 81       	ldd	r17, Z+1	; 0x01
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	68 ef       	ldi	r22, 0xF8	; 248
     c76:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     c7a:	85 fd       	sbrc	r24, 5
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <_ZN3USB11outTransferEhhjPcj+0x1dc>
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <_ZN3USB11outTransferEhhjPcj+0x1de>
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	02 0d       	add	r16, r2
     c86:	13 1d       	adc	r17, r3
     c88:	d8 01       	movw	r26, r16
     c8a:	15 96       	adiw	r26, 0x05	; 5
     c8c:	8c 93       	st	X, r24
  return( rcode );    //should be 0 in all cases
}
     c8e:	8f 2d       	mov	r24, r15
     c90:	2c 96       	adiw	r28, 0x0c	; 12
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	7f 90       	pop	r7
     cb6:	6f 90       	pop	r6
     cb8:	5f 90       	pop	r5
     cba:	4f 90       	pop	r4
     cbc:	3f 90       	pop	r3
     cbe:	2f 90       	pop	r2
     cc0:	08 95       	ret
      regWr( rHXFR, ( tokOUT | ep ));                 //dispatch packet
      while(!(regRd( rHIRQ ) & bmHXFRDNIRQ ));        //wait for the completion IRQ
      regWr( rHIRQ, bmHXFRDNIRQ );                    //clear IRQ
      rcode = ( regRd( rHRSL ) & 0x0f );
    }//while( rcode && ....
    bytes_left -= bytes_tosend;
     cc2:	eb 85       	ldd	r30, Y+11	; 0x0b
     cc4:	fc 85       	ldd	r31, Y+12	; 0x0c
     cc6:	8e 1a       	sub	r8, r30
     cc8:	9f 0a       	sbc	r9, r31
    data_p += bytes_tosend;
     cca:	6e 0e       	add	r6, r30
     ccc:	7f 1e       	adc	r7, r31
     cce:	c3 cf       	rjmp	.-122    	; 0xc56 <_ZN3USB11outTransferEhhjPcj+0x1b0>

00000cd0 <_ZN3USB13newInTransferEhhjPcj>:
        }
  }//while( 1 )
}

/* Google variant of inTransfer. Pasted verbatim from ADK. Returns length instead of error code. Provided for compatibility with Google Open Accessory code */
int USB::newInTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     cd0:	3f 92       	push	r3
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	98 2e       	mov	r9, r24
     cf4:	89 2e       	mov	r8, r25
     cf6:	34 2e       	mov	r3, r20
     cf8:	59 01       	movw	r10, r18
     cfa:	38 01       	movw	r6, r16
     cfc:	27 01       	movw	r4, r14
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     cfe:	e6 2e       	mov	r14, r22
     d00:	ff 24       	eor	r15, r15
     d02:	87 e0       	ldi	r24, 0x07	; 7
     d04:	48 9f       	mul	r20, r24
     d06:	60 01       	movw	r12, r0
     d08:	11 24       	eor	r1, r1
     d0a:	f7 01       	movw	r30, r14
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ee 0d       	add	r30, r14
     d12:	ff 1d       	adc	r31, r15
     d14:	e4 56       	subi	r30, 0x64	; 100
     d16:	fa 4f       	sbci	r31, 0xFA	; 250
     d18:	01 90       	ld	r0, Z+
     d1a:	f0 81       	ld	r31, Z
     d1c:	e0 2d       	mov	r30, r0
     d1e:	ec 0d       	add	r30, r12
     d20:	fd 1d       	adc	r31, r13
     d22:	02 81       	ldd	r16, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
     d24:	88 ee       	ldi	r24, 0xE8	; 232
     d26:	66 81       	ldd	r22, Z+6	; 0x06
     d28:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
     d2c:	c0 e0       	ldi	r28, 0x00	; 0
     d2e:	d0 e0       	ldi	r29, 0x00	; 0
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
     d30:	89 2d       	mov	r24, r9
     d32:	98 2d       	mov	r25, r8
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	43 2d       	mov	r20, r3
     d38:	92 01       	movw	r18, r4
     d3a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN3USB11dispatchPktEhhj>
        if( rcode ) {
     d3e:	88 23       	and	r24, r24
     d40:	09 f0       	breq	.+2      	; 0xd44 <_ZN3USB13newInTransferEhhjPcj+0x74>
     d42:	46 c0       	rjmp	.+140    	; 0xdd0 <_ZN3USB13newInTransferEhhjPcj+0x100>
		return -1;                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
     d44:	89 2d       	mov	r24, r9
     d46:	98 2d       	mov	r25, r8
     d48:	68 ec       	ldi	r22, 0xC8	; 200
     d4a:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     d4e:	82 ff       	sbrs	r24, 2
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <_ZN3USB13newInTransferEhhjPcj+0x100>
            return -1;                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
     d52:	89 2d       	mov	r24, r9
     d54:	98 2d       	mov	r25, r8
     d56:	60 e3       	ldi	r22, 0x30	; 48
     d58:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     d5c:	18 2f       	mov	r17, r24
	if (xfrlen+pktsize <= nbytes) {
     d5e:	c8 0f       	add	r28, r24
     d60:	d1 1d       	adc	r29, r1
     d62:	ac 16       	cp	r10, r28
     d64:	bd 06       	cpc	r11, r29
     d66:	40 f0       	brcs	.+16     	; 0xd78 <_ZN3USB13newInTransferEhhjPcj+0xa8>
	  // Only copy the data to the buffer if the buffer's large enough.
	  data = bytesRd( rRCVFIFO, pktsize, data );
     d68:	89 2d       	mov	r24, r9
     d6a:	98 2d       	mov	r25, r8
     d6c:	68 e0       	ldi	r22, 0x08	; 8
     d6e:	41 2f       	mov	r20, r17
     d70:	93 01       	movw	r18, r6
     d72:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN8MAX3421E7bytesRdEhhPc>
     d76:	3c 01       	movw	r6, r24
	}
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	64 e0       	ldi	r22, 0x04	; 4
     d7c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     d80:	10 17       	cp	r17, r16
     d82:	18 f0       	brcs	.+6      	; 0xd8a <_ZN3USB13newInTransferEhhjPcj+0xba>
     d84:	ca 15       	cp	r28, r10
     d86:	db 05       	cpc	r29, r11
     d88:	98 f2       	brcs	.-90     	; 0xd30 <_ZN3USB13newInTransferEhhjPcj+0x60>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
     d8a:	89 2d       	mov	r24, r9
     d8c:	98 2d       	mov	r25, r8
     d8e:	68 ef       	ldi	r22, 0xF8	; 248
     d90:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     d94:	f7 01       	movw	r30, r14
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	84 ff       	sbrs	r24, 4
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <_ZN3USB13newInTransferEhhjPcj+0xe4>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     d9e:	ee 0d       	add	r30, r14
     da0:	ff 1d       	adc	r31, r15
     da2:	e4 56       	subi	r30, 0x64	; 100
     da4:	fa 4f       	sbci	r31, 0xFA	; 250
     da6:	01 90       	ld	r0, Z+
     da8:	f0 81       	ld	r31, Z
     daa:	e0 2d       	mov	r30, r0
     dac:	ec 0d       	add	r30, r12
     dae:	fd 1d       	adc	r31, r13
     db0:	80 e2       	ldi	r24, 0x20	; 32
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <_ZN3USB13newInTransferEhhjPcj+0xf8>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
     db4:	ee 0d       	add	r30, r14
     db6:	ff 1d       	adc	r31, r15
     db8:	e4 56       	subi	r30, 0x64	; 100
     dba:	fa 4f       	sbci	r31, 0xFA	; 250
     dbc:	01 90       	ld	r0, Z+
     dbe:	f0 81       	ld	r31, Z
     dc0:	e0 2d       	mov	r30, r0
     dc2:	ec 0d       	add	r30, r12
     dc4:	fd 1d       	adc	r31, r13
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	86 83       	std	Z+6, r24	; 0x06
            }
	    if (xfrlen <= nbytes) {
     dca:	ac 16       	cp	r10, r28
     dcc:	bd 06       	cpc	r11, r29
     dce:	18 f4       	brcc	.+6      	; 0xdd6 <_ZN3USB13newInTransferEhhjPcj+0x106>
     dd0:	2f ef       	ldi	r18, 0xFF	; 255
     dd2:	3f ef       	ldi	r19, 0xFF	; 255
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <_ZN3USB13newInTransferEhhjPcj+0x108>
	      return xfrlen;
     dd6:	9e 01       	movw	r18, r28
	      // than return partial data.
	      return -1;
	    }
        }
  }//while( 1 )
}
     dd8:	c9 01       	movw	r24, r18
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	cf 90       	pop	r12
     dea:	bf 90       	pop	r11
     dec:	af 90       	pop	r10
     dee:	9f 90       	pop	r9
     df0:	8f 90       	pop	r8
     df2:	7f 90       	pop	r7
     df4:	6f 90       	pop	r6
     df6:	5f 90       	pop	r5
     df8:	4f 90       	pop	r4
     dfa:	3f 90       	pop	r3
     dfc:	08 95       	ret

00000dfe <_ZN3USB10inTransferEhhjPcj>:
}
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */
/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
byte USB::inTransfer( byte addr, byte ep, unsigned int nbytes, char* data, unsigned int nak_limit )
     dfe:	2f 92       	push	r2
     e00:	3f 92       	push	r3
     e02:	4f 92       	push	r4
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	b8 2e       	mov	r11, r24
     e24:	a9 2e       	mov	r10, r25
     e26:	34 2e       	mov	r3, r20
     e28:	29 01       	movw	r4, r18
     e2a:	48 01       	movw	r8, r16
     e2c:	37 01       	movw	r6, r14
{
 byte rcode;
 byte pktsize;
 byte maxpktsize = devtable[ addr ].epinfo[ ep ].MaxPktSize; 
     e2e:	e6 2e       	mov	r14, r22
     e30:	ff 24       	eor	r15, r15
     e32:	87 e0       	ldi	r24, 0x07	; 7
     e34:	48 9f       	mul	r20, r24
     e36:	60 01       	movw	r12, r0
     e38:	11 24       	eor	r1, r1
     e3a:	f7 01       	movw	r30, r14
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	ee 0d       	add	r30, r14
     e42:	ff 1d       	adc	r31, r15
     e44:	e4 56       	subi	r30, 0x64	; 100
     e46:	fa 4f       	sbci	r31, 0xFA	; 250
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
     e4e:	ec 0d       	add	r30, r12
     e50:	fd 1d       	adc	r31, r13
     e52:	22 80       	ldd	r2, Z+2	; 0x02
 unsigned int xfrlen = 0;
    regWr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
     e54:	88 ee       	ldi	r24, 0xE8	; 232
     e56:	66 81       	ldd	r22, Z+6	; 0x06
     e58:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
    while( 1 ) { // use a 'return' to exit this loop
        rcode = dispatchPkt( tokIN, ep, nak_limit );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
     e60:	8b 2d       	mov	r24, r11
     e62:	9a 2d       	mov	r25, r10
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	43 2d       	mov	r20, r3
     e68:	93 01       	movw	r18, r6
     e6a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN3USB11dispatchPktEhhj>
     e6e:	08 2f       	mov	r16, r24
        if( rcode ) {
     e70:	88 23       	and	r24, r24
     e72:	09 f0       	breq	.+2      	; 0xe76 <_ZN3USB10inTransferEhhjPcj+0x78>
     e74:	42 c0       	rjmp	.+132    	; 0xefa <_ZN3USB10inTransferEhhjPcj+0xfc>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( regRd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
     e76:	8b 2d       	mov	r24, r11
     e78:	9a 2d       	mov	r25, r10
     e7a:	68 ec       	ldi	r22, 0xC8	; 200
     e7c:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     e80:	82 fd       	sbrc	r24, 2
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <_ZN3USB10inTransferEhhjPcj+0x8a>
     e84:	00 ef       	ldi	r16, 0xF0	; 240
     e86:	39 c0       	rjmp	.+114    	; 0xefa <_ZN3USB10inTransferEhhjPcj+0xfc>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
     e88:	8b 2d       	mov	r24, r11
     e8a:	9a 2d       	mov	r25, r10
     e8c:	60 e3       	ldi	r22, 0x30	; 48
     e8e:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     e92:	18 2f       	mov	r17, r24
        data = bytesRd( rRCVFIFO, pktsize, data );
     e94:	8b 2d       	mov	r24, r11
     e96:	9a 2d       	mov	r25, r10
     e98:	68 e0       	ldi	r22, 0x08	; 8
     e9a:	41 2f       	mov	r20, r17
     e9c:	94 01       	movw	r18, r8
     e9e:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN8MAX3421E7bytesRdEhhPc>
     ea2:	4c 01       	movw	r8, r24
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     eac:	12 15       	cp	r17, r2
     eae:	28 f0       	brcs	.+10     	; 0xeba <_ZN3USB10inTransferEhhjPcj+0xbc>
            return ( 0xf0 );                            //receive error
        }
        pktsize = regRd( rRCVBC );                      //number of received bytes
        data = bytesRd( rRCVFIFO, pktsize, data );
        regWr( rHIRQ, bmRCVDAVIRQ );                    // Clear the IRQ & free the buffer
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
     eb0:	c1 0f       	add	r28, r17
     eb2:	d1 1d       	adc	r29, r1
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {      // have we transferred 'nbytes' bytes?
     eb4:	c4 15       	cp	r28, r4
     eb6:	d5 05       	cpc	r29, r5
     eb8:	98 f2       	brcs	.-90     	; 0xe60 <_ZN3USB10inTransferEhhjPcj+0x62>
            if( regRd( rHRSL ) & bmRCVTOGRD ) {                     //save toggle value
     eba:	8b 2d       	mov	r24, r11
     ebc:	9a 2d       	mov	r25, r10
     ebe:	68 ef       	ldi	r22, 0xF8	; 248
     ec0:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
     ec4:	f7 01       	movw	r30, r14
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	84 ff       	sbrs	r24, 4
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <_ZN3USB10inTransferEhhjPcj+0xe6>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     ece:	ee 0d       	add	r30, r14
     ed0:	ff 1d       	adc	r31, r15
     ed2:	e4 56       	subi	r30, 0x64	; 100
     ed4:	fa 4f       	sbci	r31, 0xFA	; 250
     ed6:	01 90       	ld	r0, Z+
     ed8:	f0 81       	ld	r31, Z
     eda:	e0 2d       	mov	r30, r0
     edc:	ec 0d       	add	r30, r12
     ede:	fd 1d       	adc	r31, r13
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	0a c0       	rjmp	.+20     	; 0xef8 <_ZN3USB10inTransferEhhjPcj+0xfa>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
     ee4:	ee 0d       	add	r30, r14
     ee6:	ff 1d       	adc	r31, r15
     ee8:	e4 56       	subi	r30, 0x64	; 100
     eea:	fa 4f       	sbci	r31, 0xFA	; 250
     eec:	01 90       	ld	r0, Z+
     eee:	f0 81       	ld	r31, Z
     ef0:	e0 2d       	mov	r30, r0
     ef2:	ec 0d       	add	r30, r12
     ef4:	fd 1d       	adc	r31, r13
     ef6:	80 e1       	ldi	r24, 0x10	; 16
     ef8:	86 83       	std	Z+6, r24	; 0x06
            }
            return( 0 );
        }
  }//while( 1 )
}
     efa:	80 2f       	mov	r24, r16
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	af 90       	pop	r10
     f10:	9f 90       	pop	r9
     f12:	8f 90       	pop	r8
     f14:	7f 90       	pop	r7
     f16:	6f 90       	pop	r6
     f18:	5f 90       	pop	r5
     f1a:	4f 90       	pop	r4
     f1c:	3f 90       	pop	r3
     f1e:	2f 90       	pop	r2
     f20:	08 95       	ret

00000f22 <_ZN3USB8ctrlDataEhhjPchj>:
        rcode = dispatchPkt( tokINHS, ep, nak_limit );
    }
    return( rcode );
}
/* Control transfer with data stage. Stages 2 and 3 of control transfer. Assumes preipheral address is set and setup packet has been sent */
byte USB::ctrlData( byte addr, byte ep, unsigned int nbytes, char* dataptr, boolean direction, unsigned int nak_limit )
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
     f34:	86 2f       	mov	r24, r22
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a4 2f       	mov	r26, r20
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
{
 byte rcode;
  if( direction ) {                      //IN transfer
     f3c:	ee 20       	and	r14, r14
     f3e:	d9 f0       	breq	.+54     	; 0xf76 <_ZN3USB8ctrlDataEhhjPchj+0x54>
    devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
     f40:	fc 01       	movw	r30, r24
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	e8 0f       	add	r30, r24
     f48:	f9 1f       	adc	r31, r25
     f4a:	e4 56       	subi	r30, 0x64	; 100
     f4c:	fa 4f       	sbci	r31, 0xFA	; 250
     f4e:	cd 01       	movw	r24, r26
     f50:	53 e0       	ldi	r21, 0x03	; 3
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	5a 95       	dec	r21
     f58:	e1 f7       	brne	.-8      	; 0xf52 <_ZN3USB8ctrlDataEhhjPchj+0x30>
     f5a:	8a 1b       	sub	r24, r26
     f5c:	9b 0b       	sbc	r25, r27
     f5e:	01 90       	ld	r0, Z+
     f60:	f0 81       	ld	r31, Z
     f62:	e0 2d       	mov	r30, r0
     f64:	e8 0f       	add	r30, r24
     f66:	f9 1f       	adc	r31, r25
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	86 83       	std	Z+6, r24	; 0x06
    rcode = inTransfer( addr, ep, nbytes, dataptr, nak_limit );
     f6c:	ce 01       	movw	r24, r28
     f6e:	76 01       	movw	r14, r12
     f70:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN3USB10inTransferEhhjPcj>
     f74:	1a c0       	rjmp	.+52     	; 0xfaa <_ZN3USB8ctrlDataEhhjPchj+0x88>
    return( rcode );
  }
  else {              //OUT transfer
    devtable[ addr ].epinfo[ ep ].sndToggle = bmSNDTOG1;
     f76:	fc 01       	movw	r30, r24
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	e8 0f       	add	r30, r24
     f7e:	f9 1f       	adc	r31, r25
     f80:	e4 56       	subi	r30, 0x64	; 100
     f82:	fa 4f       	sbci	r31, 0xFA	; 250
     f84:	cd 01       	movw	r24, r26
     f86:	53 e0       	ldi	r21, 0x03	; 3
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	5a 95       	dec	r21
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <_ZN3USB8ctrlDataEhhjPchj+0x66>
     f90:	8a 1b       	sub	r24, r26
     f92:	9b 0b       	sbc	r25, r27
     f94:	01 90       	ld	r0, Z+
     f96:	f0 81       	ld	r31, Z
     f98:	e0 2d       	mov	r30, r0
     f9a:	e8 0f       	add	r30, r24
     f9c:	f9 1f       	adc	r31, r25
     f9e:	80 e8       	ldi	r24, 0x80	; 128
     fa0:	85 83       	std	Z+5, r24	; 0x05
    rcode = outTransfer( addr, ep, nbytes, dataptr, nak_limit );
     fa2:	ce 01       	movw	r24, r28
     fa4:	76 01       	movw	r14, r12
     fa6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN3USB11outTransferEhhjPcj>
    return( rcode );
  }    
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	08 95       	ret

00000fbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>:
/* Control transfer. Sets address, endpoint, fills control packet with necessary data, dispatches control packet, and initiates bulk IN transfer,   */
/* depending on request. Actual requests are defined as inlines                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
byte USB::ctrlReq( byte addr, byte ep, byte bmReqType, byte bRequest, byte wValLo, byte wValHi, unsigned int wInd, unsigned int nbytes, char* dataptr, unsigned int nak_limit )
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	7f 92       	push	r7
     fc4:	8f 92       	push	r8
     fc6:	9f 92       	push	r9
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	28 97       	sbiw	r28, 0x08	; 8
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	3c 01       	movw	r6, r24
     fee:	16 2f       	mov	r17, r22
     ff0:	f4 2e       	mov	r15, r20
     ff2:	d2 2e       	mov	r13, r18
     ff4:	4c 8c       	ldd	r4, Y+28	; 0x1c
     ff6:	5d 8c       	ldd	r5, Y+29	; 0x1d
{
 boolean direction = false;     //request direction, IN or OUT
 byte rcode;   
 SETUP_PKT setup_pkt;

  regWr( rPERADDR, addr );                    //set peripheral address
     ff8:	80 ee       	ldi	r24, 0xE0	; 224
     ffa:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
  if( bmReqType & 0x80 ) {
    direction = true;                       //determine request direction
  }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
     ffe:	d9 82       	std	Y+1, r13	; 0x01
    setup_pkt.bRequest = bRequest;
    1000:	0a 83       	std	Y+2, r16	; 0x02
    setup_pkt.wVal_u.wValueLo = wValLo;
    1002:	eb 82       	std	Y+3, r14	; 0x03
    setup_pkt.wVal_u.wValueHi = wValHi;
    1004:	cc 82       	std	Y+4, r12	; 0x04
    setup_pkt.wIndex = wInd;
    1006:	be 82       	std	Y+6, r11	; 0x06
    1008:	ad 82       	std	Y+5, r10	; 0x05
    setup_pkt.wLength = nbytes;
    100a:	98 86       	std	Y+8, r9	; 0x08
    100c:	8f 82       	std	Y+7, r8	; 0x07
    bytesWr( rSUDFIFO, 8, ( char *)&setup_pkt );    //transfer to setup packet FIFO
    100e:	c3 01       	movw	r24, r6
    1010:	60 e2       	ldi	r22, 0x20	; 32
    1012:	48 e0       	ldi	r20, 0x08	; 8
    1014:	9e 01       	movw	r18, r28
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN8MAX3421E7bytesWrEhhPc>
    rcode = dispatchPkt( tokSETUP, ep, nak_limit );            //dispatch packet
    101e:	c3 01       	movw	r24, r6
    1020:	60 e1       	ldi	r22, 0x10	; 16
    1022:	4f 2d       	mov	r20, r15
    1024:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1026:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1028:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN3USB11dispatchPktEhhj>
    102c:	08 2f       	mov	r16, r24
    //Serial.println("Setup packet");   //DEBUG
    if( rcode ) {                                   //return HRSLT if not zero
    102e:	88 23       	and	r24, r24
    1030:	29 f0       	breq	.+10     	; 0x103c <_ZN3USB7ctrlReqEhhhhhhjjPcj+0x80>
        Serial.print("Setup packet error: ");
    1032:	83 ed       	ldi	r24, 0xD3	; 211
    1034:	97 e0       	ldi	r25, 0x07	; 7
    1036:	62 eb       	ldi	r22, 0xB2	; 178
    1038:	72 e0       	ldi	r23, 0x02	; 2
    103a:	19 c0       	rjmp	.+50     	; 0x106e <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xb2>
        Serial.print( rcode, HEX );                                          
        return( rcode );
    103c:	bd 2c       	mov	r11, r13
    103e:	bb 1c       	adc	r11, r11
    1040:	bb 24       	eor	r11, r11
    1042:	bb 1c       	adc	r11, r11
    }
    //Serial.println( direction, HEX ); 
    if( dataptr != NULL ) {                         //data stage, if present
    1044:	41 14       	cp	r4, r1
    1046:	51 04       	cpc	r5, r1
    1048:	e1 f0       	breq	.+56     	; 0x1082 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xc6>
        rcode = ctrlData( addr, ep, nbytes, dataptr, direction );
    104a:	c3 01       	movw	r24, r6
    104c:	61 2f       	mov	r22, r17
    104e:	4f 2d       	mov	r20, r15
    1050:	94 01       	movw	r18, r8
    1052:	82 01       	movw	r16, r4
    1054:	eb 2c       	mov	r14, r11
    1056:	c1 2c       	mov	r12, r1
    1058:	ed e7       	ldi	r30, 0x7D	; 125
    105a:	de 2e       	mov	r13, r30
    105c:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3USB8ctrlDataEhhjPchj>
    1060:	08 2f       	mov	r16, r24
    }
    if( rcode ) {   //return error
    1062:	88 23       	and	r24, r24
    1064:	71 f0       	breq	.+28     	; 0x1082 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xc6>
        Serial.print("Data packet error: ");
    1066:	83 ed       	ldi	r24, 0xD3	; 211
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	67 ec       	ldi	r22, 0xC7	; 199
    106c:	72 e0       	ldi	r23, 0x02	; 2
    106e:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN5Print5printEPKc>
        Serial.print( rcode, HEX );                                          
    1072:	83 ed       	ldi	r24, 0xD3	; 211
    1074:	97 e0       	ldi	r25, 0x07	; 7
    1076:	60 2f       	mov	r22, r16
    1078:	40 e1       	ldi	r20, 0x10	; 16
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 17 14 	call	0x282e	; 0x282e <_ZN5Print5printEhi>
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <_ZN3USB7ctrlReqEhhhhhhjjPcj+0xd6>
        return( rcode );
    }
    rcode = ctrlStatus( ep, direction );                //status stage
    1082:	c3 01       	movw	r24, r6
    1084:	6f 2d       	mov	r22, r15
    1086:	4b 2d       	mov	r20, r11
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3d e7       	ldi	r19, 0x7D	; 125
    108c:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN3USB10ctrlStatusEhhj>
    1090:	08 2f       	mov	r16, r24
    return( rcode );
}
    1092:	80 2f       	mov	r24, r16
    1094:	28 96       	adiw	r28, 0x08	; 8
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	7f 90       	pop	r7
    10ba:	6f 90       	pop	r6
    10bc:	5f 90       	pop	r5
    10be:	4f 90       	pop	r4
    10c0:	08 95       	ret

000010c2 <_ZN3USB4TaskEv>:
    }//switch( rcode
  }//while( timeout > millis() 
  return( rcode );
}
/* USB main task. Performs enumeration/cleanup */
void USB::Task( void )      //USB state machine
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	62 97       	sbiw	r28, 0x12	; 18
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	08 2f       	mov	r16, r24
    10ea:	e9 2e       	mov	r14, r25
  static byte tmpaddr; 
  byte tmpdata;
  static unsigned long delay = 0;
  USB_DEVICE_DESCRIPTOR buf;
  /**/
    tmpdata = getVbusState();
    10ec:	0e 94 23 03 	call	0x646	; 0x646 <_ZN8MAX3421E12getVbusStateEv>
//
//    Serial.print("\n");
    /**/
    /* modify USB task state if Vbus changed */

    switch( tmpdata ) {
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	29 f0       	breq	.+10     	; 0x10fe <_ZN3USB4TaskEv+0x3c>
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	28 f0       	brcs	.+10     	; 0x1102 <_ZN3USB4TaskEv+0x40>
    10f8:	84 30       	cpi	r24, 0x04	; 4
    10fa:	00 f5       	brcc	.+64     	; 0x113c <_ZN3USB4TaskEv+0x7a>
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <_ZN3USB4TaskEv+0x4e>
        case SE1:   //illegal state
            usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    10fe:	83 e1       	ldi	r24, 0x13	; 19
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <_ZN3USB4TaskEv+0x76>
            break;
        case SE0:   //disconnected
            if(( usb_task_state & USB_STATE_MASK ) != USB_STATE_DETACHED ) {
    1102:	80 91 ac 05 	lds	r24, 0x05AC
    1106:	80 7f       	andi	r24, 0xF0	; 240
    1108:	80 31       	cpi	r24, 0x10	; 16
    110a:	c1 f0       	breq	.+48     	; 0x113c <_ZN3USB4TaskEv+0x7a>
                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    110c:	81 e1       	ldi	r24, 0x11	; 17
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <_ZN3USB4TaskEv+0x76>
            }
            break;
        case FSHOST:    //attached
        case LSHOST:
            if(( usb_task_state & USB_STATE_MASK ) == USB_STATE_DETACHED ) {
    1110:	80 91 ac 05 	lds	r24, 0x05AC
    1114:	80 7f       	andi	r24, 0xF0	; 240
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	89 f4       	brne	.+34     	; 0x113c <_ZN3USB4TaskEv+0x7a>
                delay = millis() + USB_SETTLE_DELAY;
    111a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
    111e:	68 53       	subi	r22, 0x38	; 56
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	60 93 ae 05 	sts	0x05AE, r22
    112a:	70 93 af 05 	sts	0x05AF, r23
    112e:	80 93 b0 05 	sts	0x05B0, r24
    1132:	90 93 b1 05 	sts	0x05B1, r25
                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	80 93 ac 05 	sts	0x05AC, r24
            }
            break;
        }// switch( tmpdata
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
    113c:	10 91 ac 05 	lds	r17, 0x05AC
    1140:	10 34       	cpi	r17, 0x40	; 64
    1142:	09 f4       	brne	.+2      	; 0x1146 <_ZN3USB4TaskEv+0x84>
    1144:	48 c0       	rjmp	.+144    	; 0x11d6 <_ZN3USB4TaskEv+0x114>
    1146:	11 34       	cpi	r17, 0x41	; 65
    1148:	40 f4       	brcc	.+16     	; 0x115a <_ZN3USB4TaskEv+0x98>
    114a:	10 32       	cpi	r17, 0x20	; 32
    114c:	61 f1       	breq	.+88     	; 0x11a6 <_ZN3USB4TaskEv+0xe4>
    114e:	10 33       	cpi	r17, 0x30	; 48
    1150:	e1 f1       	breq	.+120    	; 0x11ca <_ZN3USB4TaskEv+0x108>
    1152:	11 31       	cpi	r17, 0x11	; 17
    1154:	09 f0       	breq	.+2      	; 0x1158 <_ZN3USB4TaskEv+0x96>
    1156:	f2 c0       	rjmp	.+484    	; 0x133c <_ZN3USB4TaskEv+0x27a>
    1158:	0a c0       	rjmp	.+20     	; 0x116e <_ZN3USB4TaskEv+0xac>
    115a:	10 36       	cpi	r17, 0x60	; 96
    115c:	09 f4       	brne	.+2      	; 0x1160 <_ZN3USB4TaskEv+0x9e>
    115e:	77 c0       	rjmp	.+238    	; 0x124e <_ZN3USB4TaskEv+0x18c>
    1160:	10 37       	cpi	r17, 0x70	; 112
    1162:	09 f4       	brne	.+2      	; 0x1166 <_ZN3USB4TaskEv+0xa4>
    1164:	aa c0       	rjmp	.+340    	; 0x12ba <_ZN3USB4TaskEv+0x1f8>
    1166:	10 35       	cpi	r17, 0x50	; 80
    1168:	09 f0       	breq	.+2      	; 0x116c <_ZN3USB4TaskEv+0xaa>
    116a:	e8 c0       	rjmp	.+464    	; 0x133c <_ZN3USB4TaskEv+0x27a>
    116c:	57 c0       	rjmp	.+174    	; 0x121c <_ZN3USB4TaskEv+0x15a>
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    116e:	10 92 9e 05 	sts	0x059E, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    1172:	10 92 a0 05 	sts	0x05A0, r1
    1176:	10 92 9f 05 	sts	0x059F, r1
        devtable[ i ].devclass = 0;
    117a:	10 92 a1 05 	sts	0x05A1, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    117e:	10 92 a3 05 	sts	0x05A3, r1
    1182:	10 92 a2 05 	sts	0x05A2, r1
        devtable[ i ].devclass = 0;
    1186:	10 92 a4 05 	sts	0x05A4, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    118a:	85 ea       	ldi	r24, 0xA5	; 165
    118c:	95 e0       	ldi	r25, 0x05	; 5
    118e:	90 93 9d 05 	sts	0x059D, r25
    1192:	80 93 9c 05 	sts	0x059C, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    1196:	80 e4       	ldi	r24, 0x40	; 64
    1198:	80 93 aa 05 	sts	0x05AA, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    119c:	80 e1       	ldi	r24, 0x10	; 16
    119e:	80 93 ab 05 	sts	0x05AB, r24
    //Serial.print("USB task state: ");
    //Serial.println( usb_task_state, HEX );
    switch( usb_task_state ) {
        case USB_DETACHED_SUBSTATE_INITIALIZE:
            init();
            usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    11a2:	82 e1       	ldi	r24, 0x12	; 18
    11a4:	c9 c0       	rjmp	.+402    	; 0x1338 <_ZN3USB4TaskEv+0x276>
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE:     //just sit here
            break;
        case USB_DETACHED_SUBSTATE_ILLEGAL:             //just sit here
            break;
        case USB_ATTACHED_SUBSTATE_SETTLE:              //setlle time for just attached device                  
            if( delay < millis() ) {
    11a6:	e0 90 ae 05 	lds	r14, 0x05AE
    11aa:	f0 90 af 05 	lds	r15, 0x05AF
    11ae:	00 91 b0 05 	lds	r16, 0x05B0
    11b2:	10 91 b1 05 	lds	r17, 0x05B1
    11b6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
    11ba:	e6 16       	cp	r14, r22
    11bc:	f7 06       	cpc	r15, r23
    11be:	08 07       	cpc	r16, r24
    11c0:	19 07       	cpc	r17, r25
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <_ZN3USB4TaskEv+0x104>
    11c4:	bb c0       	rjmp	.+374    	; 0x133c <_ZN3USB4TaskEv+0x27a>
                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	b7 c0       	rjmp	.+366    	; 0x1338 <_ZN3USB4TaskEv+0x276>
            }
            break;
        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
            regWr( rHCTL, bmBUSRST );                   //issue bus reset
    11ca:	88 ee       	ldi	r24, 0xE8	; 232
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
            usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    11d2:	80 e4       	ldi	r24, 0x40	; 64
    11d4:	b1 c0       	rjmp	.+354    	; 0x1338 <_ZN3USB4TaskEv+0x276>
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
            if(( regRd( rHCTL ) & bmBUSRST ) == 0 ) {
    11d6:	80 2f       	mov	r24, r16
    11d8:	9e 2d       	mov	r25, r14
    11da:	68 ee       	ldi	r22, 0xE8	; 232
    11dc:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
    11e0:	80 fd       	sbrc	r24, 0
    11e2:	ac c0       	rjmp	.+344    	; 0x133c <_ZN3USB4TaskEv+0x27a>
                tmpdata = regRd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    11e4:	80 2f       	mov	r24, r16
    11e6:	9e 2d       	mov	r25, r14
    11e8:	68 ed       	ldi	r22, 0xD8	; 216
    11ea:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
                regWr( rMODE, tmpdata );
    11ee:	68 2f       	mov	r22, r24
    11f0:	68 60       	ori	r22, 0x08	; 8
    11f2:	88 ed       	ldi	r24, 0xD8	; 216
    11f4:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN8MAX3421E5regWrEhh>
//                  regWr( rMODE, bmSOFKAENAB );
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    11f8:	80 e5       	ldi	r24, 0x50	; 80
    11fa:	80 93 ac 05 	sts	0x05AC, r24
                delay = millis() + 20; //20ms wait after reset per USB spec
    11fe:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
    1202:	6c 5e       	subi	r22, 0xEC	; 236
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	60 93 ae 05 	sts	0x05AE, r22
    120e:	70 93 af 05 	sts	0x05AF, r23
    1212:	80 93 b0 05 	sts	0x05B0, r24
    1216:	90 93 b1 05 	sts	0x05B1, r25
    121a:	90 c0       	rjmp	.+288    	; 0x133c <_ZN3USB4TaskEv+0x27a>
            }
            break;
        case USB_ATTACHED_SUBSTATE_WAIT_SOF:  //todo: change check order
            if( regRd( rHIRQ ) & bmFRAMEIRQ ) {                         //when first SOF received we can continue
    121c:	80 2f       	mov	r24, r16
    121e:	9e 2d       	mov	r25, r14
    1220:	68 ec       	ldi	r22, 0xC8	; 200
    1222:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN8MAX3421E5regRdEh>
    1226:	86 ff       	sbrs	r24, 6
    1228:	89 c0       	rjmp	.+274    	; 0x133c <_ZN3USB4TaskEv+0x27a>
              if( delay < millis() ) {                                    //20ms passed
    122a:	e0 90 ae 05 	lds	r14, 0x05AE
    122e:	f0 90 af 05 	lds	r15, 0x05AF
    1232:	00 91 b0 05 	lds	r16, 0x05B0
    1236:	10 91 b1 05 	lds	r17, 0x05B1
    123a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <millis>
    123e:	e6 16       	cp	r14, r22
    1240:	f7 06       	cpc	r15, r23
    1242:	08 07       	cpc	r16, r24
    1244:	19 07       	cpc	r17, r25
    1246:	08 f0       	brcs	.+2      	; 0x124a <_ZN3USB4TaskEv+0x188>
    1248:	79 c0       	rjmp	.+242    	; 0x133c <_ZN3USB4TaskEv+0x27a>
                usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    124a:	80 e6       	ldi	r24, 0x60	; 96
    124c:	75 c0       	rjmp	.+234    	; 0x1338 <_ZN3USB4TaskEv+0x276>
              }
            }
            break;
        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
            // toggle( BPNT_0 );
            devtable[ 0 ].epinfo->MaxPktSize = 8;   //set max.packet size to min.allowed
    124e:	e0 91 9c 05 	lds	r30, 0x059C
    1252:	f0 91 9d 05 	lds	r31, 0x059D
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	93 83       	std	Z+3, r25	; 0x03
    125c:	82 83       	std	Z+2, r24	; 0x02
        void init();
};

//get device descriptor
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
    125e:	00 d0       	rcall	.+0      	; 0x1260 <_ZN3USB4TaskEv+0x19e>
    1260:	0f 92       	push	r0
    1262:	ce 01       	movw	r24, r28
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	ed b7       	in	r30, 0x3d	; 61
    1268:	fe b7       	in	r31, 0x3e	; 62
    126a:	92 83       	std	Z+2, r25	; 0x02
    126c:	81 83       	std	Z+1, r24	; 0x01
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	9d e7       	ldi	r25, 0x7D	; 125
    1272:	94 83       	std	Z+4, r25	; 0x04
    1274:	83 83       	std	Z+3, r24	; 0x03
    1276:	80 2f       	mov	r24, r16
    1278:	9e 2d       	mov	r25, r14
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	20 e8       	ldi	r18, 0x80	; 128
    1280:	06 e0       	ldi	r16, 0x06	; 6
    1282:	ee 24       	eor	r14, r14
    1284:	cc 24       	eor	r12, r12
    1286:	c3 94       	inc	r12
    1288:	aa 24       	eor	r10, r10
    128a:	bb 24       	eor	r11, r11
    128c:	f8 e0       	ldi	r31, 0x08	; 8
    128e:	8f 2e       	mov	r8, r31
    1290:	91 2c       	mov	r9, r1
    1292:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>
            rcode = getDevDescr( 0, 0, 8, ( char* )&buf );
            if( rcode == 0 ) {
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	88 23       	and	r24, r24
    12a0:	49 f4       	brne	.+18     	; 0x12b4 <_ZN3USB4TaskEv+0x1f2>
                devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    12a2:	e0 91 9c 05 	lds	r30, 0x059C
    12a6:	f0 91 9d 05 	lds	r31, 0x059D
    12aa:	88 85       	ldd	r24, Y+8	; 0x08
    12ac:	82 83       	std	Z+2, r24	; 0x02
    12ae:	13 82       	std	Z+3, r1	; 0x03
                usb_task_state = USB_STATE_ADDRESSING;
    12b0:	80 e7       	ldi	r24, 0x70	; 112
    12b2:	42 c0       	rjmp	.+132    	; 0x1338 <_ZN3USB4TaskEv+0x276>
            }
            else {
                usb_error = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    12b4:	10 93 ad 05 	sts	0x05AD, r17
    12b8:	3e c0       	rjmp	.+124    	; 0x1336 <_ZN3USB4TaskEv+0x274>
                usb_task_state = USB_STATE_ERROR;
            }
            break;
        case USB_STATE_ADDRESSING:
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
    12ba:	80 91 9f 05 	lds	r24, 0x059F
    12be:	90 91 a0 05 	lds	r25, 0x05A0
    12c2:	89 2b       	or	r24, r25
    12c4:	89 f5       	brne	.+98     	; 0x1328 <_ZN3USB4TaskEv+0x266>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    12c6:	80 91 9c 05 	lds	r24, 0x059C
    12ca:	90 91 9d 05 	lds	r25, 0x059D
    12ce:	90 93 a0 05 	sts	0x05A0, r25
    12d2:	80 93 9f 05 	sts	0x059F, r24
inline byte USB::getStrDescr( byte addr, byte ep, unsigned int nbytes, byte index, unsigned int langid, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, nbytes, dataptr, nak_limit ));
}
//set address 
inline byte USB::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <_ZN3USB4TaskEv+0x216>
    12d8:	0f 92       	push	r0
    12da:	ed b7       	in	r30, 0x3d	; 61
    12dc:	fe b7       	in	r31, 0x3e	; 62
    12de:	12 82       	std	Z+2, r1	; 0x02
    12e0:	11 82       	std	Z+1, r1	; 0x01
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	9d e7       	ldi	r25, 0x7D	; 125
    12e6:	94 83       	std	Z+4, r25	; 0x04
    12e8:	83 83       	std	Z+3, r24	; 0x03
    12ea:	80 2f       	mov	r24, r16
    12ec:	9e 2d       	mov	r25, r14
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	05 e0       	ldi	r16, 0x05	; 5
    12f6:	ee 24       	eor	r14, r14
    12f8:	e3 94       	inc	r14
    12fa:	cc 24       	eor	r12, r12
    12fc:	aa 24       	eor	r10, r10
    12fe:	bb 24       	eor	r11, r11
    1300:	88 24       	eor	r8, r8
    1302:	99 24       	eor	r9, r9
    1304:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>
                                                                        //temporary record
                                                                        //until plugged with real device endpoint structure
                    rcode = setAddr( 0, 0, i );
                    if( rcode == 0 ) {
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	88 23       	and	r24, r24
    1312:	29 f4       	brne	.+10     	; 0x131e <_ZN3USB4TaskEv+0x25c>
                        tmpaddr = i;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 93 b2 05 	sts	0x05B2, r24
                        usb_task_state = USB_STATE_CONFIGURING;
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <_ZN3USB4TaskEv+0x262>
                    }
                    else {
                        usb_error = USB_STATE_ADDRESSING;          //set address error
    131e:	10 93 ad 05 	sts	0x05AD, r17
                        usb_task_state = USB_STATE_ERROR;
    1322:	80 ea       	ldi	r24, 0xA0	; 160
    1324:	80 93 ac 05 	sts	0x05AC, r24
                    }
                    break;  //break if address assigned or error occured during address assignment attempt                      
                }
            }//for( i = 1; i < USB_NUMDEVICES; i++
            if( usb_task_state == USB_STATE_ADDRESSING ) {     //no vacant place in devtable
    1328:	80 91 ac 05 	lds	r24, 0x05AC
    132c:	80 37       	cpi	r24, 0x70	; 112
    132e:	31 f4       	brne	.+12     	; 0x133c <_ZN3USB4TaskEv+0x27a>
                usb_error = 0xfe;
    1330:	8e ef       	ldi	r24, 0xFE	; 254
    1332:	80 93 ad 05 	sts	0x05AD, r24
                usb_task_state = USB_STATE_ERROR;
    1336:	80 ea       	ldi	r24, 0xA0	; 160
    1338:	80 93 ac 05 	sts	0x05AC, r24
        case USB_STATE_RUNNING:
            break;
        case USB_STATE_ERROR:
            break;
    }// switch( usb_task_state
}    
    133c:	62 96       	adiw	r28, 0x12	; 18
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	cf 90       	pop	r12
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	08 95       	ret

00001360 <_ZN3USBC1Ev>:
EP_RECORD dev0ep;           //Endpoint data structure used during enumeration for uninitialized device


/* constructor */

USB::USB () {
    1360:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN8MAX3421EC2Ev>
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    1364:	81 e1       	ldi	r24, 0x11	; 17
    1366:	80 93 ac 05 	sts	0x05AC, r24
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    136a:	10 92 9e 05 	sts	0x059E, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    136e:	10 92 a0 05 	sts	0x05A0, r1
    1372:	10 92 9f 05 	sts	0x059F, r1
        devtable[ i ].devclass = 0;
    1376:	10 92 a1 05 	sts	0x05A1, r1
/* Initialize data structures */
void USB::init()
{
  byte i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    137a:	10 92 a3 05 	sts	0x05A3, r1
    137e:	10 92 a2 05 	sts	0x05A2, r1
        devtable[ i ].devclass = 0;
    1382:	10 92 a4 05 	sts	0x05A4, r1
    }
    devtable[ 0 ].epinfo = &dev0ep; //set single ep for uninitialized device  
    1386:	85 ea       	ldi	r24, 0xA5	; 165
    1388:	95 e0       	ldi	r25, 0x05	; 5
    138a:	90 93 9d 05 	sts	0x059D, r25
    138e:	80 93 9c 05 	sts	0x059C, r24
    // not necessary dev0ep.MaxPktSize = 8;          //minimum possible                        	
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    1392:	80 e4       	ldi	r24, 0x40	; 64
    1394:	80 93 aa 05 	sts	0x05AA, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	80 93 ab 05 	sts	0x05AB, r24
/* constructor */

USB::USB () {
    usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;  //set up state machine
    init(); 
}
    139e:	08 95       	ret

000013a0 <_ZN16AndroidAccessory5writeEh>:
{
    usb.outTransfer(1, out, len, (char *)buff);
    return len;
}

size_t AndroidAccessory::write(uint8_t c) {
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	fc 01       	movw	r30, r24
    13ac:	69 83       	std	Y+1, r22	; 0x01
  return write(&c, 1);
    13ae:	a0 81       	ld	r26, Z
    13b0:	b1 81       	ldd	r27, Z+1	; 0x01
    13b2:	1c 96       	adiw	r26, 0x0c	; 12
    13b4:	2d 91       	ld	r18, X+
    13b6:	3c 91       	ld	r19, X
    13b8:	1d 97       	sbiw	r26, 0x0d	; 13
    13ba:	be 01       	movw	r22, r28
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	19 95       	eicall
}
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <_ZN16AndroidAccessory5flushEv>:

    from <http://arduino.cc/en/Serial/Flush>

    We're treating this as a no-op at the moment.
  */
}
    13d0:	08 95       	ret

000013d2 <_ZN16AndroidAccessory5writeEPhj>:
int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
}

size_t AndroidAccessory::write(uint8_t *buff, size_t len)
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	fc 01       	movw	r30, r24
    13e0:	8b 01       	movw	r16, r22
    13e2:	d4 2e       	mov	r13, r20
    13e4:	c5 2e       	mov	r12, r21
{
    usb.outTransfer(1, out, len, (char *)buff);
    13e6:	49 96       	adiw	r24, 0x19	; 25
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	44 8d       	ldd	r20, Z+28	; 0x1c
    13ec:	2d 2d       	mov	r18, r13
    13ee:	35 2f       	mov	r19, r21
    13f0:	e1 2c       	mov	r14, r1
    13f2:	5d e7       	ldi	r21, 0x7D	; 125
    13f4:	f5 2e       	mov	r15, r21
    13f6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN3USB11outTransferEhhjPcj>
    return len;
}
    13fa:	8d 2d       	mov	r24, r13
    13fc:	9c 2d       	mov	r25, r12
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	08 95       	ret

0000140c <_ZN16AndroidAccessory4readEPvij>:
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}

int AndroidAccessory::read(void *buff, int len, unsigned int nakLimit)
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	fc 01       	movw	r30, r24
    1416:	8b 01       	movw	r16, r22
    1418:	da 01       	movw	r26, r20
    141a:	79 01       	movw	r14, r18
{
    return usb.newInTransfer(1, in, len, (char *)buff, nakLimit);
    141c:	49 96       	adiw	r24, 0x19	; 25
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	43 8d       	ldd	r20, Z+27	; 0x1b
    1422:	9d 01       	movw	r18, r26
    1424:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN3USB13newInTransferEhhjPcj>
}
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <_ZN16AndroidAccessory16refillDataBufferEv>:

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
}

void AndroidAccessory::refillDataBuffer() {
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	fc 01       	movw	r30, r24
  int bytesRead = 0;

  numBytesInDataBuff = nextByteInDataBuffOffset = 0;
    1438:	e9 56       	subi	r30, 0x69	; 105
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	11 82       	std	Z+1, r1	; 0x01
    143e:	10 82       	st	Z, r1
    1440:	e7 59       	subi	r30, 0x97	; 151
    1442:	f1 40       	sbci	r31, 0x01	; 1
    1444:	ef 01       	movw	r28, r30
    1446:	cb 56       	subi	r28, 0x6B	; 107
    1448:	de 4f       	sbci	r29, 0xFE	; 254
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	18 82       	st	Y, r1
  
  // TODO: Add is connected check?

  bytesRead = read(dataBuff, sizeof(dataBuff));
    144e:	cf 01       	movw	r24, r30
    1450:	eb 5a       	subi	r30, 0xAB	; 171
    1452:	fe 4f       	sbci	r31, 0xFE	; 254
    1454:	bf 01       	movw	r22, r30
    1456:	40 e4       	ldi	r20, 0x40	; 64
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3d e7       	ldi	r19, 0x7D	; 125
    145e:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN16AndroidAccessory4readEPvij>

  if (bytesRead >= 1) {
    1462:	18 16       	cp	r1, r24
    1464:	19 06       	cpc	r1, r25
    1466:	14 f4       	brge	.+4      	; 0x146c <_ZN16AndroidAccessory16refillDataBufferEv+0x3a>
    numBytesInDataBuff = bytesRead;
    1468:	99 83       	std	Y+1, r25	; 0x01
    146a:	88 83       	st	Y, r24
  }
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <_ZN16AndroidAccessory9availableEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
}

int AndroidAccessory::available() {
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	ec 01       	movw	r28, r24
  // Strictly speaking this doesn't meet the "This is only for bytes
  // that have already arrived" definition from
  // <http://arduino.cc/en/Reference/StreamAvailable> but since the
  // data isn't handled by an ISR it's the only way to avoid hanging
  // waiting for `available()` to return true.
  if (dataBufferIsEmpty()) {
    1478:	fc 01       	movw	r30, r24
    147a:	eb 56       	subi	r30, 0x6B	; 107
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	c9 56       	subi	r28, 0x69	; 105
    1480:	de 4f       	sbci	r29, 0xFE	; 254
    1482:	20 81       	ld	r18, Z
    1484:	31 81       	ldd	r19, Z+1	; 0x01
    1486:	88 81       	ld	r24, Y
    1488:	99 81       	ldd	r25, Y+1	; 0x01
    148a:	c7 59       	subi	r28, 0x97	; 151
    148c:	d1 40       	sbci	r29, 0x01	; 1
    148e:	28 17       	cp	r18, r24
    1490:	39 07       	cpc	r19, r25
    1492:	19 f4       	brne	.+6      	; 0x149a <_ZN16AndroidAccessory9availableEv+0x28>
    refillDataBuffer();
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN16AndroidAccessory16refillDataBufferEv>
    149a:	fe 01       	movw	r30, r28
    149c:	e9 56       	subi	r30, 0x69	; 105
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	cb 56       	subi	r28, 0x6B	; 107
    14a2:	de 4f       	sbci	r29, 0xFE	; 254
    14a4:	28 81       	ld	r18, Y
    14a6:	39 81       	ldd	r19, Y+1	; 0x01
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	28 1b       	sub	r18, r24
    14ae:	39 0b       	sbc	r19, r25
  }

  return numBytesInDataBuff - nextByteInDataBuffOffset;
}
    14b0:	c9 01       	movw	r24, r18
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <_ZN16AndroidAccessory4peekEv>:
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
}

int AndroidAccessory::peek() {
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24

  if (dataBufferIsEmpty()) {
    14be:	fc 01       	movw	r30, r24
    14c0:	eb 56       	subi	r30, 0x6B	; 107
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	c9 56       	subi	r28, 0x69	; 105
    14c6:	de 4f       	sbci	r29, 0xFE	; 254
    14c8:	20 81       	ld	r18, Z
    14ca:	31 81       	ldd	r19, Z+1	; 0x01
    14cc:	88 81       	ld	r24, Y
    14ce:	99 81       	ldd	r25, Y+1	; 0x01
    14d0:	c7 59       	subi	r28, 0x97	; 151
    14d2:	d1 40       	sbci	r29, 0x01	; 1
    14d4:	28 17       	cp	r18, r24
    14d6:	39 07       	cpc	r19, r25
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <_ZN16AndroidAccessory4peekEv+0x28>
    refillDataBuffer();
    14da:	ce 01       	movw	r24, r28
    14dc:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    14e0:	c9 56       	subi	r28, 0x69	; 105
    14e2:	de 4f       	sbci	r29, 0xFE	; 254
    14e4:	28 81       	ld	r18, Y
    14e6:	39 81       	ldd	r19, Y+1	; 0x01

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset];
    14e8:	9a 91       	ld	r25, -Y
    14ea:	8a 91       	ld	r24, -Y
    14ec:	c5 59       	subi	r28, 0x95	; 149
    14ee:	d1 40       	sbci	r29, 0x01	; 1
    14f0:	82 17       	cp	r24, r18
    14f2:	93 07       	cpc	r25, r19
    14f4:	19 f4       	brne	.+6      	; 0x14fc <_ZN16AndroidAccessory4peekEv+0x44>
    14f6:	ef ef       	ldi	r30, 0xFF	; 255
    14f8:	ff ef       	ldi	r31, 0xFF	; 255
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <_ZN16AndroidAccessory4peekEv+0x52>
    14fc:	c2 0f       	add	r28, r18
    14fe:	d3 1f       	adc	r29, r19
    1500:	cb 5a       	subi	r28, 0xAB	; 171
    1502:	de 4f       	sbci	r29, 0xFE	; 254
    1504:	88 81       	ld	r24, Y
    1506:	e8 2f       	mov	r30, r24
    1508:	f0 e0       	ldi	r31, 0x00	; 0
}
    150a:	cf 01       	movw	r24, r30
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <_ZN16AndroidAccessory4readEv>:
  if (bytesRead >= 1) {
    numBytesInDataBuff = bytesRead;
  }
}

int AndroidAccessory::read() {
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24

  if (dataBufferIsEmpty()) {
    1518:	fc 01       	movw	r30, r24
    151a:	eb 56       	subi	r30, 0x6B	; 107
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	c9 56       	subi	r28, 0x69	; 105
    1520:	de 4f       	sbci	r29, 0xFE	; 254
    1522:	20 81       	ld	r18, Z
    1524:	31 81       	ldd	r19, Z+1	; 0x01
    1526:	88 81       	ld	r24, Y
    1528:	99 81       	ldd	r25, Y+1	; 0x01
    152a:	c7 59       	subi	r28, 0x97	; 151
    152c:	d1 40       	sbci	r29, 0x01	; 1
    152e:	28 17       	cp	r18, r24
    1530:	39 07       	cpc	r19, r25
    1532:	19 f4       	brne	.+6      	; 0x153a <_ZN16AndroidAccessory4readEv+0x28>
    refillDataBuffer();
    1534:	ce 01       	movw	r24, r28
    1536:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN16AndroidAccessory16refillDataBufferEv>

    return connected;
}

bool AndroidAccessory::dataBufferIsEmpty() {
  return (numBytesInDataBuff == nextByteInDataBuffOffset);
    153a:	de 01       	movw	r26, r28
    153c:	a9 56       	subi	r26, 0x69	; 105
    153e:	be 4f       	sbci	r27, 0xFE	; 254
    1540:	2d 91       	ld	r18, X+
    1542:	3c 91       	ld	r19, X
    1544:	11 97       	sbiw	r26, 0x01	; 1

  if (dataBufferIsEmpty()) {
    refillDataBuffer();
  }

  return dataBufferIsEmpty() ? -1 : dataBuff[nextByteInDataBuffOffset++];
    1546:	cb 56       	subi	r28, 0x6B	; 107
    1548:	de 4f       	sbci	r29, 0xFE	; 254
    154a:	88 81       	ld	r24, Y
    154c:	99 81       	ldd	r25, Y+1	; 0x01
    154e:	c5 59       	subi	r28, 0x95	; 149
    1550:	d1 40       	sbci	r29, 0x01	; 1
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	19 f4       	brne	.+6      	; 0x155e <_ZN16AndroidAccessory4readEv+0x4c>
    1558:	ef ef       	ldi	r30, 0xFF	; 255
    155a:	ff ef       	ldi	r31, 0xFF	; 255
    155c:	0b c0       	rjmp	.+22     	; 0x1574 <_ZN16AndroidAccessory4readEv+0x62>
    155e:	c2 0f       	add	r28, r18
    1560:	d3 1f       	adc	r29, r19
    1562:	cb 5a       	subi	r28, 0xAB	; 171
    1564:	de 4f       	sbci	r29, 0xFE	; 254
    1566:	88 81       	ld	r24, Y
    1568:	e8 2f       	mov	r30, r24
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	2f 5f       	subi	r18, 0xFF	; 255
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	2d 93       	st	X+, r18
    1572:	3c 93       	st	X, r19
}
    1574:	cf 01       	movw	r24, r30
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <_ZN16AndroidAccessory11getProtocolEh>:
{
    max.powerOn();
    delay(200);
}

int AndroidAccessory::getProtocol(byte addr)
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	ef 92       	push	r14
    1588:	0f 93       	push	r16
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	0f 92       	push	r0
    1590:	0f 92       	push	r0
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
{
    uint16_t protocol = -1;
    1596:	2f ef       	ldi	r18, 0xFF	; 255
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	3a 83       	std	Y+2, r19	; 0x02
    159c:	29 83       	std	Y+1, r18	; 0x01
    usb.ctrlReq(addr, 0,
                USB_SETUP_DEVICE_TO_HOST |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <_ZN16AndroidAccessory11getProtocolEh+0x24>
    15a0:	0f 92       	push	r0
    15a2:	9e 01       	movw	r18, r28
    15a4:	2f 5f       	subi	r18, 0xFF	; 255
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	ed b7       	in	r30, 0x3d	; 61
    15aa:	fe b7       	in	r31, 0x3e	; 62
    15ac:	32 83       	std	Z+2, r19	; 0x02
    15ae:	21 83       	std	Z+1, r18	; 0x01
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3d e7       	ldi	r19, 0x7D	; 125
    15b4:	34 83       	std	Z+4, r19	; 0x04
    15b6:	23 83       	std	Z+3, r18	; 0x03
    15b8:	49 96       	adiw	r24, 0x19	; 25
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	20 ec       	ldi	r18, 0xC0	; 192
    15be:	03 e3       	ldi	r16, 0x33	; 51
    15c0:	ee 24       	eor	r14, r14
    15c2:	cc 24       	eor	r12, r12
    15c4:	aa 24       	eor	r10, r10
    15c6:	bb 24       	eor	r11, r11
    15c8:	72 e0       	ldi	r23, 0x02	; 2
    15ca:	87 2e       	mov	r8, r23
    15cc:	91 2c       	mov	r9, r1
    15ce:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    return protocol;
}
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	0f 91       	pop	r16
    15e8:	ef 90       	pop	r14
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	08 95       	ret

000015f6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>:

    return true;
}

// Finds the first bulk IN and bulk OUT endpoints
bool AndroidAccessory::findEndpoints(byte addr, EP_RECORD *inEp, EP_RECORD *outEp)
    15f6:	2f 92       	push	r2
    15f8:	3f 92       	push	r3
    15fa:	4f 92       	push	r4
    15fc:	5f 92       	push	r5
    15fe:	6f 92       	push	r6
    1600:	7f 92       	push	r7
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	ef 92       	push	r14
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x22>
    1618:	00 d0       	rcall	.+0      	; 0x161a <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x24>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	16 2f       	mov	r17, r22
    1624:	1a 01       	movw	r2, r20
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	2b 83       	std	Y+3, r18	; 0x03
{
    int len;
    byte err;
    uint8_t *p;

    err = usb.getConfDescr(addr, 0, 4, 0, (char *)descBuff);
    162a:	49 96       	adiw	r24, 0x19	; 25
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	65 e5       	ldi	r22, 0x55	; 85
    1632:	46 2e       	mov	r4, r22
    1634:	51 2c       	mov	r5, r1
    1636:	4d 81       	ldd	r20, Y+5	; 0x05
    1638:	5e 81       	ldd	r21, Y+6	; 0x06
    163a:	44 0e       	add	r4, r20
    163c:	55 1e       	adc	r5, r21
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
}
//get configuration descriptor  
inline byte USB::getConfDescr( byte addr, byte ep, unsigned int nbytes, byte conf, char* dataptr, unsigned int nak_limit ) {
        return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, dataptr, nak_limit ));
    163e:	00 d0       	rcall	.+0      	; 0x1640 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x4a>
    1640:	0f 92       	push	r0
    1642:	ad b7       	in	r26, 0x3d	; 61
    1644:	be b7       	in	r27, 0x3e	; 62
    1646:	12 96       	adiw	r26, 0x02	; 2
    1648:	5c 92       	st	X, r5
    164a:	4e 92       	st	-X, r4
    164c:	11 97       	sbiw	r26, 0x01	; 1
    164e:	e0 e0       	ldi	r30, 0x00	; 0
    1650:	fd e7       	ldi	r31, 0x7D	; 125
    1652:	14 96       	adiw	r26, 0x04	; 4
    1654:	fc 93       	st	X, r31
    1656:	ee 93       	st	-X, r30
    1658:	13 97       	sbiw	r26, 0x03	; 3
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	61 2f       	mov	r22, r17
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	20 e8       	ldi	r18, 0x80	; 128
    1664:	06 e0       	ldi	r16, 0x06	; 6
    1666:	ee 24       	eor	r14, r14
    1668:	52 e0       	ldi	r21, 0x02	; 2
    166a:	c5 2e       	mov	r12, r21
    166c:	aa 24       	eor	r10, r10
    166e:	bb 24       	eor	r11, r11
    1670:	34 e0       	ldi	r19, 0x04	; 4
    1672:	83 2e       	mov	r8, r19
    1674:	91 2c       	mov	r9, r1
    1676:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    if (err) {
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	88 23       	and	r24, r24
    1684:	29 f0       	breq	.+10     	; 0x1690 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x9a>
        Serial.print(F("Can't get config descriptor length\n"));
    1686:	83 ed       	ldi	r24, 0xD3	; 211
    1688:	97 e0       	ldi	r25, 0x07	; 7
    168a:	68 e5       	ldi	r22, 0x58	; 88
    168c:	72 e0       	ldi	r23, 0x02	; 2
    168e:	3c c0       	rjmp	.+120    	; 0x1708 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x112>
        return false;
    }


    len = descBuff[2] | ((int)descBuff[3] << 8);
    if (len > sizeof(descBuff)) {
    1690:	4d 81       	ldd	r20, Y+5	; 0x05
    1692:	5e 81       	ldd	r21, Y+6	; 0x06
    1694:	48 5a       	subi	r20, 0xA8	; 168
    1696:	5f 4f       	sbci	r21, 0xFF	; 255
    1698:	da 01       	movw	r26, r20
    169a:	9c 91       	ld	r25, X
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	2e 91       	ld	r18, -X
    16a0:	a7 55       	subi	r26, 0x57	; 87
    16a2:	b0 40       	sbci	r27, 0x00	; 0
    16a4:	be 83       	std	Y+6, r27	; 0x06
    16a6:	ad 83       	std	Y+5, r26	; 0x05
    16a8:	62 2e       	mov	r6, r18
    16aa:	77 24       	eor	r7, r7
    16ac:	68 2a       	or	r6, r24
    16ae:	79 2a       	or	r7, r25
    16b0:	b1 e0       	ldi	r27, 0x01	; 1
    16b2:	6b 16       	cp	r6, r27
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	7b 06       	cpc	r7, r27
    16b8:	28 f0       	brcs	.+10     	; 0x16c4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xce>
        Serial.print(F("config descriptor too large\n"));
    16ba:	83 ed       	ldi	r24, 0xD3	; 211
    16bc:	97 e0       	ldi	r25, 0x07	; 7
    16be:	6b e3       	ldi	r22, 0x3B	; 59
    16c0:	72 e0       	ldi	r23, 0x02	; 2
    16c2:	22 c0       	rjmp	.+68     	; 0x1708 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x112>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0xd0>
    16c6:	0f 92       	push	r0
    16c8:	ed b7       	in	r30, 0x3d	; 61
    16ca:	fe b7       	in	r31, 0x3e	; 62
    16cc:	52 82       	std	Z+2, r5	; 0x02
    16ce:	41 82       	std	Z+1, r4	; 0x01
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	5d e7       	ldi	r21, 0x7D	; 125
    16d4:	54 83       	std	Z+4, r21	; 0x04
    16d6:	43 83       	std	Z+3, r20	; 0x03
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	61 2f       	mov	r22, r17
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	20 e8       	ldi	r18, 0x80	; 128
    16e2:	06 e0       	ldi	r16, 0x06	; 6
    16e4:	ee 24       	eor	r14, r14
    16e6:	b2 e0       	ldi	r27, 0x02	; 2
    16e8:	cb 2e       	mov	r12, r27
    16ea:	aa 24       	eor	r10, r10
    16ec:	bb 24       	eor	r11, r11
    16ee:	43 01       	movw	r8, r6
    16f0:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>
            /* might want to truncate here */
        return false;
    }

    err = usb.getConfDescr(addr, 0, len, 0, (char *)descBuff);
    if (err) {
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	88 23       	and	r24, r24
    16fe:	41 f0       	breq	.+16     	; 0x1710 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x11a>
        Serial.print(F("Can't get config descriptor\n"));
    1700:	83 ed       	ldi	r24, 0xD3	; 211
    1702:	97 e0       	ldi	r25, 0x07	; 7
    1704:	6e e1       	ldi	r22, 0x1E	; 30
    1706:	72 e0       	ldi	r23, 0x02	; 2
    1708:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	78 c0       	rjmp	.+240    	; 0x1800 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x20a>
        return false;
    }

    p = descBuff;
    1710:	52 01       	movw	r10, r4
    inEp->epAddr = 0;
    1712:	d1 01       	movw	r26, r2
    1714:	1c 92       	st	X, r1
    outEp->epAddr = 0;
    1716:	eb 81       	ldd	r30, Y+3	; 0x03
    1718:	fc 81       	ldd	r31, Y+4	; 0x04
    171a:	10 82       	st	Z, r1
    while (p < (descBuff + len)){
    171c:	a5 e5       	ldi	r26, 0x55	; 85
    171e:	8a 2e       	mov	r8, r26
    1720:	91 2c       	mov	r9, r1
    1722:	86 0c       	add	r8, r6
    1724:	97 1c       	adc	r9, r7
    1726:	4d 81       	ldd	r20, Y+5	; 0x05
    1728:	5e 81       	ldd	r21, Y+6	; 0x06
    172a:	84 0e       	add	r8, r20
    172c:	95 1e       	adc	r9, r21

            if (ep) {
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
                ep->Attr = epDesc->bmAttributes;
                ep->MaxPktSize = epDesc->wMaxPacketSize;
                ep->sndToggle = bmSNDTOG0;
    172e:	f0 e4       	ldi	r31, 0x40	; 64
    1730:	cf 2e       	mov	r12, r31
                ep->rcvToggle = bmRCVTOG0;
    1732:	e0 e1       	ldi	r30, 0x10	; 16
    1734:	ee 2e       	mov	r14, r30
    1736:	48 c0       	rjmp	.+144    	; 0x17c8 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1d2>

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
        uint8_t descLen = p[0];
    1738:	d5 01       	movw	r26, r10
    173a:	1c 91       	ld	r17, X
        uint8_t descType = p[1];
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	0c 91       	ld	r16, X
        USB_ENDPOINT_DESCRIPTOR *epDesc;
        EP_RECORD *ep;

        switch (descType) {
    1740:	04 30       	cpi	r16, 0x04	; 4
    1742:	49 f0       	breq	.+18     	; 0x1756 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x160>
    1744:	05 30       	cpi	r16, 0x05	; 5
    1746:	71 f0       	breq	.+28     	; 0x1764 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x16e>
    1748:	02 30       	cpi	r16, 0x02	; 2
    174a:	79 f5       	brne	.+94     	; 0x17aa <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1b4>
        case USB_DESCRIPTOR_CONFIGURATION:
            Serial.print(F("config desc\n"));
    174c:	83 ed       	ldi	r24, 0xD3	; 211
    174e:	97 e0       	ldi	r25, 0x07	; 7
    1750:	61 e1       	ldi	r22, 0x11	; 17
    1752:	72 e0       	ldi	r23, 0x02	; 2
    1754:	04 c0       	rjmp	.+8      	; 0x175e <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x168>
            break;

        case USB_DESCRIPTOR_INTERFACE:
            Serial.print(F("interface desc\n"));
    1756:	83 ed       	ldi	r24, 0xD3	; 211
    1758:	97 e0       	ldi	r25, 0x07	; 7
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	72 e0       	ldi	r23, 0x02	; 2
    175e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
    1762:	30 c0       	rjmp	.+96     	; 0x17c4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
            break;

        case USB_DESCRIPTOR_ENDPOINT:
            epDesc = (USB_ENDPOINT_DESCRIPTOR *)p;
            if (!inEp->epAddr && (epDesc->bEndpointAddress & 0x80))
    1764:	f1 01       	movw	r30, r2
    1766:	80 81       	ld	r24, Z
    1768:	88 23       	and	r24, r24
    176a:	29 f4       	brne	.+10     	; 0x1776 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x180>
    176c:	d5 01       	movw	r26, r10
    176e:	12 96       	adiw	r26, 0x02	; 2
    1770:	8c 91       	ld	r24, X
    1772:	88 23       	and	r24, r24
    1774:	2c f0       	brlt	.+10     	; 0x1780 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x18a>
                ep = inEp;
            else if (!outEp->epAddr)
    1776:	eb 81       	ldd	r30, Y+3	; 0x03
    1778:	fc 81       	ldd	r31, Y+4	; 0x04
    177a:	80 81       	ld	r24, Z
    177c:	88 23       	and	r24, r24
    177e:	11 f5       	brne	.+68     	; 0x17c4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
                ep = outEp;
            else
                ep = NULL;

            if (ep) {
    1780:	30 97       	sbiw	r30, 0x00	; 0
    1782:	01 f1       	breq	.+64     	; 0x17c4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
                ep->epAddr = epDesc->bEndpointAddress & 0x7f;
    1784:	d5 01       	movw	r26, r10
    1786:	12 96       	adiw	r26, 0x02	; 2
    1788:	8c 91       	ld	r24, X
    178a:	12 97       	sbiw	r26, 0x02	; 2
    178c:	8f 77       	andi	r24, 0x7F	; 127
    178e:	80 83       	st	Z, r24
                ep->Attr = epDesc->bmAttributes;
    1790:	13 96       	adiw	r26, 0x03	; 3
    1792:	8c 91       	ld	r24, X
    1794:	13 97       	sbiw	r26, 0x03	; 3
    1796:	81 83       	std	Z+1, r24	; 0x01
                ep->MaxPktSize = epDesc->wMaxPacketSize;
    1798:	14 96       	adiw	r26, 0x04	; 4
    179a:	8d 91       	ld	r24, X+
    179c:	9c 91       	ld	r25, X
    179e:	15 97       	sbiw	r26, 0x05	; 5
    17a0:	93 83       	std	Z+3, r25	; 0x03
    17a2:	82 83       	std	Z+2, r24	; 0x02
                ep->sndToggle = bmSNDTOG0;
    17a4:	c5 82       	std	Z+5, r12	; 0x05
                ep->rcvToggle = bmRCVTOG0;
    17a6:	e6 82       	std	Z+6, r14	; 0x06
    17a8:	0d c0       	rjmp	.+26     	; 0x17c4 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ce>
            }
            break;

        default:
            Serial.print(F("unkown desc type "));
    17aa:	83 ed       	ldi	r24, 0xD3	; 211
    17ac:	97 e0       	ldi	r25, 0x07	; 7
    17ae:	6f ee       	ldi	r22, 0xEF	; 239
    17b0:	71 e0       	ldi	r23, 0x01	; 1
    17b2:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
            Serial.println( descType, HEX);
    17b6:	83 ed       	ldi	r24, 0xD3	; 211
    17b8:	97 e0       	ldi	r25, 0x07	; 7
    17ba:	60 2f       	mov	r22, r16
    17bc:	40 e1       	ldi	r20, 0x10	; 16
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print7printlnEhi>
            break;
        }

        p += descLen;
    17c4:	a1 0e       	add	r10, r17
    17c6:	b1 1c       	adc	r11, r1
    }

    p = descBuff;
    inEp->epAddr = 0;
    outEp->epAddr = 0;
    while (p < (descBuff + len)){
    17c8:	a8 14       	cp	r10, r8
    17ca:	b9 04       	cpc	r11, r9
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1da>
    17ce:	b4 cf       	rjmp	.-152    	; 0x1738 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x142>
        }

        p += descLen;
    }

    if (!(inEp->epAddr && outEp->epAddr))
    17d0:	f1 01       	movw	r30, r2
    17d2:	80 81       	ld	r24, Z
    17d4:	88 23       	and	r24, r24
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1ec>
    17d8:	ab 81       	ldd	r26, Y+3	; 0x03
    17da:	bc 81       	ldd	r27, Y+4	; 0x04
    17dc:	8c 91       	ld	r24, X
    17de:	88 23       	and	r24, r24
    17e0:	31 f4       	brne	.+12     	; 0x17ee <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x1f8>
        Serial.println(F("can't find accessory endpoints"));
    17e2:	83 ed       	ldi	r24, 0xD3	; 211
    17e4:	97 e0       	ldi	r25, 0x07	; 7
    17e6:	60 ed       	ldi	r22, 0xD0	; 208
    17e8:	71 e0       	ldi	r23, 0x01	; 1
    17ea:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN5Print7printlnEPK19__FlashStringHelper>

    return inEp->epAddr && outEp->epAddr;
    17ee:	f1 01       	movw	r30, r2
    17f0:	80 81       	ld	r24, Z
    17f2:	88 23       	and	r24, r24
    17f4:	29 f0       	breq	.+10     	; 0x1800 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_+0x20a>
    17f6:	ab 81       	ldd	r26, Y+3	; 0x03
    17f8:	bc 81       	ldd	r27, Y+4	; 0x04
    17fa:	8c 91       	ld	r24, X
    17fc:	81 11       	cpse	r24, r1
    17fe:	81 e0       	ldi	r24, 0x01	; 1
}
    1800:	26 96       	adiw	r28, 0x06	; 6
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ef 90       	pop	r14
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	7f 90       	pop	r7
    1822:	6f 90       	pop	r6
    1824:	5f 90       	pop	r5
    1826:	4f 90       	pop	r4
    1828:	3f 90       	pop	r3
    182a:	2f 90       	pop	r2
    182c:	08 95       	ret

0000182e <_ZN16AndroidAccessory16configureAndroidEv>:

bool AndroidAccessory::configureAndroid(void)
    182e:	6f 92       	push	r6
    1830:	7f 92       	push	r7
    1832:	8f 92       	push	r8
    1834:	9f 92       	push	r9
    1836:	af 92       	push	r10
    1838:	bf 92       	push	r11
    183a:	cf 92       	push	r12
    183c:	ef 92       	push	r14
    183e:	0f 93       	push	r16
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2e 97       	sbiw	r28, 0x0e	; 14
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	5c 01       	movw	r10, r24
{
    byte err;
    EP_RECORD inEp, outEp;

    if (!findEndpoints(1, &inEp, &outEp))
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	4e 01       	movw	r8, r28
    185a:	08 94       	sec
    185c:	81 1c       	adc	r8, r1
    185e:	91 1c       	adc	r9, r1
    1860:	a4 01       	movw	r20, r8
    1862:	9e 01       	movw	r18, r28
    1864:	28 5f       	subi	r18, 0xF8	; 248
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZN16AndroidAccessory13findEndpointsEhP9EP_RECORDS1_>
    186c:	88 23       	and	r24, r24
    186e:	09 f4       	brne	.+2      	; 0x1872 <_ZN16AndroidAccessory16configureAndroidEv+0x44>
    1870:	8d c0       	rjmp	.+282    	; 0x198c <_ZN16AndroidAccessory16configureAndroidEv+0x15e>
        return false;

    memset(&epRecord, 0x0, sizeof(epRecord));
    1872:	c5 01       	movw	r24, r10
    1874:	4d 96       	adiw	r24, 0x1d	; 29
    1876:	fc 01       	movw	r30, r24
    1878:	88 e3       	ldi	r24, 0x38	; 56
    187a:	df 01       	movw	r26, r30
    187c:	1d 92       	st	X+, r1
    187e:	8a 95       	dec	r24
    1880:	e9 f7       	brne	.-6      	; 0x187c <_ZN16AndroidAccessory16configureAndroidEv+0x4e>

    epRecord[inEp.epAddr] = inEp;
    1882:	69 81       	ldd	r22, Y+1	; 0x01
    1884:	86 2f       	mov	r24, r22
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	b3 e0       	ldi	r27, 0x03	; 3
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	ba 95       	dec	r27
    1892:	e1 f7       	brne	.-8      	; 0x188c <_ZN16AndroidAccessory16configureAndroidEv+0x5e>
    1894:	e8 1b       	sub	r30, r24
    1896:	f9 0b       	sbc	r31, r25
    1898:	ea 0d       	add	r30, r10
    189a:	fb 1d       	adc	r31, r11
    189c:	7d 96       	adiw	r30, 0x1d	; 29
    189e:	d4 01       	movw	r26, r8
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	0d 90       	ld	r0, X+
    18a4:	01 92       	st	Z+, r0
    18a6:	81 50       	subi	r24, 0x01	; 1
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <_ZN16AndroidAccessory16configureAndroidEv+0x74>
    if (outEp.epAddr != inEp.epAddr)
    18aa:	28 85       	ldd	r18, Y+8	; 0x08
    18ac:	26 17       	cp	r18, r22
    18ae:	a1 f0       	breq	.+40     	; 0x18d8 <_ZN16AndroidAccessory16configureAndroidEv+0xaa>
        epRecord[outEp.epAddr] = outEp;
    18b0:	82 2f       	mov	r24, r18
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	fc 01       	movw	r30, r24
    18b6:	a3 e0       	ldi	r26, 0x03	; 3
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	aa 95       	dec	r26
    18be:	e1 f7       	brne	.-8      	; 0x18b8 <_ZN16AndroidAccessory16configureAndroidEv+0x8a>
    18c0:	e8 1b       	sub	r30, r24
    18c2:	f9 0b       	sbc	r31, r25
    18c4:	ea 0d       	add	r30, r10
    18c6:	fb 1d       	adc	r31, r11
    18c8:	7d 96       	adiw	r30, 0x1d	; 29
    18ca:	de 01       	movw	r26, r28
    18cc:	18 96       	adiw	r26, 0x08	; 8
    18ce:	87 e0       	ldi	r24, 0x07	; 7
    18d0:	0d 90       	ld	r0, X+
    18d2:	01 92       	st	Z+, r0
    18d4:	81 50       	subi	r24, 0x01	; 1
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <_ZN16AndroidAccessory16configureAndroidEv+0xa2>

    in = inEp.epAddr;
    18d8:	f5 01       	movw	r30, r10
    18da:	63 8f       	std	Z+27, r22	; 0x1b
    out = outEp.epAddr;
    18dc:	24 8f       	std	Z+28, r18	; 0x1c

    Serial.println(inEp.epAddr, HEX);
    18de:	83 ed       	ldi	r24, 0xD3	; 211
    18e0:	97 e0       	ldi	r25, 0x07	; 7
    18e2:	40 e1       	ldi	r20, 0x10	; 16
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print7printlnEhi>
    Serial.println(outEp.epAddr, HEX);
    18ea:	83 ed       	ldi	r24, 0xD3	; 211
    18ec:	97 e0       	ldi	r25, 0x07	; 7
    18ee:	68 85       	ldd	r22, Y+8	; 0x08
    18f0:	40 e1       	ldi	r20, 0x10	; 16
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print7printlnEhi>

    epRecord[0] = *(usb.getDevTableEntry(0,0));
    18f8:	79 e1       	ldi	r23, 0x19	; 25
    18fa:	67 2e       	mov	r6, r23
    18fc:	71 2c       	mov	r7, r1
    18fe:	6a 0c       	add	r6, r10
    1900:	7b 1c       	adc	r7, r11
    1902:	c3 01       	movw	r24, r6
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN3USB16getDevTableEntryEhh>
    190c:	d5 01       	movw	r26, r10
    190e:	5d 96       	adiw	r26, 0x1d	; 29
    1910:	fc 01       	movw	r30, r24
    1912:	87 e0       	ldi	r24, 0x07	; 7
    1914:	01 90       	ld	r0, Z+
    1916:	0d 92       	st	X+, r0
    1918:	81 50       	subi	r24, 0x01	; 1
    191a:	e1 f7       	brne	.-8      	; 0x1914 <_ZN16AndroidAccessory16configureAndroidEv+0xe6>
    usb.setDevTableEntry(1, epRecord);
    191c:	8d e1       	ldi	r24, 0x1D	; 29
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a8 0e       	add	r10, r24
    1922:	b9 1e       	adc	r11, r25
    1924:	c3 01       	movw	r24, r6
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	a5 01       	movw	r20, r10
    192a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN3USB16setDevTableEntryEhP9EP_RECORD>
inline byte USB::setAddr( byte oldaddr, byte ep, byte newaddr, unsigned int nak_limit ) {
    return( ctrlReq( oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, NULL, nak_limit ));
}
//set configuration
inline byte USB::setConf( byte addr, byte ep, byte conf_value, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, NULL, nak_limit ));         
    192e:	00 d0       	rcall	.+0      	; 0x1930 <_ZN16AndroidAccessory16configureAndroidEv+0x102>
    1930:	0f 92       	push	r0
    1932:	ad b7       	in	r26, 0x3d	; 61
    1934:	be b7       	in	r27, 0x3e	; 62
    1936:	12 96       	adiw	r26, 0x02	; 2
    1938:	1c 92       	st	X, r1
    193a:	1e 92       	st	-X, r1
    193c:	11 97       	sbiw	r26, 0x01	; 1
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	9d e7       	ldi	r25, 0x7D	; 125
    1942:	14 96       	adiw	r26, 0x04	; 4
    1944:	9c 93       	st	X, r25
    1946:	8e 93       	st	-X, r24
    1948:	13 97       	sbiw	r26, 0x03	; 3
    194a:	c3 01       	movw	r24, r6
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	09 e0       	ldi	r16, 0x09	; 9
    1954:	ee 24       	eor	r14, r14
    1956:	e3 94       	inc	r14
    1958:	cc 24       	eor	r12, r12
    195a:	aa 24       	eor	r10, r10
    195c:	bb 24       	eor	r11, r11
    195e:	88 24       	eor	r8, r8
    1960:	99 24       	eor	r9, r9
    1962:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>

    err = usb.setConf( 1, 0, 1 );
    if (err) {
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	88 23       	and	r24, r24
    1970:	41 f0       	breq	.+16     	; 0x1982 <_ZN16AndroidAccessory16configureAndroidEv+0x154>
        Serial.print(F("Can't set config to 1\n"));
    1972:	83 ed       	ldi	r24, 0xD3	; 211
    1974:	97 e0       	ldi	r25, 0x07	; 7
    1976:	69 eb       	ldi	r22, 0xB9	; 185
    1978:	71 e0       	ldi	r23, 0x01	; 1
    197a:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	05 c0       	rjmp	.+10     	; 0x198c <_ZN16AndroidAccessory16configureAndroidEv+0x15e>
        return false;
    }

    usb.setUsbTaskState( USB_STATE_RUNNING );
    1982:	c3 01       	movw	r24, r6
    1984:	60 e9       	ldi	r22, 0x90	; 144
    1986:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN3USB15setUsbTaskStateEh>
    198a:	81 e0       	ldi	r24, 0x01	; 1

    return true;
}
    198c:	2e 96       	adiw	r28, 0x0e	; 14
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	0f 91       	pop	r16
    199e:	ef 90       	pop	r14
    19a0:	cf 90       	pop	r12
    19a2:	bf 90       	pop	r11
    19a4:	af 90       	pop	r10
    19a6:	9f 90       	pop	r9
    19a8:	8f 90       	pop	r8
    19aa:	7f 90       	pop	r7
    19ac:	6f 90       	pop	r6
    19ae:	08 95       	ret

000019b0 <_ZN16AndroidAccessory10sendStringEhiPKc>:
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_GET_PROTOCOL, 0, 0, 0, 2, (char *)&protocol);
    return protocol;
}

void AndroidAccessory::sendString(byte addr, int index, const char *str)
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	ef 92       	push	r14
    19bc:	0f 93       	push	r16
    19be:	5a 01       	movw	r10, r20
    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_SEND_STRING, 0, 0, index,
                strlen(str) + 1, (char *)str);
    19c0:	d9 01       	movw	r26, r18
    19c2:	0d 90       	ld	r0, X+
    19c4:	00 20       	and	r0, r0
    19c6:	e9 f7       	brne	.-6      	; 0x19c2 <_ZN16AndroidAccessory10sendStringEhiPKc+0x12>
    19c8:	4d 01       	movw	r8, r26
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <_ZN16AndroidAccessory10sendStringEhiPKc+0x1c>
    19cc:	0f 92       	push	r0
    19ce:	ad b7       	in	r26, 0x3d	; 61
    19d0:	be b7       	in	r27, 0x3e	; 62
    19d2:	11 96       	adiw	r26, 0x01	; 1
    19d4:	82 1a       	sub	r8, r18
    19d6:	93 0a       	sbc	r9, r19
    19d8:	ed b7       	in	r30, 0x3d	; 61
    19da:	fe b7       	in	r31, 0x3e	; 62
    19dc:	21 83       	std	Z+1, r18	; 0x01
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	3c 93       	st	X, r19
    19e2:	11 97       	sbiw	r26, 0x01	; 1
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3d e7       	ldi	r19, 0x7D	; 125
    19e8:	13 96       	adiw	r26, 0x03	; 3
    19ea:	3c 93       	st	X, r19
    19ec:	2e 93       	st	-X, r18
    19ee:	12 97       	sbiw	r26, 0x02	; 2
    19f0:	49 96       	adiw	r24, 0x19	; 25
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	20 e4       	ldi	r18, 0x40	; 64
    19f6:	04 e3       	ldi	r16, 0x34	; 52
    19f8:	ee 24       	eor	r14, r14
    19fa:	cc 24       	eor	r12, r12
    19fc:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
}
    1a08:	0f 91       	pop	r16
    1a0a:	ef 90       	pop	r14
    1a0c:	cf 90       	pop	r12
    1a0e:	bf 90       	pop	r11
    1a10:	af 90       	pop	r10
    1a12:	9f 90       	pop	r9
    1a14:	8f 90       	pop	r8
    1a16:	08 95       	ret

00001a18 <_ZN16AndroidAccessory12switchDeviceEh>:


bool AndroidAccessory::switchDevice(byte addr)
    1a18:	6f 92       	push	r6
    1a1a:	7f 92       	push	r7
    1a1c:	8f 92       	push	r8
    1a1e:	9f 92       	push	r9
    1a20:	af 92       	push	r10
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	3c 01       	movw	r6, r24
    1a34:	f6 2e       	mov	r15, r22
{
    int protocol = getProtocol(addr);
    1a36:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN16AndroidAccessory11getProtocolEh>
    1a3a:	8c 01       	movw	r16, r24

	Serial.print(F("device supports protcol "));
    1a3c:	83 ed       	ldi	r24, 0xD3	; 211
    1a3e:	97 e0       	ldi	r25, 0x07	; 7
    1a40:	6e e7       	ldi	r22, 0x7E	; 126
    1a42:	72 e0       	ldi	r23, 0x02	; 2
    1a44:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(protocol);
    1a48:	83 ed       	ldi	r24, 0xD3	; 211
    1a4a:	97 e0       	ldi	r25, 0x07	; 7
    1a4c:	b8 01       	movw	r22, r16
    1a4e:	4a e0       	ldi	r20, 0x0A	; 10
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN5Print5printEii>
	Serial.print(F("\n"));
    1a56:	83 ed       	ldi	r24, 0xD3	; 211
    1a58:	97 e0       	ldi	r25, 0x07	; 7
    1a5a:	6c e7       	ldi	r22, 0x7C	; 124
    1a5c:	72 e0       	ldi	r23, 0x02	; 2
    1a5e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>

    sendString(addr, ACCESSORY_STRING_MANUFACTURER, manufacturer);
    1a62:	f3 01       	movw	r30, r6
    1a64:	24 85       	ldd	r18, Z+12	; 0x0c
    1a66:	35 85       	ldd	r19, Z+13	; 0x0d
    1a68:	c3 01       	movw	r24, r6
    1a6a:	6f 2d       	mov	r22, r15
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_MODEL, model);
    1a74:	f3 01       	movw	r30, r6
    1a76:	26 85       	ldd	r18, Z+14	; 0x0e
    1a78:	37 85       	ldd	r19, Z+15	; 0x0f
    1a7a:	c3 01       	movw	r24, r6
    1a7c:	6f 2d       	mov	r22, r15
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_DESCRIPTION, description);
    1a86:	f3 01       	movw	r30, r6
    1a88:	20 89       	ldd	r18, Z+16	; 0x10
    1a8a:	31 89       	ldd	r19, Z+17	; 0x11
    1a8c:	c3 01       	movw	r24, r6
    1a8e:	6f 2d       	mov	r22, r15
    1a90:	42 e0       	ldi	r20, 0x02	; 2
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_VERSION, version);
    1a98:	f3 01       	movw	r30, r6
    1a9a:	22 89       	ldd	r18, Z+18	; 0x12
    1a9c:	33 89       	ldd	r19, Z+19	; 0x13
    1a9e:	c3 01       	movw	r24, r6
    1aa0:	6f 2d       	mov	r22, r15
    1aa2:	43 e0       	ldi	r20, 0x03	; 3
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_URI, uri);
    1aaa:	f3 01       	movw	r30, r6
    1aac:	24 89       	ldd	r18, Z+20	; 0x14
    1aae:	35 89       	ldd	r19, Z+21	; 0x15
    1ab0:	c3 01       	movw	r24, r6
    1ab2:	6f 2d       	mov	r22, r15
    1ab4:	44 e0       	ldi	r20, 0x04	; 4
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN16AndroidAccessory10sendStringEhiPKc>
    sendString(addr, ACCESSORY_STRING_SERIAL, serial);
    1abc:	f3 01       	movw	r30, r6
    1abe:	26 89       	ldd	r18, Z+22	; 0x16
    1ac0:	37 89       	ldd	r19, Z+23	; 0x17
    1ac2:	c3 01       	movw	r24, r6
    1ac4:	6f 2d       	mov	r22, r15
    1ac6:	45 e0       	ldi	r20, 0x05	; 5
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN16AndroidAccessory10sendStringEhiPKc>

    usb.ctrlReq(addr, 0,
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);
    1ace:	e3 01       	movw	r28, r6
    1ad0:	69 96       	adiw	r28, 0x19	; 25
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <_ZN16AndroidAccessory12switchDeviceEh+0xbc>
    1ad4:	0f 92       	push	r0
    1ad6:	ed b7       	in	r30, 0x3d	; 61
    1ad8:	fe b7       	in	r31, 0x3e	; 62
    1ada:	12 82       	std	Z+2, r1	; 0x02
    1adc:	11 82       	std	Z+1, r1	; 0x01
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	9d e7       	ldi	r25, 0x7D	; 125
    1ae2:	94 83       	std	Z+4, r25	; 0x04
    1ae4:	83 83       	std	Z+3, r24	; 0x03
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	6f 2d       	mov	r22, r15
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	20 e4       	ldi	r18, 0x40	; 64
    1aee:	05 e3       	ldi	r16, 0x35	; 53
    1af0:	ee 24       	eor	r14, r14
    1af2:	cc 24       	eor	r12, r12
    1af4:	aa 24       	eor	r10, r10
    1af6:	bb 24       	eor	r11, r11
    1af8:	88 24       	eor	r8, r8
    1afa:	99 24       	eor	r9, r9
    1afc:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        max.Task();
    1b00:	83 01       	movw	r16, r6
    1b02:	08 5e       	subi	r16, 0xE8	; 232
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <_ZN16AndroidAccessory12switchDeviceEh+0x104>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1b10:	c8 01       	movw	r24, r16
    1b12:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN8MAX3421E4TaskEv>
        max.Task();
        usb.Task();
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3USB4TaskEv>
                USB_SETUP_HOST_TO_DEVICE |
                USB_SETUP_TYPE_VENDOR |
                USB_SETUP_RECIPIENT_DEVICE,
                ACCESSORY_START, 0, 0, 0, 0, NULL);

    while (usb.getUsbTaskState() != USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN3USB15getUsbTaskStateEv>
    1b22:	82 31       	cpi	r24, 0x12	; 18
    1b24:	a9 f7       	brne	.-22     	; 0x1b10 <_ZN16AndroidAccessory12switchDeviceEh+0xf8>
        max.Task();
        usb.Task();
    }

    return true;
}
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	9f 90       	pop	r9
    1b3c:	8f 90       	pop	r8
    1b3e:	7f 90       	pop	r7
    1b40:	6f 90       	pop	r6
    1b42:	08 95       	ret

00001b44 <_ZN16AndroidAccessory11isConnectedEv>:
    usb.setUsbTaskState( USB_STATE_RUNNING );

    return true;
}

bool AndroidAccessory::isConnected(void)
    1b44:	4f 92       	push	r4
    1b46:	5f 92       	push	r5
    1b48:	6f 92       	push	r6
    1b4a:	7f 92       	push	r7
    1b4c:	8f 92       	push	r8
    1b4e:	9f 92       	push	r9
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	cf 92       	push	r12
    1b56:	ef 92       	push	r14
    1b58:	0f 93       	push	r16
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	3c 01       	movw	r6, r24
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    byte err;

    max.Task();
    1b60:	48 96       	adiw	r24, 0x18	; 24
    1b62:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN8MAX3421E4TaskEv>
    usb.Task();
    1b66:	e3 01       	movw	r28, r6
    1b68:	69 96       	adiw	r28, 0x19	; 25
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3USB4TaskEv>

    if (!connected &&
    1b70:	f3 01       	movw	r30, r6
    1b72:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b74:	88 23       	and	r24, r24
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <_ZN16AndroidAccessory11isConnectedEv+0x36>
    1b78:	78 c0       	rjmp	.+240    	; 0x1c6a <_ZN16AndroidAccessory11isConnectedEv+0x126>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN3USB15getUsbTaskStateEv>
    1b80:	87 ff       	sbrs	r24, 7
    1b82:	73 c0       	rjmp	.+230    	; 0x1c6a <_ZN16AndroidAccessory11isConnectedEv+0x126>
    1b84:	ce 01       	movw	r24, r28
    1b86:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN3USB15getUsbTaskStateEv>
    1b8a:	80 39       	cpi	r24, 0x90	; 144
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <_ZN16AndroidAccessory11isConnectedEv+0x4c>
    1b8e:	6d c0       	rjmp	.+218    	; 0x1c6a <_ZN16AndroidAccessory11isConnectedEv+0x126>
    return true;
}

bool AndroidAccessory::isConnected(void)
{
    USB_DEVICE_DESCRIPTOR *devDesc = (USB_DEVICE_DESCRIPTOR *) descBuff;
    1b90:	45 e5       	ldi	r20, 0x55	; 85
    1b92:	44 2e       	mov	r4, r20
    1b94:	51 2c       	mov	r5, r1
    1b96:	46 0c       	add	r4, r6
    1b98:	57 1c       	adc	r5, r7
    usb.Task();

    if (!connected &&
        usb.getUsbTaskState() >= USB_STATE_CONFIGURING &&
        usb.getUsbTaskState() != USB_STATE_RUNNING) {
        Serial.print(F("\nDevice addressed... "));
    1b9a:	83 ed       	ldi	r24, 0xD3	; 211
    1b9c:	97 e0       	ldi	r25, 0x07	; 7
    1b9e:	63 ea       	ldi	r22, 0xA3	; 163
    1ba0:	71 e0       	ldi	r23, 0x01	; 1
    1ba2:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F("Requesting device descriptor.\n"));
    1ba6:	83 ed       	ldi	r24, 0xD3	; 211
    1ba8:	97 e0       	ldi	r25, 0x07	; 7
    1baa:	64 e8       	ldi	r22, 0x84	; 132
    1bac:	71 e0       	ldi	r23, 0x01	; 1
    1bae:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
        void init();
};

//get device descriptor
inline byte USB::getDevDescr( byte addr, byte ep, unsigned int nbytes, char* dataptr, unsigned int nak_limit ) {
    return( ctrlReq( addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, dataptr, nak_limit ));
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <_ZN16AndroidAccessory11isConnectedEv+0x70>
    1bb4:	0f 92       	push	r0
    1bb6:	ed b7       	in	r30, 0x3d	; 61
    1bb8:	fe b7       	in	r31, 0x3e	; 62
    1bba:	52 82       	std	Z+2, r5	; 0x02
    1bbc:	41 82       	std	Z+1, r4	; 0x01
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	9d e7       	ldi	r25, 0x7D	; 125
    1bc2:	94 83       	std	Z+4, r25	; 0x04
    1bc4:	83 83       	std	Z+3, r24	; 0x03
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	20 e8       	ldi	r18, 0x80	; 128
    1bce:	06 e0       	ldi	r16, 0x06	; 6
    1bd0:	ee 24       	eor	r14, r14
    1bd2:	cc 24       	eor	r12, r12
    1bd4:	c3 94       	inc	r12
    1bd6:	aa 24       	eor	r10, r10
    1bd8:	bb 24       	eor	r11, r11
    1bda:	32 e1       	ldi	r19, 0x12	; 18
    1bdc:	83 2e       	mov	r8, r19
    1bde:	91 2c       	mov	r9, r1
    1be0:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN3USB7ctrlReqEhhhhhhjjPcj>

        err = usb.getDevDescr(1, 0, 0x12, (char *) devDesc);
        if (err) {
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	88 23       	and	r24, r24
    1bee:	41 f0       	breq	.+16     	; 0x1c00 <_ZN16AndroidAccessory11isConnectedEv+0xbc>
            Serial.print(F("\nDevice descriptor cannot be retrieved. Trying again\n"));
    1bf0:	83 ed       	ldi	r24, 0xD3	; 211
    1bf2:	97 e0       	ldi	r25, 0x07	; 7
    1bf4:	6e e4       	ldi	r22, 0x4E	; 78
    1bf6:	71 e0       	ldi	r23, 0x01	; 1
    1bf8:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	27 c0       	rjmp	.+78     	; 0x1c4e <_ZN16AndroidAccessory11isConnectedEv+0x10a>
    unsigned int nextByteInDataBuffOffset;

    bool isAccessoryDevice(USB_DEVICE_DESCRIPTOR *desc)
    {
        return desc->idVendor == 0x18d1 &&
            (desc->idProduct == 0x2D00 || desc->idProduct == 0x2D01);
    1c00:	f2 01       	movw	r30, r4
    1c02:	80 85       	ldd	r24, Z+8	; 0x08
    1c04:	91 85       	ldd	r25, Z+9	; 0x09
    1c06:	81 5d       	subi	r24, 0xD1	; 209
    1c08:	98 41       	sbci	r25, 0x18	; 24
    1c0a:	a9 f5       	brne	.+106    	; 0x1c76 <_ZN16AndroidAccessory11isConnectedEv+0x132>
    1c0c:	f2 01       	movw	r30, r4
    1c0e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c10:	93 85       	ldd	r25, Z+11	; 0x0b
    1c12:	80 50       	subi	r24, 0x00	; 0
    1c14:	9d 42       	sbci	r25, 0x2D	; 45
    1c16:	02 97       	sbiw	r24, 0x02	; 2
    1c18:	70 f5       	brcc	.+92     	; 0x1c76 <_ZN16AndroidAccessory11isConnectedEv+0x132>
            return false;
        }

        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));
    1c1a:	83 ed       	ldi	r24, 0xD3	; 211
    1c1c:	97 e0       	ldi	r25, 0x07	; 7
    1c1e:	6f e2       	ldi	r22, 0x2F	; 47
    1c20:	71 e0       	ldi	r23, 0x01	; 1
    1c22:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>

            connected = configureAndroid();
    1c26:	c3 01       	movw	r24, r6
    1c28:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN16AndroidAccessory16configureAndroidEv>
    1c2c:	f3 01       	movw	r30, r6
    1c2e:	82 8f       	std	Z+26, r24	; 0x1a
    1c30:	0c c0       	rjmp	.+24     	; 0x1c4a <_ZN16AndroidAccessory11isConnectedEv+0x106>
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
        if (connected)
    1c32:	f3 01       	movw	r30, r6
    1c34:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c36:	88 23       	and	r24, r24
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <_ZN16AndroidAccessory11isConnectedEv+0x102>
            Serial.println(F("disconnected usb device\n"));
    1c3a:	83 ed       	ldi	r24, 0xD3	; 211
    1c3c:	97 e0       	ldi	r25, 0x07	; 7
    1c3e:	64 ee       	ldi	r22, 0xE4	; 228
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN5Print7printlnEPK19__FlashStringHelper>
        connected = false;
    1c46:	f3 01       	movw	r30, r6
    1c48:	12 8e       	std	Z+26, r1	; 0x1a
    }

    return connected;
    1c4a:	f3 01       	movw	r30, r6
    1c4c:	82 8d       	ldd	r24, Z+26	; 0x1a
}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	0f 91       	pop	r16
    1c54:	ef 90       	pop	r14
    1c56:	cf 90       	pop	r12
    1c58:	bf 90       	pop	r11
    1c5a:	af 90       	pop	r10
    1c5c:	9f 90       	pop	r9
    1c5e:	8f 90       	pop	r8
    1c60:	7f 90       	pop	r7
    1c62:	6f 90       	pop	r6
    1c64:	5f 90       	pop	r5
    1c66:	4f 90       	pop	r4
    1c68:	08 95       	ret
            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
            switchDevice(1);
        }
    } else if (usb.getUsbTaskState() == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE) {
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN3USB15getUsbTaskStateEv>
    1c70:	82 31       	cpi	r24, 0x12	; 18
    1c72:	59 f7       	brne	.-42     	; 0x1c4a <_ZN16AndroidAccessory11isConnectedEv+0x106>
    1c74:	de cf       	rjmp	.-68     	; 0x1c32 <_ZN16AndroidAccessory11isConnectedEv+0xee>
        if (isAccessoryDevice(devDesc)) {
            Serial.print(F("found android acessory device\n"));

            connected = configureAndroid();
        } else {
            Serial.print(F("found possible device.\n switching to serial mode\n"));
    1c76:	83 ed       	ldi	r24, 0xD3	; 211
    1c78:	97 e0       	ldi	r25, 0x07	; 7
    1c7a:	6d ef       	ldi	r22, 0xFD	; 253
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
            switchDevice(1);
    1c82:	c3 01       	movw	r24, r6
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN16AndroidAccessory12switchDeviceEh>
    1c8a:	df cf       	rjmp	.-66     	; 0x1c4a <_ZN16AndroidAccessory11isConnectedEv+0x106>

00001c8c <_ZN16AndroidAccessory7powerOnEv>:

}

void AndroidAccessory::powerOn(void)
{
    max.powerOn();
    1c8c:	48 96       	adiw	r24, 0x18	; 24
    1c8e:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZN8MAX3421E7powerOnEv>
    delay(200);
    1c92:	68 ec       	ldi	r22, 0xC8	; 200
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <delay>
}
    1c9e:	08 95       	ret

00001ca0 <_ZN16AndroidAccessoryC1EPKcS1_S1_S1_S1_S1_>:
AndroidAccessory::AndroidAccessory(const char *manufacturer,
                                   const char *model,
                                   const char *description,
                                   const char *version,
                                   const char *uri,
                                   const char *serial) : manufacturer(manufacturer),
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	5c 01       	movw	r10, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	13 82       	std	Z+3, r1	; 0x03
    1cb6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1cb8:	88 ee       	ldi	r24, 0xE8	; 232
    1cba:	93 e0       	ldi	r25, 0x03	; 3
    1cbc:	a0 e0       	ldi	r26, 0x00	; 0
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	84 83       	std	Z+4, r24	; 0x04
    1cc2:	95 83       	std	Z+5, r25	; 0x05
    1cc4:	a6 83       	std	Z+6, r26	; 0x06
    1cc6:	b7 83       	std	Z+7, r27	; 0x07
                                                         model(model),
                                                         description(description),
                                                         version(version),
                                                         uri(uri),
                                                         serial(serial),
                                                         connected(false)
    1cc8:	8f ed       	ldi	r24, 0xDF	; 223
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	75 87       	std	Z+13, r23	; 0x0d
    1cd2:	64 87       	std	Z+12, r22	; 0x0c
    1cd4:	57 87       	std	Z+15, r21	; 0x0f
    1cd6:	46 87       	std	Z+14, r20	; 0x0e
    1cd8:	31 8b       	std	Z+17, r19	; 0x11
    1cda:	20 8b       	std	Z+16, r18	; 0x10
    1cdc:	13 8b       	std	Z+19, r17	; 0x13
    1cde:	02 8b       	std	Z+18, r16	; 0x12
    1ce0:	f5 8a       	std	Z+21, r15	; 0x15
    1ce2:	e4 8a       	std	Z+20, r14	; 0x14
    1ce4:	d7 8a       	std	Z+23, r13	; 0x17
    1ce6:	c6 8a       	std	Z+22, r12	; 0x16
    1ce8:	c5 01       	movw	r24, r10
    1cea:	48 96       	adiw	r24, 0x18	; 24
    1cec:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_ZN8MAX3421EC1Ev>
    1cf0:	c5 01       	movw	r24, r10
    1cf2:	49 96       	adiw	r24, 0x19	; 25
    1cf4:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN3USBC1Ev>
    1cf8:	f5 01       	movw	r30, r10
    1cfa:	12 8e       	std	Z+26, r1	; 0x1a
{

}
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	08 95       	ret

00001d0e <loop>:
    //  motors.Init();
}

// The loop function is called in an endless loop
void loop() {
    stateMachine.Call();
    1d0e:	89 e9       	ldi	r24, 0x99	; 153
    1d10:	95 e0       	ldi	r25, 0x05	; 5
    1d12:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN12StateMachine4CallEv>
}
    1d16:	08 95       	ret

00001d18 <setup>:
// Do not remove the include below
#include "TB.h"

//The setup function is called once at startup of the sketch
void setup() {
	stateMachine.Init();
    1d18:	89 e9       	ldi	r24, 0x99	; 153
    1d1a:	95 e0       	ldi	r25, 0x05	; 5
    1d1c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN12StateMachine4InitEv>
	Serial.begin(115200);
    1d20:	83 ed       	ldi	r24, 0xD3	; 211
    1d22:	97 e0       	ldi	r25, 0x07	; 7
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	52 ec       	ldi	r21, 0xC2	; 194
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	0e 94 c6 10 	call	0x218c	; 0x218c <_ZN14HardwareSerial5beginEm>
    pinMode(LED_PIN_13, OUTPUT);
    1d30:	8d e0       	ldi	r24, 0x0D	; 13
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <pinMode>
	// usb.Init("Huawei", "U8655");
    //  motors.Init();
}
    1d38:	08 95       	ret

00001d3a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1d3a:	08 95       	ret

00001d3c <__vector_25>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
#elif defined(SIG_USART0_RECV)
  SIGNAL(SIG_USART0_RECV)
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	0b b6       	in	r0, 0x3b	; 59
    1d46:	0f 92       	push	r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	2f 93       	push	r18
    1d4c:	3f 93       	push	r19
    1d4e:	4f 93       	push	r20
    1d50:	8f 93       	push	r24
    1d52:	9f 93       	push	r25
    1d54:	ef 93       	push	r30
    1d56:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1d58:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1d5c:	20 91 f3 05 	lds	r18, 0x05F3
    1d60:	30 91 f4 05 	lds	r19, 0x05F4

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	2f 73       	andi	r18, 0x3F	; 63
    1d6a:	30 70       	andi	r19, 0x00	; 0
    1d6c:	80 91 f5 05 	lds	r24, 0x05F5
    1d70:	90 91 f6 05 	lds	r25, 0x05F6
    1d74:	28 17       	cp	r18, r24
    1d76:	39 07       	cpc	r19, r25
    1d78:	59 f0       	breq	.+22     	; 0x1d90 <__vector_25+0x54>
    buffer->buffer[buffer->head] = c;
    1d7a:	e0 91 f3 05 	lds	r30, 0x05F3
    1d7e:	f0 91 f4 05 	lds	r31, 0x05F4
    1d82:	ed 54       	subi	r30, 0x4D	; 77
    1d84:	fa 4f       	sbci	r31, 0xFA	; 250
    1d86:	40 83       	st	Z, r20
    buffer->head = i;
    1d88:	30 93 f4 05 	sts	0x05F4, r19
    1d8c:	20 93 f3 05 	sts	0x05F3, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1d90:	ff 91       	pop	r31
    1d92:	ef 91       	pop	r30
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	0f 90       	pop	r0
    1da0:	0b be       	out	0x3b, r0	; 59
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    1dac:	08 95       	ret

00001dae <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	0b b6       	in	r0, 0x3b	; 59
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	ef 93       	push	r30
    1dc8:	ff 93       	push	r31
  {
    unsigned char c = UDR1;
    1dca:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1dce:	20 91 7b 06 	lds	r18, 0x067B
    1dd2:	30 91 7c 06 	lds	r19, 0x067C

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	2f 73       	andi	r18, 0x3F	; 63
    1ddc:	30 70       	andi	r19, 0x00	; 0
    1dde:	80 91 7d 06 	lds	r24, 0x067D
    1de2:	90 91 7e 06 	lds	r25, 0x067E
    1de6:	28 17       	cp	r18, r24
    1de8:	39 07       	cpc	r19, r25
    1dea:	59 f0       	breq	.+22     	; 0x1e02 <__vector_36+0x54>
    buffer->buffer[buffer->head] = c;
    1dec:	e0 91 7b 06 	lds	r30, 0x067B
    1df0:	f0 91 7c 06 	lds	r31, 0x067C
    1df4:	e5 5c       	subi	r30, 0xC5	; 197
    1df6:	f9 4f       	sbci	r31, 0xF9	; 249
    1df8:	40 83       	st	Z, r20
    buffer->head = i;
    1dfa:	30 93 7c 06 	sts	0x067C, r19
    1dfe:	20 93 7b 06 	sts	0x067B, r18
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
    1e02:	ff 91       	pop	r31
    1e04:	ef 91       	pop	r30
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	4f 91       	pop	r20
    1e0c:	3f 91       	pop	r19
    1e0e:	2f 91       	pop	r18
    1e10:	0f 90       	pop	r0
    1e12:	0b be       	out	0x3b, r0	; 59
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    1e1e:	08 95       	ret

00001e20 <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
    1e20:	1f 92       	push	r1
    1e22:	0f 92       	push	r0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	0f 92       	push	r0
    1e28:	0b b6       	in	r0, 0x3b	; 59
    1e2a:	0f 92       	push	r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	2f 93       	push	r18
    1e30:	3f 93       	push	r19
    1e32:	4f 93       	push	r20
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
  {
    unsigned char c = UDR2;
    1e3c:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1e40:	20 91 03 07 	lds	r18, 0x0703
    1e44:	30 91 04 07 	lds	r19, 0x0704

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1e48:	2f 5f       	subi	r18, 0xFF	; 255
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	2f 73       	andi	r18, 0x3F	; 63
    1e4e:	30 70       	andi	r19, 0x00	; 0
    1e50:	80 91 05 07 	lds	r24, 0x0705
    1e54:	90 91 06 07 	lds	r25, 0x0706
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	59 f0       	breq	.+22     	; 0x1e74 <__vector_51+0x54>
    buffer->buffer[buffer->head] = c;
    1e5e:	e0 91 03 07 	lds	r30, 0x0703
    1e62:	f0 91 04 07 	lds	r31, 0x0704
    1e66:	ed 53       	subi	r30, 0x3D	; 61
    1e68:	f9 4f       	sbci	r31, 0xF9	; 249
    1e6a:	40 83       	st	Z, r20
    buffer->head = i;
    1e6c:	30 93 04 07 	sts	0x0704, r19
    1e70:	20 93 03 07 	sts	0x0703, r18
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
    1e74:	ff 91       	pop	r31
    1e76:	ef 91       	pop	r30
    1e78:	9f 91       	pop	r25
    1e7a:	8f 91       	pop	r24
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0b be       	out	0x3b, r0	; 59
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

00001e90 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    1e90:	08 95       	ret

00001e92 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
    1e92:	1f 92       	push	r1
    1e94:	0f 92       	push	r0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	0f 92       	push	r0
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	2f 93       	push	r18
    1ea2:	3f 93       	push	r19
    1ea4:	4f 93       	push	r20
    1ea6:	8f 93       	push	r24
    1ea8:	9f 93       	push	r25
    1eaa:	ef 93       	push	r30
    1eac:	ff 93       	push	r31
  {
    unsigned char c = UDR3;
    1eae:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1eb2:	20 91 8b 07 	lds	r18, 0x078B
    1eb6:	30 91 8c 07 	lds	r19, 0x078C

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1eba:	2f 5f       	subi	r18, 0xFF	; 255
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	2f 73       	andi	r18, 0x3F	; 63
    1ec0:	30 70       	andi	r19, 0x00	; 0
    1ec2:	80 91 8d 07 	lds	r24, 0x078D
    1ec6:	90 91 8e 07 	lds	r25, 0x078E
    1eca:	28 17       	cp	r18, r24
    1ecc:	39 07       	cpc	r19, r25
    1ece:	59 f0       	breq	.+22     	; 0x1ee6 <__vector_54+0x54>
    buffer->buffer[buffer->head] = c;
    1ed0:	e0 91 8b 07 	lds	r30, 0x078B
    1ed4:	f0 91 8c 07 	lds	r31, 0x078C
    1ed8:	e5 5b       	subi	r30, 0xB5	; 181
    1eda:	f8 4f       	sbci	r31, 0xF8	; 248
    1edc:	40 83       	st	Z, r20
    buffer->head = i;
    1ede:	30 93 8c 07 	sts	0x078C, r19
    1ee2:	20 93 8b 07 	sts	0x078B, r18
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0b be       	out	0x3b, r0	; 59
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1f02:	e0 91 df 07 	lds	r30, 0x07DF
    1f06:	f0 91 e0 07 	lds	r31, 0x07E0
    1f0a:	e0 5c       	subi	r30, 0xC0	; 192
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	81 91       	ld	r24, Z+
    1f10:	91 91       	ld	r25, Z+
    1f12:	20 81       	ld	r18, Z
    1f14:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1f16:	82 1b       	sub	r24, r18
    1f18:	93 0b       	sbc	r25, r19
    1f1a:	8f 73       	andi	r24, 0x3F	; 63
    1f1c:	90 70       	andi	r25, 0x00	; 0
    1f1e:	89 2b       	or	r24, r25
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <_Z14serialEventRunv+0x24>
    1f22:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z11serialEventv>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1f26:	e0 91 fe 07 	lds	r30, 0x07FE
    1f2a:	f0 91 ff 07 	lds	r31, 0x07FF
    1f2e:	e0 5c       	subi	r30, 0xC0	; 192
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	81 91       	ld	r24, Z+
    1f34:	91 91       	ld	r25, Z+
    1f36:	20 81       	ld	r18, Z
    1f38:	31 81       	ldd	r19, Z+1	; 0x01
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    1f3a:	82 1b       	sub	r24, r18
    1f3c:	93 0b       	sbc	r25, r19
    1f3e:	8f 73       	andi	r24, 0x3F	; 63
    1f40:	90 70       	andi	r25, 0x00	; 0
    1f42:	89 2b       	or	r24, r25
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <_Z14serialEventRunv+0x48>
    1f46:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_Z12serialEvent1v>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1f4a:	e0 91 1d 08 	lds	r30, 0x081D
    1f4e:	f0 91 1e 08 	lds	r31, 0x081E
    1f52:	e0 5c       	subi	r30, 0xC0	; 192
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	81 91       	ld	r24, Z+
    1f58:	91 91       	ld	r25, Z+
    1f5a:	20 81       	ld	r18, Z
    1f5c:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    1f5e:	82 1b       	sub	r24, r18
    1f60:	93 0b       	sbc	r25, r19
    1f62:	8f 73       	andi	r24, 0x3F	; 63
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	89 2b       	or	r24, r25
    1f68:	11 f0       	breq	.+4      	; 0x1f6e <_Z14serialEventRunv+0x6c>
    1f6a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12serialEvent2v>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1f6e:	e0 91 3c 08 	lds	r30, 0x083C
    1f72:	f0 91 3d 08 	lds	r31, 0x083D
    1f76:	e0 5c       	subi	r30, 0xC0	; 192
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	81 91       	ld	r24, Z+
    1f7c:	91 91       	ld	r25, Z+
    1f7e:	20 81       	ld	r18, Z
    1f80:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    1f82:	82 1b       	sub	r24, r18
    1f84:	93 0b       	sbc	r25, r19
    1f86:	8f 73       	andi	r24, 0x3F	; 63
    1f88:	90 70       	andi	r25, 0x00	; 0
    1f8a:	89 2b       	or	r24, r25
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <_Z14serialEventRunv+0x90>
    1f8e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <_Z12serialEvent3v>
    1f92:	08 95       	ret

00001f94 <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
    1f94:	1f 92       	push	r1
    1f96:	0f 92       	push	r0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	0f 92       	push	r0
    1f9c:	0b b6       	in	r0, 0x3b	; 59
    1f9e:	0f 92       	push	r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	2f 93       	push	r18
    1fa4:	3f 93       	push	r19
    1fa6:	8f 93       	push	r24
    1fa8:	9f 93       	push	r25
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1fae:	20 91 37 06 	lds	r18, 0x0637
    1fb2:	30 91 38 06 	lds	r19, 0x0638
    1fb6:	80 91 39 06 	lds	r24, 0x0639
    1fba:	90 91 3a 06 	lds	r25, 0x063A
    1fbe:	28 17       	cp	r18, r24
    1fc0:	39 07       	cpc	r19, r25
    1fc2:	31 f4       	brne	.+12     	; 0x1fd0 <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1fc4:	80 91 c1 00 	lds	r24, 0x00C1
    1fc8:	8f 7d       	andi	r24, 0xDF	; 223
    1fca:	80 93 c1 00 	sts	0x00C1, r24
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1fd0:	e0 91 39 06 	lds	r30, 0x0639
    1fd4:	f0 91 3a 06 	lds	r31, 0x063A
    1fd8:	e9 50       	subi	r30, 0x09	; 9
    1fda:	fa 4f       	sbci	r31, 0xFA	; 250
    1fdc:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1fde:	80 91 39 06 	lds	r24, 0x0639
    1fe2:	90 91 3a 06 	lds	r25, 0x063A
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	8f 73       	andi	r24, 0x3F	; 63
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	90 93 3a 06 	sts	0x063A, r25
    1ff0:	80 93 39 06 	sts	0x0639, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1ff4:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1ff8:	ff 91       	pop	r31
    1ffa:	ef 91       	pop	r30
    1ffc:	9f 91       	pop	r25
    1ffe:	8f 91       	pop	r24
    2000:	3f 91       	pop	r19
    2002:	2f 91       	pop	r18
    2004:	0f 90       	pop	r0
    2006:	0b be       	out	0x3b, r0	; 59
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	0f 90       	pop	r0
    200e:	1f 90       	pop	r1
    2010:	18 95       	reti

00002012 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
    2012:	1f 92       	push	r1
    2014:	0f 92       	push	r0
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	0f 92       	push	r0
    201a:	0b b6       	in	r0, 0x3b	; 59
    201c:	0f 92       	push	r0
    201e:	11 24       	eor	r1, r1
    2020:	2f 93       	push	r18
    2022:	3f 93       	push	r19
    2024:	8f 93       	push	r24
    2026:	9f 93       	push	r25
    2028:	ef 93       	push	r30
    202a:	ff 93       	push	r31
{
  if (tx_buffer1.head == tx_buffer1.tail) {
    202c:	20 91 bf 06 	lds	r18, 0x06BF
    2030:	30 91 c0 06 	lds	r19, 0x06C0
    2034:	80 91 c1 06 	lds	r24, 0x06C1
    2038:	90 91 c2 06 	lds	r25, 0x06C2
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	31 f4       	brne	.+12     	; 0x204e <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    2042:	80 91 c9 00 	lds	r24, 0x00C9
    2046:	8f 7d       	andi	r24, 0xDF	; 223
    2048:	80 93 c9 00 	sts	0x00C9, r24
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    204e:	e0 91 c1 06 	lds	r30, 0x06C1
    2052:	f0 91 c2 06 	lds	r31, 0x06C2
    2056:	e1 58       	subi	r30, 0x81	; 129
    2058:	f9 4f       	sbci	r31, 0xF9	; 249
    205a:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    205c:	80 91 c1 06 	lds	r24, 0x06C1
    2060:	90 91 c2 06 	lds	r25, 0x06C2
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	8f 73       	andi	r24, 0x3F	; 63
    2068:	90 70       	andi	r25, 0x00	; 0
    206a:	90 93 c2 06 	sts	0x06C2, r25
    206e:	80 93 c1 06 	sts	0x06C1, r24
	
    UDR1 = c;
    2072:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    2076:	ff 91       	pop	r31
    2078:	ef 91       	pop	r30
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	3f 91       	pop	r19
    2080:	2f 91       	pop	r18
    2082:	0f 90       	pop	r0
    2084:	0b be       	out	0x3b, r0	; 59
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0f 90       	pop	r0
    208c:	1f 90       	pop	r1
    208e:	18 95       	reti

00002090 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	0b b6       	in	r0, 0x3b	; 59
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	ef 93       	push	r30
    20a8:	ff 93       	push	r31
{
  if (tx_buffer2.head == tx_buffer2.tail) {
    20aa:	20 91 47 07 	lds	r18, 0x0747
    20ae:	30 91 48 07 	lds	r19, 0x0748
    20b2:	80 91 49 07 	lds	r24, 0x0749
    20b6:	90 91 4a 07 	lds	r25, 0x074A
    20ba:	28 17       	cp	r18, r24
    20bc:	39 07       	cpc	r19, r25
    20be:	31 f4       	brne	.+12     	; 0x20cc <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    20c0:	80 91 d1 00 	lds	r24, 0x00D1
    20c4:	8f 7d       	andi	r24, 0xDF	; 223
    20c6:	80 93 d1 00 	sts	0x00D1, r24
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    20cc:	e0 91 49 07 	lds	r30, 0x0749
    20d0:	f0 91 4a 07 	lds	r31, 0x074A
    20d4:	e9 5f       	subi	r30, 0xF9	; 249
    20d6:	f8 4f       	sbci	r31, 0xF8	; 248
    20d8:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    20da:	80 91 49 07 	lds	r24, 0x0749
    20de:	90 91 4a 07 	lds	r25, 0x074A
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	8f 73       	andi	r24, 0x3F	; 63
    20e6:	90 70       	andi	r25, 0x00	; 0
    20e8:	90 93 4a 07 	sts	0x074A, r25
    20ec:	80 93 49 07 	sts	0x0749, r24
	
    UDR2 = c;
    20f0:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	3f 91       	pop	r19
    20fe:	2f 91       	pop	r18
    2100:	0f 90       	pop	r0
    2102:	0b be       	out	0x3b, r0	; 59
    2104:	0f 90       	pop	r0
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	0f 90       	pop	r0
    210a:	1f 90       	pop	r1
    210c:	18 95       	reti

0000210e <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	0b b6       	in	r0, 0x3b	; 59
    2118:	0f 92       	push	r0
    211a:	11 24       	eor	r1, r1
    211c:	2f 93       	push	r18
    211e:	3f 93       	push	r19
    2120:	8f 93       	push	r24
    2122:	9f 93       	push	r25
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
{
  if (tx_buffer3.head == tx_buffer3.tail) {
    2128:	20 91 cf 07 	lds	r18, 0x07CF
    212c:	30 91 d0 07 	lds	r19, 0x07D0
    2130:	80 91 d1 07 	lds	r24, 0x07D1
    2134:	90 91 d2 07 	lds	r25, 0x07D2
    2138:	28 17       	cp	r18, r24
    213a:	39 07       	cpc	r19, r25
    213c:	31 f4       	brne	.+12     	; 0x214a <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    213e:	80 91 31 01 	lds	r24, 0x0131
    2142:	8f 7d       	andi	r24, 0xDF	; 223
    2144:	80 93 31 01 	sts	0x0131, r24
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    214a:	e0 91 d1 07 	lds	r30, 0x07D1
    214e:	f0 91 d2 07 	lds	r31, 0x07D2
    2152:	e1 57       	subi	r30, 0x71	; 113
    2154:	f8 4f       	sbci	r31, 0xF8	; 248
    2156:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    2158:	80 91 d1 07 	lds	r24, 0x07D1
    215c:	90 91 d2 07 	lds	r25, 0x07D2
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	8f 73       	andi	r24, 0x3F	; 63
    2164:	90 70       	andi	r25, 0x00	; 0
    2166:	90 93 d2 07 	sts	0x07D2, r25
    216a:	80 93 d1 07 	sts	0x07D1, r24
	
    UDR3 = c;
    216e:	20 93 36 01 	sts	0x0136, r18
  }
}
    2172:	ff 91       	pop	r31
    2174:	ef 91       	pop	r30
    2176:	9f 91       	pop	r25
    2178:	8f 91       	pop	r24
    217a:	3f 91       	pop	r19
    217c:	2f 91       	pop	r18
    217e:	0f 90       	pop	r0
    2180:	0b be       	out	0x3b, r0	; 59
    2182:	0f 90       	pop	r0
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	0f 90       	pop	r0
    2188:	1f 90       	pop	r1
    218a:	18 95       	reti

0000218c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	df 92       	push	r13
    2192:	ef 92       	push	r14
    2194:	ff 92       	push	r15
    2196:	0f 93       	push	r16
    2198:	1f 93       	push	r17
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	ec 01       	movw	r28, r24
    21a0:	7a 01       	movw	r14, r20
    21a2:	8b 01       	movw	r16, r22
    21a4:	dd 24       	eor	r13, r13
    21a6:	40 30       	cpi	r20, 0x00	; 0
    21a8:	81 ee       	ldi	r24, 0xE1	; 225
    21aa:	58 07       	cpc	r21, r24
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	68 07       	cpc	r22, r24
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	78 07       	cpc	r23, r24
    21b4:	11 f0       	breq	.+4      	; 0x21ba <_ZN14HardwareSerial5beginEm+0x2e>
    21b6:	dd 24       	eor	r13, r13
    21b8:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	a9 2e       	mov	r10, r25
    21be:	b1 2c       	mov	r11, r1
    21c0:	ec 89       	ldd	r30, Y+20	; 0x14
    21c2:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    21c4:	dd 20       	and	r13, r13
    21c6:	69 f0       	breq	.+26     	; 0x21e2 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    21c8:	c5 01       	movw	r24, r10
    21ca:	0e 8c       	ldd	r0, Y+30	; 0x1e
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <_ZN14HardwareSerial5beginEm+0x46>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <_ZN14HardwareSerial5beginEm+0x42>
    21d6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	79 e0       	ldi	r23, 0x09	; 9
    21dc:	8d e3       	ldi	r24, 0x3D	; 61
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    21e2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    21e4:	60 e8       	ldi	r22, 0x80	; 128
    21e6:	74 e8       	ldi	r23, 0x84	; 132
    21e8:	8e e1       	ldi	r24, 0x1E	; 30
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a8 01       	movw	r20, r16
    21ee:	97 01       	movw	r18, r14
    21f0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__udivmodsi4>
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	30 40       	sbci	r19, 0x00	; 0
    21f8:	40 40       	sbci	r20, 0x00	; 0
    21fa:	50 40       	sbci	r21, 0x00	; 0
    21fc:	56 95       	lsr	r21
    21fe:	47 95       	ror	r20
    2200:	37 95       	ror	r19
    2202:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    2204:	80 e1       	ldi	r24, 0x10	; 16
    2206:	20 30       	cpi	r18, 0x00	; 0
    2208:	38 07       	cpc	r19, r24
    220a:	20 f0       	brcs	.+8      	; 0x2214 <__stack+0x15>
    220c:	dd 20       	and	r13, r13
    220e:	11 f0       	breq	.+4      	; 0x2214 <__stack+0x15>
    2210:	dd 24       	eor	r13, r13
    2212:	d6 cf       	rjmp	.-84     	; 0x21c0 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2214:	e8 89       	ldd	r30, Y+16	; 0x10
    2216:	f9 89       	ldd	r31, Y+17	; 0x11
    2218:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    221a:	ea 89       	ldd	r30, Y+18	; 0x12
    221c:	fb 89       	ldd	r31, Y+19	; 0x13
    221e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    2220:	ee 89       	ldd	r30, Y+22	; 0x16
    2222:	ff 89       	ldd	r31, Y+23	; 0x17
    2224:	40 81       	ld	r20, Z
    2226:	21 e0       	ldi	r18, 0x01	; 1
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	c9 01       	movw	r24, r18
    222c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <__stack+0x35>
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	0a 94       	dec	r0
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <__stack+0x31>
    2238:	48 2b       	or	r20, r24
    223a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    223c:	ee 89       	ldd	r30, Y+22	; 0x16
    223e:	ff 89       	ldd	r31, Y+23	; 0x17
    2240:	40 81       	ld	r20, Z
    2242:	c9 01       	movw	r24, r18
    2244:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2246:	02 c0       	rjmp	.+4      	; 0x224c <__stack+0x4d>
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	0a 94       	dec	r0
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <__stack+0x49>
    2250:	48 2b       	or	r20, r24
    2252:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    2254:	ee 89       	ldd	r30, Y+22	; 0x16
    2256:	ff 89       	ldd	r31, Y+23	; 0x17
    2258:	40 81       	ld	r20, Z
    225a:	c9 01       	movw	r24, r18
    225c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <__stack+0x65>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <__stack+0x61>
    2268:	48 2b       	or	r20, r24
    226a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    226c:	ee 89       	ldd	r30, Y+22	; 0x16
    226e:	ff 89       	ldd	r31, Y+23	; 0x17
    2270:	80 81       	ld	r24, Z
    2272:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2274:	02 c0       	rjmp	.+4      	; 0x227a <__stack+0x7b>
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <__stack+0x77>
    227e:	20 95       	com	r18
    2280:	28 23       	and	r18, r24
    2282:	20 83       	st	Z, r18
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	bf 90       	pop	r11
    2294:	af 90       	pop	r10
    2296:	08 95       	ret

00002298 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2298:	dc 01       	movw	r26, r24
    229a:	1c 96       	adiw	r26, 0x0c	; 12
    229c:	ed 91       	ld	r30, X+
    229e:	fc 91       	ld	r31, X
    22a0:	1d 97       	sbiw	r26, 0x0d	; 13
    22a2:	e0 5c       	subi	r30, 0xC0	; 192
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	21 91       	ld	r18, Z+
    22a8:	31 91       	ld	r19, Z+
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	28 1b       	sub	r18, r24
    22b0:	39 0b       	sbc	r19, r25
    22b2:	2f 73       	andi	r18, 0x3F	; 63
    22b4:	30 70       	andi	r19, 0x00	; 0
}
    22b6:	c9 01       	movw	r24, r18
    22b8:	08 95       	ret

000022ba <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    22ba:	dc 01       	movw	r26, r24
    22bc:	1c 96       	adiw	r26, 0x0c	; 12
    22be:	ed 91       	ld	r30, X+
    22c0:	fc 91       	ld	r31, X
    22c2:	1d 97       	sbiw	r26, 0x0d	; 13
    22c4:	e0 5c       	subi	r30, 0xC0	; 192
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	20 81       	ld	r18, Z
    22ca:	31 81       	ldd	r19, Z+1	; 0x01
    22cc:	e0 54       	subi	r30, 0x40	; 64
    22ce:	f0 40       	sbci	r31, 0x00	; 0
    22d0:	df 01       	movw	r26, r30
    22d2:	ae 5b       	subi	r26, 0xBE	; 190
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	11 97       	sbiw	r26, 0x01	; 1
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	19 f4       	brne	.+6      	; 0x22e8 <_ZN14HardwareSerial4peekEv+0x2e>
    22e2:	2f ef       	ldi	r18, 0xFF	; 255
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	07 c0       	rjmp	.+14     	; 0x22f6 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    22e8:	8d 91       	ld	r24, X+
    22ea:	9c 91       	ld	r25, X
    22ec:	e8 0f       	add	r30, r24
    22ee:	f9 1f       	adc	r31, r25
    22f0:	80 81       	ld	r24, Z
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    22f6:	c9 01       	movw	r24, r18
    22f8:	08 95       	ret

000022fa <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    22fa:	dc 01       	movw	r26, r24
    22fc:	1c 96       	adiw	r26, 0x0c	; 12
    22fe:	ed 91       	ld	r30, X+
    2300:	fc 91       	ld	r31, X
    2302:	1d 97       	sbiw	r26, 0x0d	; 13
    2304:	e0 5c       	subi	r30, 0xC0	; 192
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	20 81       	ld	r18, Z
    230a:	31 81       	ldd	r19, Z+1	; 0x01
    230c:	e0 54       	subi	r30, 0x40	; 64
    230e:	f0 40       	sbci	r31, 0x00	; 0
    2310:	df 01       	movw	r26, r30
    2312:	ae 5b       	subi	r26, 0xBE	; 190
    2314:	bf 4f       	sbci	r27, 0xFF	; 255
    2316:	8d 91       	ld	r24, X+
    2318:	9c 91       	ld	r25, X
    231a:	11 97       	sbiw	r26, 0x01	; 1
    231c:	28 17       	cp	r18, r24
    231e:	39 07       	cpc	r19, r25
    2320:	19 f4       	brne	.+6      	; 0x2328 <_ZN14HardwareSerial4readEv+0x2e>
    2322:	2f ef       	ldi	r18, 0xFF	; 255
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	10 c0       	rjmp	.+32     	; 0x2348 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2328:	8d 91       	ld	r24, X+
    232a:	9c 91       	ld	r25, X
    232c:	11 97       	sbiw	r26, 0x01	; 1
    232e:	e8 0f       	add	r30, r24
    2330:	f9 1f       	adc	r31, r25
    2332:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    2334:	8d 91       	ld	r24, X+
    2336:	9c 91       	ld	r25, X
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	8f 73       	andi	r24, 0x3F	; 63
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	9c 93       	st	X, r25
    2344:	8e 93       	st	-X, r24
    return c;
    2346:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2348:	c9 01       	movw	r24, r18
    234a:	08 95       	ret

0000234c <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    234c:	fc 01       	movw	r30, r24
    234e:	86 85       	ldd	r24, Z+14	; 0x0e
    2350:	97 85       	ldd	r25, Z+15	; 0x0f
    2352:	dc 01       	movw	r26, r24
    2354:	a0 5c       	subi	r26, 0xC0	; 192
    2356:	bf 4f       	sbci	r27, 0xFF	; 255
    2358:	fc 01       	movw	r30, r24
    235a:	ee 5b       	subi	r30, 0xBE	; 190
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	2d 91       	ld	r18, X+
    2360:	3c 91       	ld	r19, X
    2362:	11 97       	sbiw	r26, 0x01	; 1
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	28 17       	cp	r18, r24
    236a:	39 07       	cpc	r19, r25
    236c:	c1 f7       	brne	.-16     	; 0x235e <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    236e:	08 95       	ret

00002370 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2376:	ee 85       	ldd	r30, Y+14	; 0x0e
    2378:	ff 85       	ldd	r31, Y+15	; 0x0f
    237a:	e0 5c       	subi	r30, 0xC0	; 192
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	20 81       	ld	r18, Z
    2380:	31 81       	ldd	r19, Z+1	; 0x01
    2382:	e0 54       	subi	r30, 0x40	; 64
    2384:	f0 40       	sbci	r31, 0x00	; 0
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	2f 73       	andi	r18, 0x3F	; 63
    238c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    238e:	df 01       	movw	r26, r30
    2390:	ae 5b       	subi	r26, 0xBE	; 190
    2392:	bf 4f       	sbci	r27, 0xFF	; 255
    2394:	8d 91       	ld	r24, X+
    2396:	9c 91       	ld	r25, X
    2398:	11 97       	sbiw	r26, 0x01	; 1
    239a:	28 17       	cp	r18, r24
    239c:	39 07       	cpc	r19, r25
    239e:	d1 f3       	breq	.-12     	; 0x2394 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    23a0:	e0 5c       	subi	r30, 0xC0	; 192
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	e0 54       	subi	r30, 0x40	; 64
    23aa:	f0 40       	sbci	r31, 0x00	; 0
    23ac:	e8 0f       	add	r30, r24
    23ae:	f9 1f       	adc	r31, r25
    23b0:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    23b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    23b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    23b6:	e0 5c       	subi	r30, 0xC0	; 192
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	31 83       	std	Z+1, r19	; 0x01
    23bc:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    23be:	ee 89       	ldd	r30, Y+22	; 0x16
    23c0:	ff 89       	ldd	r31, Y+23	; 0x17
    23c2:	20 81       	ld	r18, Z
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <_ZN14HardwareSerial5writeEh+0x60>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <_ZN14HardwareSerial5writeEh+0x5c>
    23d4:	28 2b       	or	r18, r24
    23d6:	20 83       	st	Z, r18
  
  return 1;
}
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    23e2:	1f 93       	push	r17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    23e4:	10 92 d6 07 	sts	0x07D6, r1
    23e8:	10 92 d5 07 	sts	0x07D5, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    23ec:	28 ee       	ldi	r18, 0xE8	; 232
    23ee:	33 e0       	ldi	r19, 0x03	; 3
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	20 93 d7 07 	sts	0x07D7, r18
    23f8:	30 93 d8 07 	sts	0x07D8, r19
    23fc:	40 93 d9 07 	sts	0x07D9, r20
    2400:	50 93 da 07 	sts	0x07DA, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2404:	61 ef       	ldi	r22, 0xF1	; 241
    2406:	72 e0       	ldi	r23, 0x02	; 2
    2408:	70 93 d4 07 	sts	0x07D4, r23
    240c:	60 93 d3 07 	sts	0x07D3, r22
{
  _rx_buffer = rx_buffer;
    2410:	83 eb       	ldi	r24, 0xB3	; 179
    2412:	95 e0       	ldi	r25, 0x05	; 5
    2414:	90 93 e0 07 	sts	0x07E0, r25
    2418:	80 93 df 07 	sts	0x07DF, r24
  _tx_buffer = tx_buffer;
    241c:	87 ef       	ldi	r24, 0xF7	; 247
    241e:	95 e0       	ldi	r25, 0x05	; 5
    2420:	90 93 e2 07 	sts	0x07E2, r25
    2424:	80 93 e1 07 	sts	0x07E1, r24
  _ubrrh = ubrrh;
    2428:	85 ec       	ldi	r24, 0xC5	; 197
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	90 93 e4 07 	sts	0x07E4, r25
    2430:	80 93 e3 07 	sts	0x07E3, r24
  _ubrrl = ubrrl;
    2434:	84 ec       	ldi	r24, 0xC4	; 196
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	90 93 e6 07 	sts	0x07E6, r25
    243c:	80 93 e5 07 	sts	0x07E5, r24
  _ucsra = ucsra;
    2440:	80 ec       	ldi	r24, 0xC0	; 192
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	90 93 e8 07 	sts	0x07E8, r25
    2448:	80 93 e7 07 	sts	0x07E7, r24
  _ucsrb = ucsrb;
    244c:	81 ec       	ldi	r24, 0xC1	; 193
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	90 93 ea 07 	sts	0x07EA, r25
    2454:	80 93 e9 07 	sts	0x07E9, r24
  _udr = udr;
    2458:	86 ec       	ldi	r24, 0xC6	; 198
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	90 93 ec 07 	sts	0x07EC, r25
    2460:	80 93 eb 07 	sts	0x07EB, r24
  _rxen = rxen;
    2464:	14 e0       	ldi	r17, 0x04	; 4
    2466:	10 93 ed 07 	sts	0x07ED, r17
  _txen = txen;
    246a:	b3 e0       	ldi	r27, 0x03	; 3
    246c:	b0 93 ee 07 	sts	0x07EE, r27
  _rxcie = rxcie;
    2470:	a7 e0       	ldi	r26, 0x07	; 7
    2472:	a0 93 ef 07 	sts	0x07EF, r26
  _udrie = udrie;
    2476:	f5 e0       	ldi	r31, 0x05	; 5
    2478:	f0 93 f0 07 	sts	0x07F0, r31
  _u2x = u2x;
    247c:	e1 e0       	ldi	r30, 0x01	; 1
    247e:	e0 93 f1 07 	sts	0x07F1, r30
    2482:	10 92 f5 07 	sts	0x07F5, r1
    2486:	10 92 f4 07 	sts	0x07F4, r1
    248a:	20 93 f6 07 	sts	0x07F6, r18
    248e:	30 93 f7 07 	sts	0x07F7, r19
    2492:	40 93 f8 07 	sts	0x07F8, r20
    2496:	50 93 f9 07 	sts	0x07F9, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    249a:	70 93 f3 07 	sts	0x07F3, r23
    249e:	60 93 f2 07 	sts	0x07F2, r22
{
  _rx_buffer = rx_buffer;
    24a2:	8b e3       	ldi	r24, 0x3B	; 59
    24a4:	96 e0       	ldi	r25, 0x06	; 6
    24a6:	90 93 ff 07 	sts	0x07FF, r25
    24aa:	80 93 fe 07 	sts	0x07FE, r24
  _tx_buffer = tx_buffer;
    24ae:	8f e7       	ldi	r24, 0x7F	; 127
    24b0:	96 e0       	ldi	r25, 0x06	; 6
    24b2:	90 93 01 08 	sts	0x0801, r25
    24b6:	80 93 00 08 	sts	0x0800, r24
  _ubrrh = ubrrh;
    24ba:	8d ec       	ldi	r24, 0xCD	; 205
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	90 93 03 08 	sts	0x0803, r25
    24c2:	80 93 02 08 	sts	0x0802, r24
  _ubrrl = ubrrl;
    24c6:	8c ec       	ldi	r24, 0xCC	; 204
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	90 93 05 08 	sts	0x0805, r25
    24ce:	80 93 04 08 	sts	0x0804, r24
  _ucsra = ucsra;
    24d2:	88 ec       	ldi	r24, 0xC8	; 200
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	90 93 07 08 	sts	0x0807, r25
    24da:	80 93 06 08 	sts	0x0806, r24
  _ucsrb = ucsrb;
    24de:	89 ec       	ldi	r24, 0xC9	; 201
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	90 93 09 08 	sts	0x0809, r25
    24e6:	80 93 08 08 	sts	0x0808, r24
  _udr = udr;
    24ea:	8e ec       	ldi	r24, 0xCE	; 206
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	90 93 0b 08 	sts	0x080B, r25
    24f2:	80 93 0a 08 	sts	0x080A, r24
  _rxen = rxen;
    24f6:	10 93 0c 08 	sts	0x080C, r17
  _txen = txen;
    24fa:	b0 93 0d 08 	sts	0x080D, r27
  _rxcie = rxcie;
    24fe:	a0 93 0e 08 	sts	0x080E, r26
  _udrie = udrie;
    2502:	f0 93 0f 08 	sts	0x080F, r31
  _u2x = u2x;
    2506:	e0 93 10 08 	sts	0x0810, r30
    250a:	10 92 14 08 	sts	0x0814, r1
    250e:	10 92 13 08 	sts	0x0813, r1
    2512:	20 93 15 08 	sts	0x0815, r18
    2516:	30 93 16 08 	sts	0x0816, r19
    251a:	40 93 17 08 	sts	0x0817, r20
    251e:	50 93 18 08 	sts	0x0818, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2522:	70 93 12 08 	sts	0x0812, r23
    2526:	60 93 11 08 	sts	0x0811, r22
{
  _rx_buffer = rx_buffer;
    252a:	83 ec       	ldi	r24, 0xC3	; 195
    252c:	96 e0       	ldi	r25, 0x06	; 6
    252e:	90 93 1e 08 	sts	0x081E, r25
    2532:	80 93 1d 08 	sts	0x081D, r24
  _tx_buffer = tx_buffer;
    2536:	87 e0       	ldi	r24, 0x07	; 7
    2538:	97 e0       	ldi	r25, 0x07	; 7
    253a:	90 93 20 08 	sts	0x0820, r25
    253e:	80 93 1f 08 	sts	0x081F, r24
  _ubrrh = ubrrh;
    2542:	85 ed       	ldi	r24, 0xD5	; 213
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	90 93 22 08 	sts	0x0822, r25
    254a:	80 93 21 08 	sts	0x0821, r24
  _ubrrl = ubrrl;
    254e:	84 ed       	ldi	r24, 0xD4	; 212
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	90 93 24 08 	sts	0x0824, r25
    2556:	80 93 23 08 	sts	0x0823, r24
  _ucsra = ucsra;
    255a:	80 ed       	ldi	r24, 0xD0	; 208
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	90 93 26 08 	sts	0x0826, r25
    2562:	80 93 25 08 	sts	0x0825, r24
  _ucsrb = ucsrb;
    2566:	81 ed       	ldi	r24, 0xD1	; 209
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	90 93 28 08 	sts	0x0828, r25
    256e:	80 93 27 08 	sts	0x0827, r24
  _udr = udr;
    2572:	86 ed       	ldi	r24, 0xD6	; 214
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	90 93 2a 08 	sts	0x082A, r25
    257a:	80 93 29 08 	sts	0x0829, r24
  _rxen = rxen;
    257e:	10 93 2b 08 	sts	0x082B, r17
  _txen = txen;
    2582:	b0 93 2c 08 	sts	0x082C, r27
  _rxcie = rxcie;
    2586:	a0 93 2d 08 	sts	0x082D, r26
  _udrie = udrie;
    258a:	f0 93 2e 08 	sts	0x082E, r31
  _u2x = u2x;
    258e:	e0 93 2f 08 	sts	0x082F, r30
    2592:	10 92 33 08 	sts	0x0833, r1
    2596:	10 92 32 08 	sts	0x0832, r1
    259a:	20 93 34 08 	sts	0x0834, r18
    259e:	30 93 35 08 	sts	0x0835, r19
    25a2:	40 93 36 08 	sts	0x0836, r20
    25a6:	50 93 37 08 	sts	0x0837, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    25aa:	70 93 31 08 	sts	0x0831, r23
    25ae:	60 93 30 08 	sts	0x0830, r22
{
  _rx_buffer = rx_buffer;
    25b2:	8b e4       	ldi	r24, 0x4B	; 75
    25b4:	97 e0       	ldi	r25, 0x07	; 7
    25b6:	90 93 3d 08 	sts	0x083D, r25
    25ba:	80 93 3c 08 	sts	0x083C, r24
  _tx_buffer = tx_buffer;
    25be:	8f e8       	ldi	r24, 0x8F	; 143
    25c0:	97 e0       	ldi	r25, 0x07	; 7
    25c2:	90 93 3f 08 	sts	0x083F, r25
    25c6:	80 93 3e 08 	sts	0x083E, r24
  _ubrrh = ubrrh;
    25ca:	85 e3       	ldi	r24, 0x35	; 53
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	90 93 41 08 	sts	0x0841, r25
    25d2:	80 93 40 08 	sts	0x0840, r24
  _ubrrl = ubrrl;
    25d6:	84 e3       	ldi	r24, 0x34	; 52
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	90 93 43 08 	sts	0x0843, r25
    25de:	80 93 42 08 	sts	0x0842, r24
  _ucsra = ucsra;
    25e2:	80 e3       	ldi	r24, 0x30	; 48
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	90 93 45 08 	sts	0x0845, r25
    25ea:	80 93 44 08 	sts	0x0844, r24
  _ucsrb = ucsrb;
    25ee:	81 e3       	ldi	r24, 0x31	; 49
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	90 93 47 08 	sts	0x0847, r25
    25f6:	80 93 46 08 	sts	0x0846, r24
  _udr = udr;
    25fa:	86 e3       	ldi	r24, 0x36	; 54
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	90 93 49 08 	sts	0x0849, r25
    2602:	80 93 48 08 	sts	0x0848, r24
  _rxen = rxen;
    2606:	10 93 4a 08 	sts	0x084A, r17
  _txen = txen;
    260a:	b0 93 4b 08 	sts	0x084B, r27
  _rxcie = rxcie;
    260e:	a0 93 4c 08 	sts	0x084C, r26
  _udrie = udrie;
    2612:	f0 93 4d 08 	sts	0x084D, r31
  _u2x = u2x;
    2616:	e0 93 4e 08 	sts	0x084E, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    261a:	1f 91       	pop	r17
    261c:	08 95       	ret

0000261e <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	7c 01       	movw	r14, r24
    2630:	6b 01       	movw	r12, r22
    2632:	8a 01       	movw	r16, r20
    2634:	c0 e0       	ldi	r28, 0x00	; 0
    2636:	d0 e0       	ldi	r29, 0x00	; 0
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    263a:	d6 01       	movw	r26, r12
    263c:	6d 91       	ld	r22, X+
    263e:	6d 01       	movw	r12, r26
    2640:	d7 01       	movw	r26, r14
    2642:	ed 91       	ld	r30, X+
    2644:	fc 91       	ld	r31, X
    2646:	01 90       	ld	r0, Z+
    2648:	f0 81       	ld	r31, Z
    264a:	e0 2d       	mov	r30, r0
    264c:	c7 01       	movw	r24, r14
    264e:	19 95       	eicall
    2650:	c8 0f       	add	r28, r24
    2652:	d9 1f       	adc	r29, r25
    2654:	01 50       	subi	r16, 0x01	; 1
    2656:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2658:	01 15       	cp	r16, r1
    265a:	11 05       	cpc	r17, r1
    265c:	71 f7       	brne	.-36     	; 0x263a <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    265e:	ce 01       	movw	r24, r28
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	df 90       	pop	r13
    266e:	cf 90       	pop	r12
    2670:	08 95       	ret

00002672 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    2680:	8b 01       	movw	r16, r22
    2682:	c0 e0       	ldi	r28, 0x00	; 0
    2684:	d0 e0       	ldi	r29, 0x00	; 0
    2686:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2688:	0f 5f       	subi	r16, 0xFF	; 255
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    268e:	66 23       	and	r22, r22
    2690:	59 f0       	breq	.+22     	; 0x26a8 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    2692:	d7 01       	movw	r26, r14
    2694:	ed 91       	ld	r30, X+
    2696:	fc 91       	ld	r31, X
    2698:	01 90       	ld	r0, Z+
    269a:	f0 81       	ld	r31, Z
    269c:	e0 2d       	mov	r30, r0
    269e:	c7 01       	movw	r24, r14
    26a0:	19 95       	eicall
    26a2:	c8 0f       	add	r28, r24
    26a4:	d9 1f       	adc	r29, r25
    26a6:	ef cf       	rjmp	.-34     	; 0x2686 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    26a8:	ce 01       	movw	r24, r28
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	08 95       	ret

000026b8 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    26c2:	dc 01       	movw	r26, r24
    26c4:	ed 91       	ld	r30, X+
    26c6:	fc 91       	ld	r31, X
    26c8:	01 90       	ld	r0, Z+
    26ca:	f0 81       	ld	r31, Z
    26cc:	e0 2d       	mov	r30, r0
    26ce:	6d e0       	ldi	r22, 0x0D	; 13
    26d0:	19 95       	eicall
    26d2:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    26d4:	d8 01       	movw	r26, r16
    26d6:	ed 91       	ld	r30, X+
    26d8:	fc 91       	ld	r31, X
    26da:	01 90       	ld	r0, Z+
    26dc:	f0 81       	ld	r31, Z
    26de:	e0 2d       	mov	r30, r0
    26e0:	c8 01       	movw	r24, r16
    26e2:	6a e0       	ldi	r22, 0x0A	; 10
    26e4:	19 95       	eicall
    26e6:	9c 01       	movw	r18, r24
    26e8:	2e 0d       	add	r18, r14
    26ea:	3f 1d       	adc	r19, r15
    26ec:	c9 01       	movw	r24, r18
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	ff 90       	pop	r15
    26f4:	ef 90       	pop	r14
    26f6:	08 95       	ret

000026f8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    2702:	0e 94 39 13 	call	0x2672	; 0x2672 <_ZN5Print5printEPK19__FlashStringHelper>
    2706:	8c 01       	movw	r16, r24
  n += println();
    2708:	c7 01       	movw	r24, r14
    270a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN5Print7printlnEv>
    270e:	9c 01       	movw	r18, r24
    2710:	20 0f       	add	r18, r16
    2712:	31 1f       	adc	r19, r17
  return n;
}
    2714:	c9 01       	movw	r24, r18
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	ff 90       	pop	r15
    271c:	ef 90       	pop	r14
    271e:	08 95       	ret

00002720 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	db 01       	movw	r26, r22
    2726:	0d 90       	ld	r0, X+
    2728:	00 20       	and	r0, r0
    272a:	e9 f7       	brne	.-6      	; 0x2726 <_ZN5Print5writeEPKc+0x6>
    272c:	11 97       	sbiw	r26, 0x01	; 1
    272e:	a6 1b       	sub	r26, r22
    2730:	b7 0b       	sbc	r27, r23
    2732:	ec 01       	movw	r28, r24
    2734:	e8 81       	ld	r30, Y
    2736:	f9 81       	ldd	r31, Y+1	; 0x01
    2738:	02 80       	ldd	r0, Z+2	; 0x02
    273a:	f3 81       	ldd	r31, Z+3	; 0x03
    273c:	e0 2d       	mov	r30, r0
    273e:	ad 01       	movw	r20, r26
    2740:	19 95       	eicall
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	08 95       	ret

00002748 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    2748:	4f 92       	push	r4
    274a:	5f 92       	push	r5
    274c:	7f 92       	push	r7
    274e:	8f 92       	push	r8
    2750:	9f 92       	push	r9
    2752:	af 92       	push	r10
    2754:	bf 92       	push	r11
    2756:	cf 92       	push	r12
    2758:	df 92       	push	r13
    275a:	ef 92       	push	r14
    275c:	ff 92       	push	r15
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	a1 97       	sbiw	r28, 0x21	; 33
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	2c 01       	movw	r4, r24
    2778:	74 2e       	mov	r7, r20
    277a:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    277c:	22 30       	cpi	r18, 0x02	; 2
    277e:	08 f4       	brcc	.+2      	; 0x2782 <_ZN5Print11printNumberEmh+0x3a>
    2780:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2782:	19 a2       	std	Y+33, r1	; 0x21
    2784:	31 e2       	ldi	r19, 0x21	; 33
    2786:	c3 2e       	mov	r12, r19
    2788:	d1 2c       	mov	r13, r1
    278a:	cc 0e       	add	r12, r28
    278c:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    278e:	82 2e       	mov	r8, r18
    2790:	99 24       	eor	r9, r9
    2792:	aa 24       	eor	r10, r10
    2794:	bb 24       	eor	r11, r11
    2796:	67 2d       	mov	r22, r7
    2798:	75 2f       	mov	r23, r21
    279a:	a5 01       	movw	r20, r10
    279c:	94 01       	movw	r18, r8
    279e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__udivmodsi4>
    27a2:	79 01       	movw	r14, r18
    27a4:	8a 01       	movw	r16, r20
    char c = m - base * n;
    27a6:	c8 01       	movw	r24, r16
    27a8:	b7 01       	movw	r22, r14
    27aa:	a5 01       	movw	r20, r10
    27ac:	94 01       	movw	r18, r8
    27ae:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsi3>
    27b2:	47 2d       	mov	r20, r7
    27b4:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    27b6:	08 94       	sec
    27b8:	c1 08       	sbc	r12, r1
    27ba:	d1 08       	sbc	r13, r1
    27bc:	4a 30       	cpi	r20, 0x0A	; 10
    27be:	14 f4       	brge	.+4      	; 0x27c4 <_ZN5Print11printNumberEmh+0x7c>
    27c0:	40 5d       	subi	r20, 0xD0	; 208
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <_ZN5Print11printNumberEmh+0x7e>
    27c4:	49 5c       	subi	r20, 0xC9	; 201
    27c6:	f6 01       	movw	r30, r12
    27c8:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    27ca:	e1 14       	cp	r14, r1
    27cc:	f1 04       	cpc	r15, r1
    27ce:	01 05       	cpc	r16, r1
    27d0:	11 05       	cpc	r17, r1
    27d2:	21 f0       	breq	.+8      	; 0x27dc <_ZN5Print11printNumberEmh+0x94>
    27d4:	7e 2c       	mov	r7, r14
    27d6:	5f 2d       	mov	r21, r15
    27d8:	c8 01       	movw	r24, r16
    27da:	dd cf       	rjmp	.-70     	; 0x2796 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    27dc:	c2 01       	movw	r24, r4
    27de:	b6 01       	movw	r22, r12
    27e0:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN5Print5writeEPKc>
}
    27e4:	a1 96       	adiw	r28, 0x21	; 33
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	ef 90       	pop	r14
    27fc:	df 90       	pop	r13
    27fe:	cf 90       	pop	r12
    2800:	bf 90       	pop	r11
    2802:	af 90       	pop	r10
    2804:	9f 90       	pop	r9
    2806:	8f 90       	pop	r8
    2808:	7f 90       	pop	r7
    280a:	5f 90       	pop	r5
    280c:	4f 90       	pop	r4
    280e:	08 95       	ret

00002810 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    2810:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    2812:	21 15       	cp	r18, r1
    2814:	31 05       	cpc	r19, r1
    2816:	41 f4       	brne	.+16     	; 0x2828 <_ZN5Print5printEmi+0x18>
    2818:	ed 91       	ld	r30, X+
    281a:	fc 91       	ld	r31, X
    281c:	01 90       	ld	r0, Z+
    281e:	f0 81       	ld	r31, Z
    2820:	e0 2d       	mov	r30, r0
    2822:	64 2f       	mov	r22, r20
    2824:	19 95       	eicall
    2826:	08 95       	ret
  else return printNumber(n, base);
    2828:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN5Print11printNumberEmh>
}
    282c:	08 95       	ret

0000282e <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    2838:	e6 2e       	mov	r14, r22
    283a:	ff 24       	eor	r15, r15
    283c:	00 e0       	ldi	r16, 0x00	; 0
    283e:	10 e0       	ldi	r17, 0x00	; 0
    2840:	b8 01       	movw	r22, r16
    2842:	a7 01       	movw	r20, r14
    2844:	0e 94 08 14 	call	0x2810	; 0x2810 <_ZN5Print5printEmi>
}
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	08 95       	ret

00002852 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    2852:	cf 92       	push	r12
    2854:	df 92       	push	r13
    2856:	ef 92       	push	r14
    2858:	ff 92       	push	r15
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	6c 01       	movw	r12, r24
    2860:	e6 2e       	mov	r14, r22
    2862:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    2864:	ff 24       	eor	r15, r15
    2866:	00 e0       	ldi	r16, 0x00	; 0
    2868:	10 e0       	ldi	r17, 0x00	; 0
    286a:	b8 01       	movw	r22, r16
    286c:	a7 01       	movw	r20, r14
    286e:	0e 94 08 14 	call	0x2810	; 0x2810 <_ZN5Print5printEmi>
    2872:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    2874:	c6 01       	movw	r24, r12
    2876:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN5Print7printlnEv>
    287a:	08 0f       	add	r16, r24
    287c:	19 1f       	adc	r17, r25
  return n;
}
    287e:	c8 01       	movw	r24, r16
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	ef 90       	pop	r14
    2888:	df 90       	pop	r13
    288a:	cf 90       	pop	r12
    288c:	08 95       	ret

0000288e <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	ec 01       	movw	r28, r24
    28a0:	6a 01       	movw	r12, r20
    28a2:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    28a4:	21 15       	cp	r18, r1
    28a6:	31 05       	cpc	r19, r1
    28a8:	41 f4       	brne	.+16     	; 0x28ba <_ZN5Print5printEli+0x2c>
    return write(n);
    28aa:	e8 81       	ld	r30, Y
    28ac:	f9 81       	ldd	r31, Y+1	; 0x01
    28ae:	01 90       	ld	r0, Z+
    28b0:	f0 81       	ld	r31, Z
    28b2:	e0 2d       	mov	r30, r0
    28b4:	64 2f       	mov	r22, r20
    28b6:	19 95       	eicall
    28b8:	1f c0       	rjmp	.+62     	; 0x28f8 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    28ba:	2a 30       	cpi	r18, 0x0A	; 10
    28bc:	31 05       	cpc	r19, r1
    28be:	d1 f4       	brne	.+52     	; 0x28f4 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    28c0:	77 ff       	sbrs	r23, 7
    28c2:	17 c0       	rjmp	.+46     	; 0x28f2 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
    28c8:	01 90       	ld	r0, Z+
    28ca:	f0 81       	ld	r31, Z
    28cc:	e0 2d       	mov	r30, r0
    28ce:	6d e2       	ldi	r22, 0x2D	; 45
    28d0:	19 95       	eicall
    28d2:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    28d4:	44 27       	eor	r20, r20
    28d6:	55 27       	eor	r21, r21
    28d8:	ba 01       	movw	r22, r20
    28da:	4c 19       	sub	r20, r12
    28dc:	5d 09       	sbc	r21, r13
    28de:	6e 09       	sbc	r22, r14
    28e0:	7f 09       	sbc	r23, r15
    28e2:	ce 01       	movw	r24, r28
    28e4:	2a e0       	ldi	r18, 0x0A	; 10
    28e6:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN5Print11printNumberEmh>
    28ea:	98 01       	movw	r18, r16
    28ec:	28 0f       	add	r18, r24
    28ee:	39 1f       	adc	r19, r25
    28f0:	04 c0       	rjmp	.+8      	; 0x28fa <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    28f2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    28f4:	0e 94 a4 13 	call	0x2748	; 0x2748 <_ZN5Print11printNumberEmh>
    28f8:	9c 01       	movw	r18, r24
  }
}
    28fa:	c9 01       	movw	r24, r18
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	cf 90       	pop	r12
    290c:	08 95       	ret

0000290e <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	7b 01       	movw	r14, r22
    2918:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    291a:	00 27       	eor	r16, r16
    291c:	f7 fc       	sbrc	r15, 7
    291e:	00 95       	com	r16
    2920:	10 2f       	mov	r17, r16
    2922:	b8 01       	movw	r22, r16
    2924:	a7 01       	movw	r20, r14
    2926:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN5Print5printEli>
}
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	ff 90       	pop	r15
    2930:	ef 90       	pop	r14
    2932:	08 95       	ret

00002934 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    2934:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN5Print5writeEPKc>
}
    2938:	08 95       	ret

0000293a <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    2944:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN5Print5writeEPKc>
    2948:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    294a:	c7 01       	movw	r24, r14
    294c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN5Print7printlnEv>
    2950:	08 0f       	add	r16, r24
    2952:	19 1f       	adc	r17, r25
  return n;
}
    2954:	c8 01       	movw	r24, r16
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	08 95       	ret

00002960 <main>:
#include <Arduino.h>

int main(void)
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
{
	init();
    2964:	0e 94 6e 15 	call	0x2adc	; 0x2adc <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2968:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    296c:	c1 e8       	ldi	r28, 0x81	; 129
    296e:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    2970:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <loop>
		if (serialEventRun) serialEventRun();
    2974:	20 97       	sbiw	r28, 0x00	; 0
    2976:	e1 f3       	breq	.-8      	; 0x2970 <main+0x10>
    2978:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_Z14serialEventRunv>
    297c:	f9 cf       	rjmp	.-14     	; 0x2970 <main+0x10>

0000297e <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    297e:	1f 92       	push	r1
    2980:	0f 92       	push	r0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	0f 92       	push	r0
    2986:	11 24       	eor	r1, r1
    2988:	2f 93       	push	r18
    298a:	3f 93       	push	r19
    298c:	8f 93       	push	r24
    298e:	9f 93       	push	r25
    2990:	af 93       	push	r26
    2992:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2994:	80 91 53 08 	lds	r24, 0x0853
    2998:	90 91 54 08 	lds	r25, 0x0854
    299c:	a0 91 55 08 	lds	r26, 0x0855
    29a0:	b0 91 56 08 	lds	r27, 0x0856
	unsigned char f = timer0_fract;
    29a4:	30 91 57 08 	lds	r19, 0x0857

	m += MILLIS_INC;
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	a1 1d       	adc	r26, r1
    29ac:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    29ae:	23 2f       	mov	r18, r19
    29b0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    29b2:	2d 37       	cpi	r18, 0x7D	; 125
    29b4:	20 f0       	brcs	.+8      	; 0x29be <__vector_23+0x40>
		f -= FRACT_MAX;
    29b6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	a1 1d       	adc	r26, r1
    29bc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    29be:	20 93 57 08 	sts	0x0857, r18
	timer0_millis = m;
    29c2:	80 93 53 08 	sts	0x0853, r24
    29c6:	90 93 54 08 	sts	0x0854, r25
    29ca:	a0 93 55 08 	sts	0x0855, r26
    29ce:	b0 93 56 08 	sts	0x0856, r27
	timer0_overflow_count++;
    29d2:	80 91 4f 08 	lds	r24, 0x084F
    29d6:	90 91 50 08 	lds	r25, 0x0850
    29da:	a0 91 51 08 	lds	r26, 0x0851
    29de:	b0 91 52 08 	lds	r27, 0x0852
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	a1 1d       	adc	r26, r1
    29e6:	b1 1d       	adc	r27, r1
    29e8:	80 93 4f 08 	sts	0x084F, r24
    29ec:	90 93 50 08 	sts	0x0850, r25
    29f0:	a0 93 51 08 	sts	0x0851, r26
    29f4:	b0 93 52 08 	sts	0x0852, r27
}
    29f8:	bf 91       	pop	r27
    29fa:	af 91       	pop	r26
    29fc:	9f 91       	pop	r25
    29fe:	8f 91       	pop	r24
    2a00:	3f 91       	pop	r19
    2a02:	2f 91       	pop	r18
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti

00002a0e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2a0e:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2a10:	f8 94       	cli
	m = timer0_millis;
    2a12:	20 91 53 08 	lds	r18, 0x0853
    2a16:	30 91 54 08 	lds	r19, 0x0854
    2a1a:	40 91 55 08 	lds	r20, 0x0855
    2a1e:	50 91 56 08 	lds	r21, 0x0856
	SREG = oldSREG;
    2a22:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2a24:	b9 01       	movw	r22, r18
    2a26:	ca 01       	movw	r24, r20
    2a28:	08 95       	ret

00002a2a <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    2a2a:	9b 01       	movw	r18, r22
    2a2c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2a2e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    2a30:	f8 94       	cli
	m = timer0_overflow_count;
    2a32:	80 91 4f 08 	lds	r24, 0x084F
    2a36:	90 91 50 08 	lds	r25, 0x0850
    2a3a:	a0 91 51 08 	lds	r26, 0x0851
    2a3e:	b0 91 52 08 	lds	r27, 0x0852
#if defined(TCNT0)
	t = TCNT0;
    2a42:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a44:	a8 9b       	sbis	0x15, 0	; 21
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <delay+0x28>
    2a48:	6f 3f       	cpi	r22, 0xFF	; 255
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <delay+0x28>
		m++;
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	a1 1d       	adc	r26, r1
    2a50:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a52:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    2a54:	ba 2f       	mov	r27, r26
    2a56:	a9 2f       	mov	r26, r25
    2a58:	98 2f       	mov	r25, r24
    2a5a:	88 27       	eor	r24, r24
    2a5c:	86 0f       	add	r24, r22
    2a5e:	91 1d       	adc	r25, r1
    2a60:	a1 1d       	adc	r26, r1
    2a62:	b1 1d       	adc	r27, r1
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	aa 1f       	adc	r26, r26
    2a6c:	bb 1f       	adc	r27, r27
    2a6e:	6a 95       	dec	r22
    2a70:	d1 f7       	brne	.-12     	; 0x2a66 <delay+0x3c>
    2a72:	bc 01       	movw	r22, r24
    2a74:	2d c0       	rjmp	.+90     	; 0x2ad0 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2a76:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    2a78:	f8 94       	cli
	m = timer0_overflow_count;
    2a7a:	80 91 4f 08 	lds	r24, 0x084F
    2a7e:	90 91 50 08 	lds	r25, 0x0850
    2a82:	a0 91 51 08 	lds	r26, 0x0851
    2a86:	b0 91 52 08 	lds	r27, 0x0852
#if defined(TCNT0)
	t = TCNT0;
    2a8a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a8c:	a8 9b       	sbis	0x15, 0	; 21
    2a8e:	05 c0       	rjmp	.+10     	; 0x2a9a <delay+0x70>
    2a90:	ef 3f       	cpi	r30, 0xFF	; 255
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <delay+0x70>
		m++;
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	a1 1d       	adc	r26, r1
    2a98:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a9a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    2a9c:	ba 2f       	mov	r27, r26
    2a9e:	a9 2f       	mov	r26, r25
    2aa0:	98 2f       	mov	r25, r24
    2aa2:	88 27       	eor	r24, r24
    2aa4:	8e 0f       	add	r24, r30
    2aa6:	91 1d       	adc	r25, r1
    2aa8:	a1 1d       	adc	r26, r1
    2aaa:	b1 1d       	adc	r27, r1
    2aac:	e2 e0       	ldi	r30, 0x02	; 2
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	aa 1f       	adc	r26, r26
    2ab4:	bb 1f       	adc	r27, r27
    2ab6:	ea 95       	dec	r30
    2ab8:	d1 f7       	brne	.-12     	; 0x2aae <delay+0x84>
    2aba:	86 1b       	sub	r24, r22
    2abc:	97 0b       	sbc	r25, r23
    2abe:	88 5e       	subi	r24, 0xE8	; 232
    2ac0:	93 40       	sbci	r25, 0x03	; 3
    2ac2:	c8 f2       	brcs	.-78     	; 0x2a76 <delay+0x4c>
			ms--;
    2ac4:	21 50       	subi	r18, 0x01	; 1
    2ac6:	30 40       	sbci	r19, 0x00	; 0
    2ac8:	40 40       	sbci	r20, 0x00	; 0
    2aca:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    2acc:	68 51       	subi	r22, 0x18	; 24
    2ace:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2ad0:	21 15       	cp	r18, r1
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	41 05       	cpc	r20, r1
    2ad6:	51 05       	cpc	r21, r1
    2ad8:	71 f6       	brne	.-100    	; 0x2a76 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2ada:	08 95       	ret

00002adc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2adc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2ade:	84 b5       	in	r24, 0x24	; 36
    2ae0:	82 60       	ori	r24, 0x02	; 2
    2ae2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ae4:	84 b5       	in	r24, 0x24	; 36
    2ae6:	81 60       	ori	r24, 0x01	; 1
    2ae8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2aea:	85 b5       	in	r24, 0x25	; 37
    2aec:	82 60       	ori	r24, 0x02	; 2
    2aee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2af0:	85 b5       	in	r24, 0x25	; 37
    2af2:	81 60       	ori	r24, 0x01	; 1
    2af4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2af6:	ee e6       	ldi	r30, 0x6E	; 110
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	81 60       	ori	r24, 0x01	; 1
    2afe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b00:	e1 e8       	ldi	r30, 0x81	; 129
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b06:	80 81       	ld	r24, Z
    2b08:	82 60       	ori	r24, 0x02	; 2
    2b0a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b0c:	80 81       	ld	r24, Z
    2b0e:	81 60       	ori	r24, 0x01	; 1
    2b10:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b12:	e0 e8       	ldi	r30, 0x80	; 128
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	81 60       	ori	r24, 0x01	; 1
    2b1a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b1c:	e1 eb       	ldi	r30, 0xB1	; 177
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	84 60       	ori	r24, 0x04	; 4
    2b24:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2b26:	e0 eb       	ldi	r30, 0xB0	; 176
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	81 60       	ori	r24, 0x01	; 1
    2b2e:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2b30:	e1 e9       	ldi	r30, 0x91	; 145
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	82 60       	ori	r24, 0x02	; 2
    2b38:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2b3a:	80 81       	ld	r24, Z
    2b3c:	81 60       	ori	r24, 0x01	; 1
    2b3e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2b40:	e0 e9       	ldi	r30, 0x90	; 144
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	81 60       	ori	r24, 0x01	; 1
    2b48:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2b4a:	e1 ea       	ldi	r30, 0xA1	; 161
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	82 60       	ori	r24, 0x02	; 2
    2b52:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2b54:	80 81       	ld	r24, Z
    2b56:	81 60       	ori	r24, 0x01	; 1
    2b58:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2b5a:	e0 ea       	ldi	r30, 0xA0	; 160
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	81 60       	ori	r24, 0x01	; 1
    2b62:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2b64:	e1 e2       	ldi	r30, 0x21	; 33
    2b66:	f1 e0       	ldi	r31, 0x01	; 1
    2b68:	80 81       	ld	r24, Z
    2b6a:	82 60       	ori	r24, 0x02	; 2
    2b6c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2b6e:	80 81       	ld	r24, Z
    2b70:	81 60       	ori	r24, 0x01	; 1
    2b72:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2b74:	e0 e2       	ldi	r30, 0x20	; 32
    2b76:	f1 e0       	ldi	r31, 0x01	; 1
    2b78:	80 81       	ld	r24, Z
    2b7a:	81 60       	ori	r24, 0x01	; 1
    2b7c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2b7e:	ea e7       	ldi	r30, 0x7A	; 122
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	84 60       	ori	r24, 0x04	; 4
    2b86:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2b88:	80 81       	ld	r24, Z
    2b8a:	82 60       	ori	r24, 0x02	; 2
    2b8c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2b8e:	80 81       	ld	r24, Z
    2b90:	81 60       	ori	r24, 0x01	; 1
    2b92:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2b94:	80 81       	ld	r24, Z
    2b96:	80 68       	ori	r24, 0x80	; 128
    2b98:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2b9a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2b9e:	08 95       	ret

00002ba0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2ba4:	48 2f       	mov	r20, r24
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	ca 01       	movw	r24, r20
    2baa:	85 5d       	subi	r24, 0xD5	; 213
    2bac:	9c 4f       	sbci	r25, 0xFC	; 252
    2bae:	fc 01       	movw	r30, r24
    2bb0:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    2bb2:	4b 51       	subi	r20, 0x1B	; 27
    2bb4:	5d 4f       	sbci	r21, 0xFD	; 253
    2bb6:	fa 01       	movw	r30, r20
    2bb8:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2bba:	88 23       	and	r24, r24
    2bbc:	69 f1       	breq	.+90     	; 0x2c18 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e9 56       	subi	r30, 0x69	; 105
    2bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bca:	a5 91       	lpm	r26, Z+
    2bcc:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    2bce:	fc 01       	movw	r30, r24
    2bd0:	ef 54       	subi	r30, 0x4F	; 79
    2bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd4:	c5 91       	lpm	r28, Z+
    2bd6:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    2bd8:	66 23       	and	r22, r22
    2bda:	51 f4       	brne	.+20     	; 0x2bf0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2bdc:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2bde:	f8 94       	cli
		*reg &= ~bit;
    2be0:	8c 91       	ld	r24, X
    2be2:	93 2f       	mov	r25, r19
    2be4:	90 95       	com	r25
    2be6:	89 23       	and	r24, r25
    2be8:	8c 93       	st	X, r24
		*out &= ~bit;
    2bea:	88 81       	ld	r24, Y
    2bec:	89 23       	and	r24, r25
    2bee:	0b c0       	rjmp	.+22     	; 0x2c06 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2bf0:	62 30       	cpi	r22, 0x02	; 2
    2bf2:	61 f4       	brne	.+24     	; 0x2c0c <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2bf4:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2bf6:	f8 94       	cli
		*reg &= ~bit;
    2bf8:	8c 91       	ld	r24, X
    2bfa:	93 2f       	mov	r25, r19
    2bfc:	90 95       	com	r25
    2bfe:	89 23       	and	r24, r25
    2c00:	8c 93       	st	X, r24
		*out |= bit;
    2c02:	88 81       	ld	r24, Y
    2c04:	83 2b       	or	r24, r19
    2c06:	88 83       	st	Y, r24
		SREG = oldSREG;
    2c08:	2f bf       	out	0x3f, r18	; 63
    2c0a:	06 c0       	rjmp	.+12     	; 0x2c18 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2c0c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c0e:	f8 94       	cli
		*reg |= bit;
    2c10:	8c 91       	ld	r24, X
    2c12:	83 2b       	or	r24, r19
    2c14:	8c 93       	st	X, r24
		SREG = oldSREG;
    2c16:	9f bf       	out	0x3f, r25	; 63
	}
}
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	08 95       	ret

00002c1e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2c1e:	89 30       	cpi	r24, 0x09	; 9
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <turnOffPWM+0x6>
    2c22:	49 c0       	rjmp	.+146    	; 0x2cb6 <turnOffPWM+0x98>
    2c24:	8a 30       	cpi	r24, 0x0A	; 10
    2c26:	a0 f4       	brcc	.+40     	; 0x2c50 <turnOffPWM+0x32>
    2c28:	84 30       	cpi	r24, 0x04	; 4
    2c2a:	51 f1       	breq	.+84     	; 0x2c80 <turnOffPWM+0x62>
    2c2c:	85 30       	cpi	r24, 0x05	; 5
    2c2e:	40 f4       	brcc	.+16     	; 0x2c40 <turnOffPWM+0x22>
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	79 f1       	breq	.+94     	; 0x2c92 <turnOffPWM+0x74>
    2c34:	83 30       	cpi	r24, 0x03	; 3
    2c36:	00 f5       	brcc	.+64     	; 0x2c78 <turnOffPWM+0x5a>
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <turnOffPWM+0x20>
    2c3c:	63 c0       	rjmp	.+198    	; 0x2d04 <turnOffPWM+0xe6>
    2c3e:	26 c0       	rjmp	.+76     	; 0x2c8c <turnOffPWM+0x6e>
    2c40:	87 30       	cpi	r24, 0x07	; 7
    2c42:	79 f1       	breq	.+94     	; 0x2ca2 <turnOffPWM+0x84>
    2c44:	88 30       	cpi	r24, 0x08	; 8
    2c46:	98 f5       	brcc	.+102    	; 0x2cae <turnOffPWM+0x90>
    2c48:	86 30       	cpi	r24, 0x06	; 6
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <turnOffPWM+0x30>
    2c4c:	5b c0       	rjmp	.+182    	; 0x2d04 <turnOffPWM+0xe6>
    2c4e:	25 c0       	rjmp	.+74     	; 0x2c9a <turnOffPWM+0x7c>
    2c50:	8d 30       	cpi	r24, 0x0D	; 13
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <turnOffPWM+0x38>
    2c54:	42 c0       	rjmp	.+132    	; 0x2cda <turnOffPWM+0xbc>
    2c56:	8e 30       	cpi	r24, 0x0E	; 14
    2c58:	28 f4       	brcc	.+10     	; 0x2c64 <turnOffPWM+0x46>
    2c5a:	8b 30       	cpi	r24, 0x0B	; 11
    2c5c:	b1 f1       	breq	.+108    	; 0x2cca <turnOffPWM+0xac>
    2c5e:	8c 30       	cpi	r24, 0x0C	; 12
    2c60:	c0 f5       	brcc	.+112    	; 0x2cd2 <turnOffPWM+0xb4>
    2c62:	2d c0       	rjmp	.+90     	; 0x2cbe <turnOffPWM+0xa0>
    2c64:	80 31       	cpi	r24, 0x10	; 16
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <turnOffPWM+0x4c>
    2c68:	42 c0       	rjmp	.+132    	; 0x2cee <turnOffPWM+0xd0>
    2c6a:	81 31       	cpi	r24, 0x11	; 17
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <turnOffPWM+0x52>
    2c6e:	45 c0       	rjmp	.+138    	; 0x2cfa <turnOffPWM+0xdc>
    2c70:	8f 30       	cpi	r24, 0x0F	; 15
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <turnOffPWM+0x58>
    2c74:	47 c0       	rjmp	.+142    	; 0x2d04 <turnOffPWM+0xe6>
    2c76:	37 c0       	rjmp	.+110    	; 0x2ce6 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2c78:	80 91 80 00 	lds	r24, 0x0080
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2c80:	80 91 80 00 	lds	r24, 0x0080
    2c84:	8f 7d       	andi	r24, 0xDF	; 223
    2c86:	80 93 80 00 	sts	0x0080, r24
    2c8a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2c8c:	84 b5       	in	r24, 0x24	; 36
    2c8e:	8f 77       	andi	r24, 0x7F	; 127
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2c92:	84 b5       	in	r24, 0x24	; 36
    2c94:	8f 7d       	andi	r24, 0xDF	; 223
    2c96:	84 bd       	out	0x24, r24	; 36
    2c98:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2c9a:	80 91 b0 00 	lds	r24, 0x00B0
    2c9e:	8f 77       	andi	r24, 0x7F	; 127
    2ca0:	03 c0       	rjmp	.+6      	; 0x2ca8 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2ca2:	80 91 b0 00 	lds	r24, 0x00B0
    2ca6:	8f 7d       	andi	r24, 0xDF	; 223
    2ca8:	80 93 b0 00 	sts	0x00B0, r24
    2cac:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2cae:	80 91 90 00 	lds	r24, 0x0090
    2cb2:	8f 77       	andi	r24, 0x7F	; 127
    2cb4:	07 c0       	rjmp	.+14     	; 0x2cc4 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2cb6:	80 91 90 00 	lds	r24, 0x0090
    2cba:	8f 7d       	andi	r24, 0xDF	; 223
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2cbe:	80 91 90 00 	lds	r24, 0x0090
    2cc2:	87 7f       	andi	r24, 0xF7	; 247
    2cc4:	80 93 90 00 	sts	0x0090, r24
    2cc8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2cca:	80 91 a0 00 	lds	r24, 0x00A0
    2cce:	8f 77       	andi	r24, 0x7F	; 127
    2cd0:	07 c0       	rjmp	.+14     	; 0x2ce0 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2cd2:	80 91 a0 00 	lds	r24, 0x00A0
    2cd6:	8f 7d       	andi	r24, 0xDF	; 223
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2cda:	80 91 a0 00 	lds	r24, 0x00A0
    2cde:	87 7f       	andi	r24, 0xF7	; 247
    2ce0:	80 93 a0 00 	sts	0x00A0, r24
    2ce4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2ce6:	80 91 20 01 	lds	r24, 0x0120
    2cea:	8f 77       	andi	r24, 0x7F	; 127
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2cee:	80 91 20 01 	lds	r24, 0x0120
    2cf2:	8f 7d       	andi	r24, 0xDF	; 223
    2cf4:	80 93 20 01 	sts	0x0120, r24
    2cf8:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2cfa:	80 91 20 01 	lds	r24, 0x0120
    2cfe:	87 7f       	andi	r24, 0xF7	; 247
    2d00:	80 93 20 01 	sts	0x0120, r24
    2d04:	08 95       	ret

00002d06 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2d06:	ff 92       	push	r15
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    2d0e:	48 2f       	mov	r20, r24
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	ca 01       	movw	r24, r20
    2d14:	8f 58       	subi	r24, 0x8F	; 143
    2d16:	9c 4f       	sbci	r25, 0xFC	; 252
    2d18:	fc 01       	movw	r30, r24
    2d1a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2d1c:	ca 01       	movw	r24, r20
    2d1e:	85 5d       	subi	r24, 0xD5	; 213
    2d20:	9c 4f       	sbci	r25, 0xFC	; 252
    2d22:	fc 01       	movw	r30, r24
    2d24:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2d26:	4b 51       	subi	r20, 0x1B	; 27
    2d28:	5d 4f       	sbci	r21, 0xFD	; 253
    2d2a:	fa 01       	movw	r30, r20
    2d2c:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2d2e:	00 23       	and	r16, r16
    2d30:	c9 f0       	breq	.+50     	; 0x2d64 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d32:	22 23       	and	r18, r18
    2d34:	19 f0       	breq	.+6      	; 0x2d3c <digitalWrite+0x36>
    2d36:	82 2f       	mov	r24, r18
    2d38:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <turnOffPWM>

	out = portOutputRegister(port);
    2d3c:	e0 2f       	mov	r30, r16
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	ef 54       	subi	r30, 0x4F	; 79
    2d46:	fd 4f       	sbci	r31, 0xFD	; 253
    2d48:	a5 91       	lpm	r26, Z+
    2d4a:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    2d4c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2d4e:	f8 94       	cli

	if (val == LOW) {
    2d50:	ff 20       	and	r15, r15
    2d52:	21 f4       	brne	.+8      	; 0x2d5c <digitalWrite+0x56>
		*out &= ~bit;
    2d54:	8c 91       	ld	r24, X
    2d56:	10 95       	com	r17
    2d58:	81 23       	and	r24, r17
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <digitalWrite+0x5a>
	} else {
		*out |= bit;
    2d5c:	8c 91       	ld	r24, X
    2d5e:	81 2b       	or	r24, r17
    2d60:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2d62:	9f bf       	out	0x3f, r25	; 63
}
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	08 95       	ret

00002d6c <__mulsi3>:
    2d6c:	62 9f       	mul	r22, r18
    2d6e:	d0 01       	movw	r26, r0
    2d70:	73 9f       	mul	r23, r19
    2d72:	f0 01       	movw	r30, r0
    2d74:	82 9f       	mul	r24, r18
    2d76:	e0 0d       	add	r30, r0
    2d78:	f1 1d       	adc	r31, r1
    2d7a:	64 9f       	mul	r22, r20
    2d7c:	e0 0d       	add	r30, r0
    2d7e:	f1 1d       	adc	r31, r1
    2d80:	92 9f       	mul	r25, r18
    2d82:	f0 0d       	add	r31, r0
    2d84:	83 9f       	mul	r24, r19
    2d86:	f0 0d       	add	r31, r0
    2d88:	74 9f       	mul	r23, r20
    2d8a:	f0 0d       	add	r31, r0
    2d8c:	65 9f       	mul	r22, r21
    2d8e:	f0 0d       	add	r31, r0
    2d90:	99 27       	eor	r25, r25
    2d92:	72 9f       	mul	r23, r18
    2d94:	b0 0d       	add	r27, r0
    2d96:	e1 1d       	adc	r30, r1
    2d98:	f9 1f       	adc	r31, r25
    2d9a:	63 9f       	mul	r22, r19
    2d9c:	b0 0d       	add	r27, r0
    2d9e:	e1 1d       	adc	r30, r1
    2da0:	f9 1f       	adc	r31, r25
    2da2:	bd 01       	movw	r22, r26
    2da4:	cf 01       	movw	r24, r30
    2da6:	11 24       	eor	r1, r1
    2da8:	08 95       	ret

00002daa <__udivmodsi4>:
    2daa:	a1 e2       	ldi	r26, 0x21	; 33
    2dac:	1a 2e       	mov	r1, r26
    2dae:	aa 1b       	sub	r26, r26
    2db0:	bb 1b       	sub	r27, r27
    2db2:	fd 01       	movw	r30, r26
    2db4:	0d c0       	rjmp	.+26     	; 0x2dd0 <__udivmodsi4_ep>

00002db6 <__udivmodsi4_loop>:
    2db6:	aa 1f       	adc	r26, r26
    2db8:	bb 1f       	adc	r27, r27
    2dba:	ee 1f       	adc	r30, r30
    2dbc:	ff 1f       	adc	r31, r31
    2dbe:	a2 17       	cp	r26, r18
    2dc0:	b3 07       	cpc	r27, r19
    2dc2:	e4 07       	cpc	r30, r20
    2dc4:	f5 07       	cpc	r31, r21
    2dc6:	20 f0       	brcs	.+8      	; 0x2dd0 <__udivmodsi4_ep>
    2dc8:	a2 1b       	sub	r26, r18
    2dca:	b3 0b       	sbc	r27, r19
    2dcc:	e4 0b       	sbc	r30, r20
    2dce:	f5 0b       	sbc	r31, r21

00002dd0 <__udivmodsi4_ep>:
    2dd0:	66 1f       	adc	r22, r22
    2dd2:	77 1f       	adc	r23, r23
    2dd4:	88 1f       	adc	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	1a 94       	dec	r1
    2dda:	69 f7       	brne	.-38     	; 0x2db6 <__udivmodsi4_loop>
    2ddc:	60 95       	com	r22
    2dde:	70 95       	com	r23
    2de0:	80 95       	com	r24
    2de2:	90 95       	com	r25
    2de4:	9b 01       	movw	r18, r22
    2de6:	ac 01       	movw	r20, r24
    2de8:	bd 01       	movw	r22, r26
    2dea:	cf 01       	movw	r24, r30
    2dec:	08 95       	ret

00002dee <__tablejump2__>:
    2dee:	ee 0f       	add	r30, r30
    2df0:	ff 1f       	adc	r31, r31

00002df2 <__tablejump__>:
    2df2:	05 90       	lpm	r0, Z+
    2df4:	f4 91       	lpm	r31, Z+
    2df6:	e0 2d       	mov	r30, r0
    2df8:	19 94       	eijmp

00002dfa <_exit>:
    2dfa:	f8 94       	cli

00002dfc <__stop_program>:
    2dfc:	ff cf       	rjmp	.-2      	; 0x2dfc <__stop_program>
